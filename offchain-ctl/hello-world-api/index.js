// Generated by purs bundle 0.14.9
var PS = {};
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var semigroupoidFn = {
      compose: function (f) {
          return function (g) {
              return function (x) {
                  return f(g(x));
              };
          };
      }
  };
  var compose = function (dict) {
      return dict.compose;
  };
  var composeFlipped = function (dictSemigroupoid) {
      return function (f) {
          return function (g) {
              return compose(dictSemigroupoid)(g)(f);
          };
      };
  };
  exports["compose"] = compose;
  exports["composeFlipped"] = composeFlipped;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = {
      identity: function (x) {
          return x;
      },
      Semigroupoid0: function () {
          return Control_Semigroupoid.semigroupoidFn;
      }
  };
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];                    
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["applyFlipped"] = applyFlipped;
  exports["on"] = on;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorFn = {
      map: Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)
  };
  var functorArray = {
      map: $foreign.arrayMap
  };
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["voidRight"] = voidRight;
  exports["voidLeft"] = voidLeft;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var applyArray = {
      apply: $foreign.arrayApply,
      Functor0: function () {
          return Data_Functor.functorArray;
      }
  };
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  var lift3 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c);
                  };
              };
          };
      };
  };
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
  exports["lift3"] = lift3;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                  
  var pure = function (dict) {
      return dict.pure;
  };
  var unless = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 66, column 1 - line 66, column 65): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 61, column 1 - line 61, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  var applicativeArray = {
      pure: function (x) {
          return [ x ];
      },
      Apply0: function () {
          return Control_Apply.applyArray;
      }
  };
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["unless"] = unless;
  exports["when"] = when;
  exports["applicativeArray"] = applicativeArray;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];          
  var discard = function (dict) {
      return dict.discard;
  };
  var bindArray = {
      bind: $foreign.arrayBind,
      Apply0: function () {
          return Control_Apply.applyArray;
      }
  };
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  };
  var discardUnit = {
      discard: function (dictBind) {
          return bind(dictBind);
      }
  };
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["discard"] = discard;
  exports["join"] = join;
  exports["composeKleisli"] = composeKleisli;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS);
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqIntImpl = refEq;
  exports.eqNumberImpl = refEq;
  exports.eqCharImpl = refEq;
  exports.eqStringImpl = refEq;

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];                  
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeHas = function (label) {
    return function (rec) {
      return {}.hasOwnProperty.call(rec, label);
    };
  };

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };

  exports.unsafeSet = function (label) {
    return function (value) {
      return function (rec) {
        var copy = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        copy[label] = value;
        return copy;
      };
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeHas"] = $foreign.unsafeHas;
  exports["unsafeGet"] = $foreign.unsafeGet;
  exports["unsafeSet"] = $foreign.unsafeSet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Type.Proxy"] = $PS["Type.Proxy"] || {};
  var exports = $PS["Type.Proxy"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];
  var eqString = {
      eq: $foreign.eqStringImpl
  };
  var eqRowNil = {
      eqRecord: function (v) {
          return function (v1) {
              return function (v2) {
                  return true;
              };
          };
      }
  };
  var eqRecord = function (dict) {
      return dict.eqRecord;
  };
  var eqRec = function () {
      return function (dictEqRecord) {
          return {
              eq: eqRecord(dictEqRecord)(Type_Proxy["Proxy"].value)
          };
      };
  };
  var eqNumber = {
      eq: $foreign.eqNumberImpl
  };
  var eqInt = {
      eq: $foreign.eqIntImpl
  };
  var eqChar = {
      eq: $foreign.eqCharImpl
  };
  var eqBoolean = {
      eq: $foreign.eqBooleanImpl
  };
  var eq = function (dict) {
      return dict.eq;
  };
  var eqArray = function (dictEq) {
      return {
          eq: $foreign.eqArrayImpl(eq(dictEq))
      };
  };
  var eqRowCons = function (dictEqRecord) {
      return function () {
          return function (dictIsSymbol) {
              return function (dictEq) {
                  return {
                      eqRecord: function (v) {
                          return function (ra) {
                              return function (rb) {
                                  var tail = eqRecord(dictEqRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                                  var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                                  var get = Record_Unsafe.unsafeGet(key);
                                  return eq(dictEq)(get(ra))(get(rb)) && tail;
                              };
                          };
                      }
                  };
              };
          };
      };
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
  exports["eqArray"] = eqArray;
  exports["eqRec"] = eqRec;
  exports["eqRowNil"] = eqRowNil;
  exports["eqRowCons"] = eqRowCons;
})(PS);
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];
  var semigroupString = {
      append: $foreign.concatString
  };
  var semigroupRecordNil = {
      appendRecord: function (v) {
          return function (v1) {
              return function (v2) {
                  return {};
              };
          };
      }
  };
  var semigroupArray = {
      append: $foreign.concatArray
  };
  var appendRecord = function (dict) {
      return dict.appendRecord;
  };
  var semigroupRecord = function () {
      return function (dictSemigroupRecord) {
          return {
              append: appendRecord(dictSemigroupRecord)(Type_Proxy["Proxy"].value)
          };
      };
  };
  var append = function (dict) {
      return dict.append;
  };
  var semigroupRecordCons = function (dictIsSymbol) {
      return function () {
          return function (dictSemigroupRecord) {
              return function (dictSemigroup) {
                  return {
                      appendRecord: function (v) {
                          return function (ra) {
                              return function (rb) {
                                  var tail = appendRecord(dictSemigroupRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                                  var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                                  var insert = Record_Unsafe.unsafeSet(key);
                                  var get = Record_Unsafe.unsafeGet(key);
                                  return insert(append(dictSemigroup)(get(ra))(get(rb)))(tail);
                              };
                          };
                      }
                  };
              };
          };
      };
  };
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
  exports["semigroupRecord"] = semigroupRecord;
  exports["semigroupRecordNil"] = semigroupRecordNil;
  exports["semigroupRecordCons"] = semigroupRecordCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var semigroupMaybe = function (dictSemigroup) {
      return {
          append: function (v) {
              return function (v1) {
                  if (v instanceof Nothing) {
                      return v1;
                  };
                  if (v1 instanceof Nothing) {
                      return v;
                  };
                  if (v instanceof Just && v1 instanceof Just) {
                      return new Just(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
                  };
                  throw new Error("Failed pattern match at Data.Maybe (line 185, column 1 - line 188, column 43): " + [ v.constructor.name, v1.constructor.name ]);
              };
          }
      };
  };
  var monoidMaybe = function (dictSemigroup) {
      return {
          mempty: Nothing.value,
          Semigroup0: function () {
              return semigroupMaybe(dictSemigroup);
          }
      };
  };
  var maybe$prime = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v(Data_Unit.unit);
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 243, column 1 - line 243, column 62): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = {
      map: function (v) {
          return function (v1) {
              if (v1 instanceof Just) {
                  return new Just(v(v1.value0));
              };
              return Nothing.value;
          };
      }
  };
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function () {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  };
  var eqMaybe = function (dictEq) {
      return {
          eq: function (x) {
              return function (y) {
                  if (x instanceof Nothing && y instanceof Nothing) {
                      return true;
                  };
                  if (x instanceof Just && y instanceof Just) {
                      return Data_Eq.eq(dictEq)(x.value0)(y.value0);
                  };
                  return false;
              };
          }
      };
  };
  var applyMaybe = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Just) {
                  return Data_Functor.map(functorMaybe)(v.value0)(v1);
              };
              if (v instanceof Nothing) {
                  return Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorMaybe;
      }
  };
  var bindMaybe = {
      bind: function (v) {
          return function (v1) {
              if (v instanceof Just) {
                  return v1(v.value0);
              };
              if (v instanceof Nothing) {
                  return Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Maybe (line 126, column 1 - line 128, column 28): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Apply0: function () {
          return applyMaybe;
      }
  };
  var applicativeMaybe = {
      pure: Just.create,
      Apply0: function () {
          return applyMaybe;
      }
  };
  var monadMaybe = {
      Applicative0: function () {
          return applicativeMaybe;
      },
      Bind1: function () {
          return bindMaybe;
      }
  };
  var altMaybe = {
      alt: function (v) {
          return function (v1) {
              if (v instanceof Nothing) {
                  return v1;
              };
              return v;
          };
      },
      Functor0: function () {
          return functorMaybe;
      }
  };
  var plusMaybe = {
      empty: Nothing.value,
      Alt0: function () {
          return altMaybe;
      }
  };
  var alternativeMaybe = {
      Applicative0: function () {
          return applicativeMaybe;
      },
      Plus1: function () {
          return plusMaybe;
      }
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["maybe'"] = maybe$prime;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["altMaybe"] = altMaybe;
  exports["plusMaybe"] = plusMaybe;
  exports["alternativeMaybe"] = alternativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["monadMaybe"] = monadMaybe;
  exports["semigroupMaybe"] = semigroupMaybe;
  exports["monoidMaybe"] = monoidMaybe;
  exports["eqMaybe"] = eqMaybe;
})(PS);
(function(exports) {
  /* global require exports BROWSER_RUNTIME */

  var CardanoWasm;
  if (typeof BROWSER_RUNTIME != 'undefined' && BROWSER_RUNTIME) {
      CardanoWasm = require('@emurgo/cardano-serialization-lib-browser');
  } else {
      CardanoWasm = require('@emurgo/cardano-serialization-lib-nodejs');
  }


  const callClassStaticMaybe = (classname, functionname) => maybe => input => {
      var ret = null;
      try {
          ret = CardanoWasm[classname][functionname](input);
      }
      catch (e) {
          // console.log(e);
      }
      if (ret == null) {
          return maybe.nothing;
      }
      return maybe.just(ret);
  };

  const callMethodParameterless = methodname => object => {
      return object[methodname]();
  };
  const callToAddress = callMethodParameterless("to_address");
  const callToBytes = callMethodParameterless("to_bytes");
  const callToBech32 = callMethodParameterless("to_bech32");
  const callNetworkId = callMethodParameterless("network_id");
  const callPaymentCred = callMethodParameterless("payment_cred");
  const callStakeCred = callMethodParameterless("stake_cred");

  // :: forall a. { onKeyHash:: Ed25519KeyHash -> a, onScriptHash :: ScriptHash -> a } -> StakeCredential -> a
  exports.withStakeCredential = cbObj => stakeCred => {
      const keyhash = stakeCred.to_keyhash();
      return keyhash
          ? cbObj.onKeyHash(keyhash)
          : cbObj.onScriptHash(stakeCred.to_scripthash());
  };

  exports.keyHashCredential = CardanoWasm.StakeCredential.from_keyhash;
  exports.scriptHashCredential = CardanoWasm.StakeCredential.from_scripthash;


  exports.addressBytes = callToBytes;     
  exports.stakeCredentialToBytes = callToBytes;

  exports.addressBech32 = callToBech32;

  exports._addressFromBytes = callClassStaticMaybe('Address','from_bytes');           

  exports._addressFromBech32 = callClassStaticMaybe('Address', 'from_bech32');          

  exports._baseAddressFromAddress = callClassStaticMaybe('BaseAddress', 'from_address');  
  exports._enterpriseAddressFromAddress = callClassStaticMaybe('EnterpriseAddress', 'from_address');
  exports._pointerAddressFromAddress = callClassStaticMaybe('PointerAddress', 'from_address');
  exports._rewardAddressFromAddress = callClassStaticMaybe('RewardAddress', 'from_address');

  exports.baseAddressToAddress = callToAddress; 
  exports.enterpriseAddressToAddress = callToAddress;
  exports.rewardAddressToAddress = callToAddress;

  exports.baseAddressPaymentCred = callPaymentCred;
  exports.rewardAddressPaymentCred = callPaymentCred;
  exports.enterpriseAddressPaymentCred = callPaymentCred;
  exports.pointerAddressPaymentCred = callPaymentCred;

  // newEnterpriseAddress :: { network:: NetworkId, paymentCred :: StakeCredential } -> EnterpriseAddress
  exports._enterpriseAddress = netIdToInt => inpRec => {
      return CardanoWasm.EnterpriseAddress.new(netIdToInt(inpRec.network), inpRec.paymentCred);
  };

  // newRewardAddress :: { network:: NetworkId, paymentCred :: StakeCredential } -> RewardAddress
  exports._rewardAddress = netIdToInt => inpRec => {
      return CardanoWasm.RewardAddress.new(netIdToInt(inpRec.network), inpRec.paymentCred);
  };

  // newBaseAddress ::
  //    { network :: NetworkId, paymentCred :: StakeCredential, delegationCred :: StakeCredential } -> BaseAddress
  exports._baseAddress = netIdToInt => inpRec => {
      return CardanoWasm.BaseAddress.new(netIdToInt(inpRec.network), inpRec.paymentCred, inpRec.delegationCred);
  };
})(PS["Serialization.Address"] = PS["Serialization.Address"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];
  var alt = function (dict) {
      return dict.alt;
  };
  exports["alt"] = alt;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;
  exports.ordNumberImpl = unsafeCompareImpl;
  exports.ordStringImpl = unsafeCompareImpl;
  exports.ordCharImpl = unsafeCompareImpl;

  exports.ordArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        var i = 0;
        var xlen = xs.length;
        var ylen = ys.length;
        while (i < xlen && i < ylen) {
          var x = xs[i];
          var y = ys[i];
          var o = f(x)(y);
          if (o !== 0) {
            return o;
          }
          i++;
        }
        if (xlen === ylen) {
          return 0;
        } else if (xlen > ylen) {
          return -1;
        } else {
          return 1;
        }
      };
    };
  };
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var eqOrdering = {
      eq: function (v) {
          return function (v1) {
              if (v instanceof LT && v1 instanceof LT) {
                  return true;
              };
              if (v instanceof GT && v1 instanceof GT) {
                  return true;
              };
              if (v instanceof EQ && v1 instanceof EQ) {
                  return true;
              };
              return false;
          };
      }
  };
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["eqOrdering"] = eqOrdering;
})(PS);
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };

  exports.numSub = function (n1) {
    return function (n2) {
      return n1 - n2;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var zero = function (dict) {
      return dict.zero;
  };
  var semiringNumber = {
      add: $foreign.numAdd,
      zero: 0.0,
      mul: $foreign.numMul,
      one: 1.0
  };
  var semiringInt = {
      add: $foreign.intAdd,
      zero: 0,
      mul: $foreign.intMul,
      one: 1
  };
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["semiringInt"] = semiringInt;
  exports["semiringNumber"] = semiringNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var sub = function (dict) {
      return dict.sub;
  };
  var ringNumber = {
      sub: $foreign.numSub,
      Semiring0: function () {
          return Data_Semiring.semiringNumber;
      }
  };
  var ringInt = {
      sub: $foreign.intSub,
      Semiring0: function () {
          return Data_Semiring.semiringInt;
      }
  };
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
      };
  };
  exports["sub"] = sub;
  exports["negate"] = negate;
  exports["ringInt"] = ringInt;
  exports["ringNumber"] = ringNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];
  var ordString = {
      compare: $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqString;
      }
  };
  var ordRecordNil = {
      compareRecord: function (v) {
          return function (v1) {
              return function (v2) {
                  return Data_Ordering.EQ.value;
              };
          };
      },
      EqRecord0: function () {
          return Data_Eq.eqRowNil;
      }
  };
  var ordNumber = {
      compare: $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqNumber;
      }
  };
  var ordInt = {
      compare: $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqInt;
      }
  };
  var ordChar = {
      compare: $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqChar;
      }
  };
  var compareRecord = function (dict) {
      return dict.compareRecord;
  };
  var ordRecord = function () {
      return function (dictOrdRecord) {
          return {
              compare: compareRecord(dictOrdRecord)(Type_Proxy["Proxy"].value),
              Eq0: function () {
                  return Data_Eq.eqRec()(dictOrdRecord.EqRecord0());
              }
          };
      };
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var greaterThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return true;
              };
              return false;
          };
      };
  };
  var greaterThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var signum = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $50 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($50) {
                  return Data_Semiring.one(dictRing.Semiring0());
              };
              return Data_Ring.negate(dictRing)(Data_Semiring.one(dictRing.Semiring0()));
          };
      };
  };
  var lessThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var lessThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return false;
              };
              return true;
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 176, column 3 - line 179, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var ordArray = function (dictOrd) {
      return {
          compare: (function () {
              var toDelta = function (x) {
                  return function (y) {
                      var v = compare(dictOrd)(x)(y);
                      if (v instanceof Data_Ordering.EQ) {
                          return 0;
                      };
                      if (v instanceof Data_Ordering.LT) {
                          return 1;
                      };
                      if (v instanceof Data_Ordering.GT) {
                          return -1 | 0;
                      };
                      throw new Error("Failed pattern match at Data.Ord (line 74, column 7 - line 77, column 17): " + [ v.constructor.name ]);
                  };
              };
              return function (xs) {
                  return function (ys) {
                      return compare(ordInt)(0)($foreign.ordArrayImpl(toDelta)(xs)(ys));
                  };
              };
          })(),
          Eq0: function () {
              return Data_Eq.eqArray(dictOrd.Eq0());
          }
      };
  };
  var ordRecordCons = function (dictOrdRecord) {
      return function () {
          return function (dictIsSymbol) {
              return function (dictOrd) {
                  return {
                      compareRecord: function (v) {
                          return function (ra) {
                              return function (rb) {
                                  var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                                  var left = compare(dictOrd)(Record_Unsafe.unsafeGet(key)(ra))(Record_Unsafe.unsafeGet(key)(rb));
                                  var $56 = Data_Eq.notEq(Data_Ordering.eqOrdering)(left)(Data_Ordering.EQ.value);
                                  if ($56) {
                                      return left;
                                  };
                                  return compareRecord(dictOrdRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                              };
                          };
                      },
                      EqRecord0: function () {
                          return Data_Eq.eqRowCons(dictOrdRecord.EqRecord0())()(dictIsSymbol)(dictOrd.Eq0());
                      }
                  };
              };
          };
      };
  };
  var between = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  if (lessThan(dictOrd)(x)(low)) {
                      return false;
                  };
                  if (greaterThan(dictOrd)(x)(hi)) {
                      return false;
                  };
                  return true;
              };
          };
      };
  };
  var abs = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $60 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($60) {
                  return x;
              };
              return Data_Ring.negate(dictRing)(x);
          };
      };
  };
  exports["compare"] = compare;
  exports["lessThan"] = lessThan;
  exports["lessThanOrEq"] = lessThanOrEq;
  exports["greaterThan"] = greaterThan;
  exports["greaterThanOrEq"] = greaterThanOrEq;
  exports["min"] = min;
  exports["max"] = max;
  exports["between"] = between;
  exports["abs"] = abs;
  exports["signum"] = signum;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
  exports["ordArray"] = ordArray;
  exports["ordRecordNil"] = ordRecordNil;
  exports["ordRecordCons"] = ordRecordCons;
  exports["ordRecord"] = ordRecord;
})(PS);
(function(exports) {
  "use strict";

  exports.from = function (val) {
      return val >>> 0;
  };

  exports.exact = function (just) {
      return function (nothing) {
          return function (conv) {
              return function (val) {
                  var cval = conv(val);
                  if (cval == val) {
                      return just(cval);
                  }
                  return nothing;
              };
          };
      };
  };

  exports.toInt = function (uval) {
      return uval | 0;
  };

  exports.uintAdd = function (x) {
      return function (y) {
          return (x + y) >>> 0;
      };
  };

  exports.uintMul = function (x) {
      return function (y) {
          return Math.imul(x, y) >>> 0;
      };
  };

  exports.uintEq = function (x) {
      return function (y) {
          return x == y;
      };
  };

  exports.uintCmp = function (lt) {
      return function (eq) {
          return function (gt) {
              return function (x) {
                  return function (y) {
                      if (x < y) return lt;
                      if (x === y) return eq;
                      return gt;
                  };
              };
          };
      };
  };

  exports.fromStringImpl = function (s) {
      var n = Number(s);
      if (n === parseInt(s)) {
          return n;
      }
      return NaN;
  };

  exports.toString = function (x) {
      return x.toString();
  };

  exports.and = function (n1) {
      return function (n2) {
          return (n1 & n2) >>> 0;
      };
  };

  exports.or = function (n1) {
      return function (n2) {
          return (n1 | n2) >>> 0;
      };
  };

  exports.shl = function (n1) {
      return function (n2) {
          return (n1 << n2) >>> 0;
      };
  };

  exports.zshr = function (n1) {
      return function (n2) {
          return (n1 >>> n2) >>> 0;
      };
  };
})(PS["Data.UInt"] = PS["Data.UInt"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.UInt"] = $PS["Data.UInt"] || {};
  var exports = $PS["Data.UInt"];
  var $foreign = $PS["Data.UInt"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ordering = $PS["Data.Ordering"];
  var uintShowInstance = {
      show: function (u) {
          return $foreign.toString(u) + "u";
      }
  };
  var uintEqInstance = {
      eq: $foreign.uintEq
  };
  var uintOrd = {
      compare: $foreign.uintCmp(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return uintEqInstance;
      }
  };                                                                                                 
  var fromNumber = $foreign.from;
  var fromNumber$prime = $foreign.exact(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(fromNumber);
  var fromString = function ($2) {
      return fromNumber$prime($foreign.fromStringImpl($2));
  };
  var fromInt = $foreign.from;
  var fromInt$prime = $foreign.exact(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(fromInt);
  var uintSemiring = {
      zero: fromInt(0),
      add: $foreign.uintAdd,
      one: fromInt(1),
      mul: $foreign.uintMul
  };
  exports["fromInt"] = fromInt;
  exports["fromInt'"] = fromInt$prime;
  exports["fromNumber'"] = fromNumber$prime;
  exports["fromString"] = fromString;
  exports["uintSemiring"] = uintSemiring;
  exports["uintEqInstance"] = uintEqInstance;
  exports["uintOrd"] = uintOrd;
  exports["uintShowInstance"] = uintShowInstance;
  exports["toInt"] = $foreign.toInt;
  exports["and"] = $foreign.and;
  exports["or"] = $foreign.or;
  exports["shl"] = $foreign.shl;
  exports["zshr"] = $foreign.zshr;
  exports["toString"] = $foreign.toString;
})(PS);
(function(exports) {
  /* global exports */

  // Abstracts away unpacking elements from a monomorphic container.
  const unpack = obj => {
      const res = [];

      for (let i = 0; i < obj.len(); i++) {
          res.push(obj.get(i));
      };

      return res;
  };

  // unpacks an associative container where keys are stored in .keys()
  // and values for that keys might be missing.
  const unpackKeyIndexed = tuple => obj => {
      const res = [];
      for (let i = 0; i < obj.len(); i++) {
          var k = obj.keys().get(i);
          var v = obj.get(k);
          if (v == null) continue;
          res.push(tuple(k)(v));
      };
      return res;
  };

  exports._containerHelper = r => ({
      // Abstracts away packing array of something into a monomorphic container.
      pack: (container, elements) => {
          const res = container.new();
          elements.forEach(elem => res.add(elem));
          return res;
      },
      // Abstracts away packing a list of KV-pairs into a map-like structure.
      packMap: (container, entries) => {
          const res = container.new();
          entries.forEach(entry => {
              const [key, value] = r.untuple(entry);
              res.insert(key, value);
          });
          return res;
      },
      unpack,
      unpackKeyIndexed: unpackKeyIndexed(r.tuple),
      unpackFromProperty: prop => obj => unpack(obj[prop]())
  });
})(PS["FfiHelpers"] = PS["FfiHelpers"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var note = function (a) {
      return Data_Maybe.maybe(new Left(a))(Right.create);
  };
  var functorEither = {
      map: function (f) {
          return function (m) {
              if (m instanceof Left) {
                  return new Left(m.value0);
              };
              if (m instanceof Right) {
                  return new Right(f(m.value0));
              };
              throw new Error("Failed pattern match at Data.Either (line 31, column 1 - line 31, column 52): " + [ m.constructor.name ]);
          };
      }
  };
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  var isRight = either(Data_Function["const"](false))(Data_Function["const"](true));
  var applyEither = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Left) {
                  return new Left(v.value0);
              };
              if (v instanceof Right) {
                  return Data_Functor.map(functorEither)(v.value0)(v1);
              };
              throw new Error("Failed pattern match at Data.Either (line 70, column 1 - line 72, column 30): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorEither;
      }
  };
  var bindEither = {
      bind: either(function (e) {
          return function (v) {
              return new Left(e);
          };
      })(function (a) {
          return function (f) {
              return f(a);
          };
      }),
      Apply0: function () {
          return applyEither;
      }
  };
  var applicativeEither = {
      pure: Right.create,
      Apply0: function () {
          return applyEither;
      }
  };
  var monadEither = {
      Applicative0: function () {
          return applicativeEither;
      },
      Bind1: function () {
          return bindEither;
      }
  };
  var altEither = {
      alt: function (v) {
          return function (v1) {
              if (v instanceof Left) {
                  return v1;
              };
              return v;
          };
      },
      Functor0: function () {
          return functorEither;
      }
  };
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["isRight"] = isRight;
  exports["note"] = note;
  exports["hush"] = hush;
  exports["functorEither"] = functorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["altEither"] = altEither;
  exports["bindEither"] = bindEither;
  exports["monadEither"] = monadEither;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };

  exports.cons = function (head) {
    return function (tail) {
      return [head].concat(tail);
    };
  };

  exports.join = function (separator) {
    return function (xs) {
      return xs.join(separator);
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var showString = {
      show: $foreign.showStringImpl
  };
  var showRecordFieldsNil = {
      showRecordFields: function (v) {
          return function (v1) {
              return [  ];
          };
      }
  };
  var showRecordFields = function (dict) {
      return dict.showRecordFields;
  };
  var showRecord = function () {
      return function (dictShowRecordFields) {
          return {
              show: function (record) {
                  var v = showRecordFields(dictShowRecordFields)(Type_Proxy["Proxy"].value)(record);
                  if (v.length === 0) {
                      return "{}";
                  };
                  return $foreign.join(" ")([ "{", $foreign.join(", ")(v), "}" ]);
              }
          };
      };
  };
  var showNumber = {
      show: $foreign.showNumberImpl
  };
  var showInt = {
      show: $foreign.showIntImpl
  };
  var showBoolean = {
      show: function (v) {
          if (v) {
              return "true";
          };
          if (!v) {
              return "false";
          };
          throw new Error("Failed pattern match at Data.Show (line 20, column 1 - line 22, column 23): " + [ v.constructor.name ]);
      }
  };
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return {
          show: $foreign.showArrayImpl(show(dictShow))
      };
  };
  var showRecordFieldsCons = function (dictIsSymbol) {
      return function (dictShowRecordFields) {
          return function (dictShow) {
              return {
                  showRecordFields: function (v) {
                      return function (record) {
                          var tail = showRecordFields(dictShowRecordFields)(Type_Proxy["Proxy"].value)(record);
                          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                          var focus = Record_Unsafe.unsafeGet(key)(record);
                          return $foreign.cons($foreign.join(": ")([ key, show(dictShow)(focus) ]))(tail);
                      };
                  }
              };
          };
      };
  };
  exports["show"] = show;
  exports["showBoolean"] = showBoolean;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
  exports["showRecord"] = showRecord;
  exports["showRecordFieldsNil"] = showRecordFieldsNil;
  exports["showRecordFieldsCons"] = showRecordFieldsCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];                
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };
  var showTuple = function (dictShow) {
      return function (dictShow1) {
          return {
              show: function (v) {
                  return "(Tuple " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
              }
          };
      };
  };
  var semigroupTuple = function (dictSemigroup) {
      return function (dictSemigroup1) {
          return {
              append: function (v) {
                  return function (v1) {
                      return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value1));
                  };
              }
          };
      };
  };
  var functorTuple = {
      map: function (f) {
          return function (m) {
              return new Tuple(m.value0, f(m.value1));
          };
      }
  };
  var fst = function (v) {
      return v.value0;
  };
  var eqTuple = function (dictEq) {
      return function (dictEq1) {
          return {
              eq: function (x) {
                  return function (y) {
                      return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
                  };
              }
          };
      };
  };
  var ordTuple = function (dictOrd) {
      return function (dictOrd1) {
          return {
              compare: function (x) {
                  return function (y) {
                      var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                      if (v instanceof Data_Ordering.LT) {
                          return Data_Ordering.LT.value;
                      };
                      if (v instanceof Data_Ordering.GT) {
                          return Data_Ordering.GT.value;
                      };
                      return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
                  };
              },
              Eq0: function () {
                  return eqTuple(dictOrd.Eq0())(dictOrd1.Eq0());
              }
          };
      };
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
  exports["showTuple"] = showTuple;
  exports["eqTuple"] = eqTuple;
  exports["ordTuple"] = ordTuple;
  exports["semigroupTuple"] = semigroupTuple;
  exports["functorTuple"] = functorTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["FfiHelpers"] = $PS["FfiHelpers"] || {};
  var exports = $PS["FfiHelpers"];
  var $foreign = $PS["FfiHelpers"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var untuple = function (v) {
      return [ v.value0, v.value1 ];
  };
  var maybeFfiHelper = {
      nothing: Data_Maybe.Nothing.value,
      just: Data_Maybe.Just.create,
      from: Data_Maybe.fromMaybe
  };
  var errorHelper = function (v) {
      return {
          error: function ($4) {
              return Data_Either.Left.create(v($4));
          },
          valid: Data_Either.Right.create,
          from: function (e) {
              var $5 = Data_Maybe.fromMaybe(e);
              return function ($6) {
                  return $5(Data_Either.hush($6));
              };
          }
      };
  };
  var containerHelper = $foreign["_containerHelper"]({
      untuple: untuple,
      tuple: Data_Tuple.Tuple.create
  });
  exports["maybeFfiHelper"] = maybeFfiHelper;
  exports["containerHelper"] = containerHelper;
  exports["errorHelper"] = errorHelper;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function () {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Safe_Coerce = $PS["Safe.Coerce"];                
  var wrap = Safe_Coerce.coerce;
  var unwrap = Safe_Coerce.coerce;
  var un = function () {
      return function (v) {
          return unwrap();
      };
  };
  var over = function () {
      return function () {
          return function (v) {
              return Safe_Coerce.coerce();
          };
      };
  };
  var alaF = function () {
      return function () {
          return function () {
              return function () {
                  return function (v) {
                      return Safe_Coerce.coerce();
                  };
              };
          };
      };
  };
  exports["wrap"] = wrap;
  exports["unwrap"] = unwrap;
  exports["un"] = un;
  exports["alaF"] = alaF;
  exports["over"] = over;
})(PS);
(function(exports) {
  // From instance for Array in prelude
  exports.ord_ = f => xs => ys => {
      let i = 0;
      const xlen = xs.length;
      const ylen = ys.length;
      while (i < xlen && i < ylen) {
          var o = f(xs[i])(ys[i]);
          if (o !== 0) {
              return o;
          }
          i++;
      }
      if (xlen === ylen) {
          return 0;
      } else if (xlen > ylen) {
          return -1;
      } else {
          return 1;
      }
  };

  exports.concat_ = xs => ys => {
      const res = new Uint8Array(xs.length + ys.length);
      for (let i = 0; i < xs.length; i++) {
          res[i] = xs[i];
      }
      for (let i = 0; i < ys.length; i++) {
          res[i + xs.length] = ys[i];
      }
      return res;
  };

  exports.byteArrayToHex = arr =>
      Buffer.from(arr).toString('hex');

  /* adapted from https://github.com/WebReflection/uint8-to-utf16/blob/master/esm/index.js
 * (someone who knows javascript should like import that or something)
 */  
  const {ceil} = Math;
  const {fromCharCode} = String;

  exports.hexToByteArray_ = nothing => just => hex => {
      for (var bytes = [], c = 0; c < hex.length; c += 2) {
          const chunk = hex.substr(c, 2);
          if (/[0-9a-f]{2}/i.test(chunk)) {
              bytes.push(parseInt(chunk, 16));
          } else {
              return nothing;
          }
      }
      return just(new Uint8Array(bytes));
  };

  exports.byteArrayFromIntArrayUnsafe = ints => new Uint8Array(ints);                                           

  exports.byteArrayFromIntArray_ = nothing => just => ints => {
      if (ints.every(i => i < 256 && i >= 0)) {
          return just(new Uint8Array(ints));
      } else {
          return nothing;
      }
  };

  exports.byteArrayToIntArray = bytes => Array.from(bytes);

  // _byteLength :: Uint8Array -> BigInt
  exports._byteLength = bytes =>
    bytes.byteLength;
})(PS["Types.ByteArray"] = PS["Types.ByteArray"] || {});
(function(exports) {
  // parseJsonExtractingIntegers
  //   :: String -> {patchedPayload :: String, numberIndex :: Array String}
  exports.parseJsonExtractingIntegers = str => {
      const [patchedPayload, numberIndex] = parseJsonExtractingIntegers(str);
      return {patchedPayload, numberIndex};
  };

  exports.stringifyAeson_ = numberIndex => originalObject => {
      const fatal = msg => {
          throw new Error("Error in stringifyObject: " + msg);
      };

      let res = '';

      // Recursively iterate over object fields.
      // TODO: use a trampoline?
      const go = object => {
          if (object === null || typeof object == 'string' || typeof object == 'boolean') {
              res += JSON.stringify(object);
          } else if (object instanceof Array) {
              res += '[';
              object.forEach((elem, ix) => {
                  go(elem);
                  if (ix != object.length - 1) {
                      res += ',';
                  }
              });
              res += ']';
          } else if (typeof object == 'object') {
              res += '{';
              let keys = [];
              for (let key in object) {
                  if (object.hasOwnProperty(key)) {
                      keys.push(key);
                  }
              };
              keys.sort(); // for stability of Eq instance
              keys.forEach((key, ix) => {
                  res += JSON.stringify(key);
                  res += ':';
                  go(object[key]);
                  if (ix != keys.length - 1) {
                      res += ',';
                  }
              });
              res += '}';
          } else if (typeof object == 'number') {
              if (object in numberIndex) {
                  res += numberIndex[object];
              } else {
                  fatal("No such index in numberIndex!");
              }
          } else {
              fatal("Wrong type of object: " + typeof object);
          }
      };

      go(originalObject);
      return res;
  };

  // NOTE: For a general overview of this function's purpose,
  //       consult module docstring in Aeson.purs
  const parseJsonExtractingIntegers = str => {
      const s = String(str);

      const index = [];
      let counter = 0;
      let numberAcc = [];

      const arr = [];
      let in_number = false;
      let in_string = false;
      let escaped = -1;

      for (let i = 0, n = s.length; i < n; ++i) {
          const c = s[i];
          // set the escape flag
          if (in_string && escaped!=i){
              if (c == "\\"){
                  escaped = i+1;
              }
          }
          // set in_string flag
          if (c == '"' && escaped!=i) {
              in_string = !in_string;
          }
          // set in_number flag and quote numbers
          if(!in_string){
              if (c >= '0' && c <= '9' || c == '-') {
                  if (!in_number) {
                      // push a number index in place of a number
                      arr.push((counter++).toString());
                  }
                  in_number=true;
              }
              // assuming a number can only end with:
              if (c == ',' || c == '}' || c == ']' || /\s/.test(c)){
                  if (in_number) {
                      // push the accumulated number string into the
                      // number index
                      index.push(numberAcc.join(''));
                      numberAcc = [];
                  }
                  in_number=false;
              }
          }
          // push char if in string or is not a whitespace
          if (in_number) {
              numberAcc.push(c);
          } else if (in_string || !/\s/.test(c)) {
              arr.push(c);
          }
      }

      // single number case
      if (in_number) {
          index.push(numberAcc.join(''));
      }

      return [arr.join(''), index];
  };
})(PS["Aeson"] = PS["Aeson"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Lazy"] = $PS["Control.Lazy"] || {};
  var exports = $PS["Control.Lazy"];
  var Data_Unit = $PS["Data.Unit"];
  var lazyFn = {
      defer: function (f) {
          return function (x) {
              return f(Data_Unit.unit)(x);
          };
      }
  };
  var defer = function (dict) {
      return dict.defer;
  };
  var fix = function (dictLazy) {
      return function (f) {
          var go = defer(dictLazy)(function (v) {
              return f(go);
          });
          return go;
      };
  };
  exports["defer"] = defer;
  exports["fix"] = fix;
  exports["lazyFn"] = lazyFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.State"] = $PS["Control.Monad.State"] || {};
  var exports = $PS["Control.Monad.State"];
  var evalState = function (v) {
      return function (s) {
          var v1 = v(s);
          return v1.value0;
      };
  };
  exports["evalState"] = evalState;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.State.Class"] = $PS["Control.Monad.State.Class"] || {};
  var exports = $PS["Control.Monad.State.Class"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var state = function (dict) {
      return dict.state;
  };
  var put = function (dictMonadState) {
      return function (s) {
          return state(dictMonadState)(function (v) {
              return new Data_Tuple.Tuple(Data_Unit.unit, s);
          });
      };
  };
  var modify_ = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
          });
      };
  };
  var modify = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              var s$prime = f(s);
              return new Data_Tuple.Tuple(s$prime, s$prime);
          });
      };
  };
  var gets = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(f(s), s);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["state"] = state;
  exports["get"] = get;
  exports["gets"] = gets;
  exports["put"] = put;
  exports["modify"] = modify;
  exports["modify_"] = modify_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var whenM = function (dictMonad) {
      return function (mb) {
          return function (m) {
              return Control_Bind.bind(dictMonad.Bind1())(mb)(function (b) {
                  return Control_Applicative.when(dictMonad.Applicative0())(b)(m);
              });
          };
      };
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["whenM"] = whenM;
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad = $PS["Control.Monad"];                  
  var monadEffect = {
      Applicative0: function () {
          return applicativeEffect;
      },
      Bind1: function () {
          return bindEffect;
      }
  };
  var bindEffect = {
      bind: $foreign.bindE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var applyEffect = {
      apply: Control_Monad.ap(monadEffect),
      Functor0: function () {
          return functorEffect;
      }
  };
  var applicativeEffect = {
      pure: $foreign.pureE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var functorEffect = {
      map: Control_Applicative.liftA1(applicativeEffect)
  };
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.message = function (e) {
    return e.message;
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  var $$throw = function ($2) {
      return $foreign.throwException($foreign.error($2));
  };
  exports["throw"] = $$throw;
  exports["error"] = $foreign.error;
  exports["message"] = $foreign.message;
  exports["throwException"] = $foreign.throwException;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Effect_Exception = $PS["Effect.Exception"];                
  var throwError = function (dict) {
      return dict.throwError;
  };
  var monadThrowEither = {
      throwError: Data_Either.Left.create,
      Monad0: function () {
          return Data_Either.monadEither;
      }
  };
  var monadThrowEffect = {
      throwError: Effect_Exception.throwException,
      Monad0: function () {
          return Effect.monadEffect;
      }
  };
  var catchError = function (dict) {
      return dict.catchError;
  };
  var $$try = function (dictMonadError) {
      return function (a) {
          return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))((function () {
              var $21 = Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0());
              return function ($22) {
                  return $21(Data_Either.Left.create($22));
              };
          })());
      };
  };
  exports["catchError"] = catchError;
  exports["throwError"] = throwError;
  exports["try"] = $$try;
  exports["monadThrowEither"] = monadThrowEither;
  exports["monadThrowEffect"] = monadThrowEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.Trans.Class"] = $PS["Control.Monad.Trans.Class"] || {};
  var exports = $PS["Control.Monad.Trans.Class"];
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];                
  var monadEffectEffect = {
      liftEffect: Control_Category.identity(Control_Category.categoryFn),
      Monad0: function () {
          return Effect.monadEffect;
      }
  };
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.State.Trans"] = $PS["Control.Monad.State.Trans"] || {};
  var exports = $PS["Control.Monad.State.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect_Class = $PS["Effect.Class"];
  var runStateT = function (v) {
      return v;
  };
  var monadTransStateT = {
      lift: function (dictMonad) {
          return function (m) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(m)(function (x) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(x, s));
                  });
              };
          };
      }
  };
  var functorStateT = function (dictFunctor) {
      return {
          map: function (f) {
              return function (v) {
                  return function (s) {
                      return Data_Functor.map(dictFunctor)(function (v1) {
                          return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                      })(v(s));
                  };
              };
          }
      };
  };
  var monadStateT = function (dictMonad) {
      return {
          Applicative0: function () {
              return applicativeStateT(dictMonad);
          },
          Bind1: function () {
              return bindStateT(dictMonad);
          }
      };
  };
  var bindStateT = function (dictMonad) {
      return {
          bind: function (v) {
              return function (f) {
                  return function (s) {
                      return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                          var v3 = f(v1.value0);
                          return v3(v1.value1);
                      });
                  };
              };
          },
          Apply0: function () {
              return applyStateT(dictMonad);
          }
      };
  };
  var applyStateT = function (dictMonad) {
      return {
          apply: Control_Monad.ap(monadStateT(dictMonad)),
          Functor0: function () {
              return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
          }
      };
  };
  var applicativeStateT = function (dictMonad) {
      return {
          pure: function (a) {
              return function (s) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
              };
          },
          Apply0: function () {
              return applyStateT(dictMonad);
          }
      };
  };
  var monadEffectState = function (dictMonadEffect) {
      return {
          liftEffect: (function () {
              var $110 = Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadEffect.Monad0());
              var $111 = Effect_Class.liftEffect(dictMonadEffect);
              return function ($112) {
                  return $110($111($112));
              };
          })(),
          Monad0: function () {
              return monadStateT(dictMonadEffect.Monad0());
          }
      };
  };
  var monadStateStateT = function (dictMonad) {
      return {
          state: function (f) {
              var $113 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($114) {
                  return $113(f($114));
              };
          },
          Monad0: function () {
              return monadStateT(dictMonad);
          }
      };
  };
  var monadThrowStateT = function (dictMonadThrow) {
      return {
          throwError: function (e) {
              return Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadThrow.Monad0())(Control_Monad_Error_Class.throwError(dictMonadThrow)(e));
          },
          Monad0: function () {
              return monadStateT(dictMonadThrow.Monad0());
          }
      };
  };
  var monadErrorStateT = function (dictMonadError) {
      return {
          catchError: function (v) {
              return function (h) {
                  return function (s) {
                      return Control_Monad_Error_Class.catchError(dictMonadError)(v(s))(function (e) {
                          var v1 = h(e);
                          return v1(s);
                      });
                  };
              };
          },
          MonadThrow0: function () {
              return monadThrowStateT(dictMonadError.MonadThrow0());
          }
      };
  };
  exports["runStateT"] = runStateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadTransStateT"] = monadTransStateT;
  exports["monadEffectState"] = monadEffectState;
  exports["monadErrorStateT"] = monadErrorStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */
  "use strict";

  function id(x) {
    return x;
  }

  exports.fromBoolean = id;
  exports.fromNumber = id;
  exports.fromString = id;
  exports.fromArray = id;
  exports.fromObject = id;

  exports.jsonNull = null;

  exports.stringify = function (j) {
    return JSON.stringify(j);
  };

  function isArray(a) {
    return Object.prototype.toString.call(a) === "[object Array]";
  }

  exports._caseJson = function (isNull, isBool, isNum, isStr, isArr, isObj, j) {
    if (j == null) return isNull();
    else if (typeof j === "boolean") return isBool(j);
    else if (typeof j === "number") return isNum(j);
    else if (typeof j === "string") return isStr(j);
    else if (Object.prototype.toString.call(j) === "[object Array]")
      return isArr(j);
    else return isObj(j);
  };

  exports._compare = function _compare(EQ, GT, LT, a, b) {
    if (a == null) {
      if (b == null) return EQ;
      else return LT;
    } else if (typeof a === "boolean") {
      if (typeof b === "boolean") {
        // boolean / boolean
        if (a === b) return EQ;
        else if (a === false) return LT;
        else return GT;
      } else if (b == null) return GT;
      else return LT;
    } else if (typeof a === "number") {
      if (typeof b === "number") {
        if (a === b) return EQ;
        else if (a < b) return LT;
        else return GT;
      } else if (b == null) return GT;
      else if (typeof b === "boolean") return GT;
      else return LT;
    } else if (typeof a === "string") {
      if (typeof b === "string") {
        if (a === b) return EQ;
        else if (a < b) return LT;
        else return GT;
      } else if (b == null) return GT;
      else if (typeof b === "boolean") return GT;
      else if (typeof b === "number") return GT;
      else return LT;
    } else if (isArray(a)) {
      if (isArray(b)) {
        for (var i = 0; i < Math.min(a.length, b.length); i++) {
          var ca = _compare(EQ, GT, LT, a[i], b[i]);
          if (ca !== EQ) return ca;
        }
        if (a.length === b.length) return EQ;
        else if (a.length < b.length) return LT;
        else return GT;
      } else if (b == null) return GT;
      else if (typeof b === "boolean") return GT;
      else if (typeof b === "number") return GT;
      else if (typeof b === "string") return GT;
      else return LT;
    } else {
      if (b == null) return GT;
      else if (typeof b === "boolean") return GT;
      else if (typeof b === "number") return GT;
      else if (typeof b === "string") return GT;
      else if (isArray(b)) return GT;
      else {
        var akeys = Object.keys(a);
        var bkeys = Object.keys(b);
        if (akeys.length < bkeys.length) return LT;
        else if (akeys.length > bkeys.length) return GT;
        var keys = akeys.concat(bkeys).sort();
        for (var j = 0; j < keys.length; j++) {
          var k = keys[j];
          if (a[k] === undefined) return LT;
          else if (b[k] === undefined) return GT;
          var ck = _compare(EQ, GT, LT, a[k], b[k]);
          if (ck !== EQ) return ck;
        }
        return EQ;
      }
    }
  };
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
  "use strict";

  exports._copyST = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f();
  };

  exports._fmapObject = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(m0[k]);
      }
    }
    return m;
  };

  exports._mapWithKey = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(k)(m0[k]);
      }
    }
    return m;
  };

  exports._foldM = function (bind) {
    return function (f) {
      return function (mz) {
        return function (m) {
          var acc = mz;
          function g(k) {
            return function (z) {
              return f(z)(k)(m[k]);
            };
          }
          for (var k in m) {
            if (hasOwnProperty.call(m, k)) {
              acc = bind(acc)(g(k));
            }
          }
          return acc;
        };
      };
    };
  };

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }

  exports.toArrayWithKey = toArrayWithKey;
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.foreach = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"];
  var Control_Monad = $PS["Control.Monad"];
  var functorST = {
      map: $foreign.map_
  };
  var monadST = {
      Applicative0: function () {
          return applicativeST;
      },
      Bind1: function () {
          return bindST;
      }
  };
  var bindST = {
      bind: $foreign.bind_,
      Apply0: function () {
          return applyST;
      }
  };
  var applyST = {
      apply: Control_Monad.ap(monadST),
      Functor0: function () {
          return functorST;
      }
  };
  var applicativeST = {
      pure: $foreign.pure_,
      Apply0: function () {
          return applyST;
      }
  };
  exports["functorST"] = functorST;
  exports["applicativeST"] = applicativeST;
  exports["foreach"] = $foreign.foreach;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };                                                                                                 

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unconsImpl = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports.findLastIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = xs.length - 1; i >= 0; i--) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._insertAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i > l.length) return nothing;
            var l1 = l.slice();
            l1.splice(i, 0, a);
            return just(l1);
          };
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  exports.partition = function (f) {
    return function (xs) {
      var yes = [];
      var no  = [];
      for (var i = 0; i < xs.length; i++) {
        var x = xs[i];
        if (f(x))
          yes.push(x);
        else
          no.push(x);
      }
      return { yes: yes, no: no };
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortByImpl = (function () {
    function mergeFromTo(compare, fromOrdering, xs1, xs2, from, to) {
      var mid;
      var i;
      var j;
      var k;
      var x;
      var y;
      var c;

      mid = from + ((to - from) >> 1);
      if (mid - from > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, from, mid);
      if (to - mid > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, mid, to);

      i = from;
      j = mid;
      k = from;
      while (i < mid && j < to) {
        x = xs2[i];
        y = xs2[j];
        c = fromOrdering(compare(x)(y));
        if (c > 0) {
          xs1[k++] = y;
          ++j;
        }
        else {
          xs1[k++] = x;
          ++i;
        }
      }
      while (i < mid) {
        xs1[k++] = xs2[i++];
      }
      while (j < to) {
        xs1[k++] = xs2[j++];
      }
    }

    return function (compare) {
      return function (fromOrdering) {
        return function (xs) {
          var out;

          if (xs.length < 2) return xs;

          out = xs.slice(0);
          mergeFromTo(compare, fromOrdering, out, xs.slice(0), 0, xs.length);

          return out;
        };
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };

  //------------------------------------------------------------------------------
  // Folding ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.any = function (p) {
    return function (xs) {
      var len = xs.length;
      for (var i = 0; i < len; i++) {
        if (p(xs[i])) return true;
      }
      return false;
    };
  };

  //------------------------------------------------------------------------------
  // Partial ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unsafeIndexImpl = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return [];
  };

  exports.pushAll = function (as) {
    return function (xs) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };

  exports.unsafeFreeze = function (xs) {
    return function () {
      return xs;
    };
  };

  function copyImpl(xs) {
    return function () {
      return xs.slice();
    };
  }                         

  exports.thaw = copyImpl;
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Array.ST"] = $PS["Data.Array.ST"] || {};
  var exports = $PS["Data.Array.ST"];
  var $foreign = $PS["Data.Array.ST"];                     
  var withArray = function (f) {
      return function (xs) {
          return function __do() {
              var result = $foreign.thaw(xs)();
              f(result)();
              return $foreign.unsafeFreeze(result)();
          };
      };
  };
  var push = function (a) {
      return $foreign.pushAll([ a ]);
  };
  exports["withArray"] = withArray;
  exports["push"] = push;
  exports["new"] = $foreign["new"];
  exports["unsafeFreeze"] = $foreign.unsafeFreeze;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Maybe.First"] = $PS["Data.Maybe.First"] || {};
  var exports = $PS["Data.Maybe.First"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var First = function (x) {
      return x;
  };
  var semigroupFirst = {
      append: function (v) {
          return function (v1) {
              if (v instanceof Data_Maybe.Just) {
                  return v;
              };
              return v1;
          };
      }
  };
  var monoidFirst = {
      mempty: Data_Maybe.Nothing.value,
      Semigroup0: function () {
          return semigroupFirst;
      }
  };
  exports["First"] = First;
  exports["semigroupFirst"] = semigroupFirst;
  exports["monoidFirst"] = monoidFirst;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];
  var monoidString = {
      mempty: "",
      Semigroup0: function () {
          return Data_Semigroup.semigroupString;
      }
  };
  var monoidRecordNil = {
      memptyRecord: function (v) {
          return {};
      },
      SemigroupRecord0: function () {
          return Data_Semigroup.semigroupRecordNil;
      }
  };
  var monoidArray = {
      mempty: [  ],
      Semigroup0: function () {
          return Data_Semigroup.semigroupArray;
      }
  };
  var memptyRecord = function (dict) {
      return dict.memptyRecord;
  };
  var monoidRecord = function () {
      return function (dictMonoidRecord) {
          return {
              mempty: memptyRecord(dictMonoidRecord)(Type_Proxy["Proxy"].value),
              Semigroup0: function () {
                  return Data_Semigroup.semigroupRecord()(dictMonoidRecord.SemigroupRecord0());
              }
          };
      };
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidRecordCons = function (dictIsSymbol) {
      return function (dictMonoid) {
          return function () {
              return function (dictMonoidRecord) {
                  return {
                      memptyRecord: function (v) {
                          var tail = memptyRecord(dictMonoidRecord)(Type_Proxy["Proxy"].value);
                          var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                          var insert = Record_Unsafe.unsafeSet(key);
                          return insert(mempty(dictMonoid))(tail);
                      },
                      SemigroupRecord0: function () {
                          return Data_Semigroup.semigroupRecordCons(dictIsSymbol)()(dictMonoidRecord.SemigroupRecord0())(dictMonoid.Semigroup0());
                      }
                  };
              };
          };
      };
  };
  var guard = function (dictMonoid) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return mempty(dictMonoid);
              };
              throw new Error("Failed pattern match at Data.Monoid (line 94, column 1 - line 94, column 49): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  exports["mempty"] = mempty;
  exports["guard"] = guard;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
  exports["monoidRecord"] = monoidRecord;
  exports["monoidRecordNil"] = monoidRecordNil;
  exports["monoidRecordCons"] = monoidRecordCons;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = {
      ff: false,
      tt: true,
      implies: function (a) {
          return function (b) {
              return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
          };
      },
      conj: $foreign.boolConj,
      disj: $foreign.boolDisj,
      not: $foreign.boolNot
  };
  var conj = function (dict) {
      return dict.conj;
  };
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Monoid.Conj"] = $PS["Data.Monoid.Conj"] || {};
  var exports = $PS["Data.Monoid.Conj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Conj = function (x) {
      return x;
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return {
          append: function (v) {
              return function (v1) {
                  return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
              };
          }
      };
  };
  var monoidConj = function (dictHeytingAlgebra) {
      return {
          mempty: Data_HeytingAlgebra.tt(dictHeytingAlgebra),
          Semigroup0: function () {
              return semigroupConj(dictHeytingAlgebra);
          }
      };
  };
  exports["Conj"] = Conj;
  exports["monoidConj"] = monoidConj;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
  var exports = $PS["Data.Monoid.Disj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return {
          append: function (v) {
              return function (v1) {
                  return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
              };
          }
      };
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return {
          mempty: Data_HeytingAlgebra.ff(dictHeytingAlgebra),
          Semigroup0: function () {
              return semigroupDisj(dictHeytingAlgebra);
          }
      };
  };
  exports["Disj"] = Disj;
  exports["monoidDisj"] = monoidDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Maybe_First = $PS["Data.Maybe.First"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Unit = $PS["Data.Unit"];                
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $316 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($317) {
                      return $316(f($317));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  };
  var length = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(function (c) {
              return function (v) {
                  return Data_Semiring.add(dictSemiring)(Data_Semiring.one(dictSemiring))(c);
              };
          })(Data_Semiring.zero(dictSemiring));
      };
  };
  var foldableTuple = {
      foldr: function (f) {
          return function (z) {
              return function (v) {
                  return f(v.value1)(z);
              };
          };
      },
      foldl: function (f) {
          return function (z) {
              return function (v) {
                  return f(z)(v.value1);
              };
          };
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return f(v.value1);
              };
          };
      }
  };
  var foldableMaybe = {
      foldr: function (v) {
          return function (z) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return z;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(v1.value0)(z);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
              };
          };
      },
      foldl: function (v) {
          return function (z) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return z;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(z)(v1.value0);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
              };
          };
      },
      foldMap: function (dictMonoid) {
          return function (v) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Data_Monoid.mempty(dictMonoid);
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(v1.value0);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      }
  };
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = {
      foldr: $foreign.foldrArray,
      foldl: $foreign.foldlArray,
      foldMap: function (dictMonoid) {
          return foldMapDefaultR(foldableArray)(dictMonoid);
      }
  };
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var lookup = function (dictFoldable) {
      return function (dictEq) {
          return function (a) {
              var $323 = Data_Newtype.unwrap();
              var $324 = foldMap(dictFoldable)(Data_Maybe_First.monoidFirst)(function (v) {
                  var $305 = Data_Eq.eq(dictEq)(a)(v.value0);
                  if ($305) {
                      return new Data_Maybe.Just(v.value1);
                  };
                  return Data_Maybe.Nothing.value;
              });
              return function ($325) {
                  return $323($324($325));
              };
          };
      };
  };
  var foldM = function (dictFoldable) {
      return function (dictMonad) {
          return function (f) {
              return function (b0) {
                  return foldl(dictFoldable)(function (b) {
                      return function (a) {
                          return Control_Bind.bind(dictMonad.Bind1())(b)(Data_Function.flip(f)(a));
                      };
                  })(Control_Applicative.pure(dictMonad.Applicative0())(b0));
              };
          };
      };
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF()()()()(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var all = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF()()()()(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
      };
  };
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["fold"] = fold;
  exports["foldM"] = foldM;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["intercalate"] = intercalate;
  exports["all"] = all;
  exports["any"] = any;
  exports["find"] = find;
  exports["length"] = length;
  exports["lookup"] = lookup;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
  exports["foldableTuple"] = foldableTuple;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var unfoldable1Array = {
      unfoldr1: $foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd)
  };
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = {
      unfoldr: $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd),
      Unfoldable10: function () {
          return Data_Unfoldable1.unfoldable1Array;
      }
  };
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var updateAt = $foreign["_updateAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeIndex = function () {
      return $foreign.unsafeIndexImpl;
  };
  var uncons = $foreign.unconsImpl(Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var toUnfoldable = function (dictUnfoldable) {
      return function (xs) {
          var len = $foreign.length(xs);
          var f = function (i) {
              if (i < len) {
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(unsafeIndex()(xs)(i), i + 1 | 0));
              };
              if (Data_Boolean.otherwise) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Array (line 158, column 3 - line 160, column 26): " + [ i.constructor.name ]);
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(f)(0);
      };
  };
  var take = function (n) {
      return function (xs) {
          var $58 = n < 1;
          if ($58) {
              return [  ];
          };
          return $foreign.slice(0)(n)(xs);
      };
  };
  var sortBy = function (comp) {
      return $foreign.sortByImpl(comp)(function (v) {
          if (v instanceof Data_Ordering.GT) {
              return 1;
          };
          if (v instanceof Data_Ordering.EQ) {
              return 0;
          };
          if (v instanceof Data_Ordering.LT) {
              return -1 | 0;
          };
          throw new Error("Failed pattern match at Data.Array (line 831, column 31 - line 834, column 11): " + [ v.constructor.name ]);
      });
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var snoc = function (xs) {
      return function (x) {
          return Data_Array_ST.withArray(Data_Array_ST.push(x))(xs)();
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var nubByEq = function (eq) {
      return function (xs) {
          return (function __do() {
              var arr = Data_Array_ST["new"]();
              Control_Monad_ST_Internal.foreach(xs)(function (x) {
                  return function __do() {
                      var e = Data_Functor.map(Control_Monad_ST_Internal.functorST)((function () {
                          var $90 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                          var $91 = $foreign.any(function (v) {
                              return eq(v)(x);
                          });
                          return function ($92) {
                              return $90($91($92));
                          };
                      })())(Data_Array_ST.unsafeFreeze(arr))();
                      return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(e)(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(x)(arr)))();
                  };
              })();
              return Data_Array_ST.unsafeFreeze(arr)();
          })();
      };
  };
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };
  var insertAt = $foreign["_insertAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var modifyAt = function (i) {
      return function (f) {
          return function (xs) {
              var go = function (x) {
                  return updateAt(i)(f(x))(xs);
              };
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
          };
      };
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var foldr = Data_Foldable.foldr(Data_Foldable.foldableArray);
  var foldl = Data_Foldable.foldl(Data_Foldable.foldableArray);
  var foldMap = function (dictMonoid) {
      return Data_Foldable.foldMap(Data_Foldable.foldableArray)(dictMonoid);
  };                                                                              
  var findLastIndex = $foreign.findLastIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var insertBy = function (cmp) {
      return function (x) {
          return function (ys) {
              var i = Data_Maybe.maybe(0)(function (v) {
                  return v + 1 | 0;
              })(findLastIndex(function (y) {
                  return Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(x)(y))(Data_Ordering.GT.value);
              })(ys));
              return Data_Maybe.fromJust()(insertAt(i)(x)(ys));
          };
      };
  };
  var insert = function (dictOrd) {
      return insertBy(Data_Ord.compare(dictOrd));
  };
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var find = function (f) {
      return function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(unsafeIndex()(xs))(findIndex(f)(xs));
      };
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var elem = function (dictEq) {
      return function (a) {
          return function (arr) {
              return Data_Maybe.isJust(elemIndex(dictEq)(a)(arr));
          };
      };
  };
  var drop = function (n) {
      return function (xs) {
          var $80 = n < 1;
          if ($80) {
              return xs;
          };
          return $foreign.slice(n)($foreign.length(xs))(xs);
      };
  };
  var deleteAt = $foreign["_deleteAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2.length === 0) {
                  return [  ];
              };
              return Data_Maybe.maybe(v2)(function (i) {
                  return Data_Maybe.fromJust()(deleteAt(i)(v2));
              })(findIndex(v(v1))(v2));
          };
      };
  };
  var unionBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(xs)(foldl(Data_Function.flip(deleteBy(eq)))(nubByEq(eq)(ys))(xs));
          };
      };
  };
  var union = function (dictEq) {
      return unionBy(Data_Eq.eq(dictEq));
  };
  var $$delete = function (dictEq) {
      return deleteBy(Data_Eq.eq(dictEq));
  };
  var difference = function (dictEq) {
      return foldr($$delete(dictEq));
  };
  var cons = function (x) {
      return function (xs) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ x ])(xs);
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap((function () {
          var $100 = Data_Maybe.maybe([  ])(singleton);
          return function ($101) {
              return $100(f($101));
          };
      })());
  };
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["singleton"] = singleton;
  exports["null"] = $$null;
  exports["cons"] = cons;
  exports["snoc"] = snoc;
  exports["insert"] = insert;
  exports["head"] = head;
  exports["uncons"] = uncons;
  exports["index"] = index;
  exports["elem"] = elem;
  exports["elemIndex"] = elemIndex;
  exports["find"] = find;
  exports["findIndex"] = findIndex;
  exports["updateAt"] = updateAt;
  exports["modifyAt"] = modifyAt;
  exports["concatMap"] = concatMap;
  exports["mapMaybe"] = mapMaybe;
  exports["mapWithIndex"] = mapWithIndex;
  exports["foldr"] = foldr;
  exports["foldMap"] = foldMap;
  exports["sort"] = sort;
  exports["take"] = take;
  exports["drop"] = drop;
  exports["union"] = union;
  exports["difference"] = difference;
  exports["zip"] = zip;
  exports["unsafeIndex"] = unsafeIndex;
  exports["length"] = $foreign.length;
  exports["concat"] = $foreign.concat;
  exports["filter"] = $foreign.filter;
  exports["partition"] = $foreign.partition;
  exports["slice"] = $foreign.slice;
  exports["any"] = $foreign.any;
})(PS);
(function(exports) {
  "use strict";

  exports.runFn3 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return fn(a, b, c);
        };
      };
    };
  };

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn3"] = $foreign.runFn3;
  exports["runFn4"] = $foreign.runFn4;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = (function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  })();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var traverse = function (dict) {
      return dict.traverse;
  };
  var traversableTuple = {
      traverse: function (dictApplicative) {
          return function (f) {
              return function (v) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create(v.value0))(f(v.value1));
              };
          };
      },
      sequence: function (dictApplicative) {
          return function (v) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create(v.value0))(v.value1);
          };
      },
      Functor0: function () {
          return Data_Tuple.functorTuple;
      },
      Foldable1: function () {
          return Data_Foldable.foldableTuple;
      }
  };
  var traversableMaybe = {
      traverse: function (dictApplicative) {
          return function (v) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe.Just.create)(v(v1.value0));
                  };
                  throw new Error("Failed pattern match at Data.Traversable (line 115, column 1 - line 119, column 33): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      },
      sequence: function (dictApplicative) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
              };
              if (v instanceof Data_Maybe.Just) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe.Just.create)(v.value0);
              };
              throw new Error("Failed pattern match at Data.Traversable (line 115, column 1 - line 119, column 33): " + [ v.constructor.name ]);
          };
      },
      Functor0: function () {
          return Data_Maybe.functorMaybe;
      },
      Foldable1: function () {
          return Data_Foldable.foldableMaybe;
      }
  };
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = {
      traverse: function (dictApplicative) {
          return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
      },
      sequence: function (dictApplicative) {
          return sequenceDefault(traversableArray)(dictApplicative);
      },
      Functor0: function () {
          return Data_Functor.functorArray;
      },
      Foldable1: function () {
          return Data_Foldable.foldableArray;
      }
  };
  var sequence = function (dict) {
      return dict.sequence;
  };
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["for"] = $$for;
  exports["traversableArray"] = traversableArray;
  exports["traversableMaybe"] = traversableMaybe;
  exports["traversableTuple"] = traversableTuple;
})(PS);
(function(exports) {
  "use strict";

  exports.mapWithIndexArray = function (f) {
    return function (xs) {
      var l = xs.length;
      var result = Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(i)(xs[i]);
      }
      return result;
    };
  };
})(PS["Data.FunctorWithIndex"] = PS["Data.FunctorWithIndex"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.FunctorWithIndex"] = $PS["Data.FunctorWithIndex"] || {};
  var exports = $PS["Data.FunctorWithIndex"];
  var $foreign = $PS["Data.FunctorWithIndex"];
  var Data_Functor = $PS["Data.Functor"];          
  var mapWithIndex = function (dict) {
      return dict.mapWithIndex;
  };
  var functorWithIndexArray = {
      mapWithIndex: $foreign.mapWithIndexArray,
      Functor0: function () {
          return Data_Functor.functorArray;
      }
  };
  exports["mapWithIndex"] = mapWithIndex;
  exports["functorWithIndexArray"] = functorWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.FoldableWithIndex"] = $PS["Data.FoldableWithIndex"] || {};
  var exports = $PS["Data.FoldableWithIndex"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var foldrWithIndex = function (dict) {
      return dict.foldrWithIndex;
  };
  var traverseWithIndex_ = function (dictApplicative) {
      return function (dictFoldableWithIndex) {
          return function (f) {
              return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                  var $164 = Control_Apply.applySecond(dictApplicative.Apply0());
                  var $165 = f(i);
                  return function ($166) {
                      return $164($165($166));
                  };
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var forWithIndex_ = function (dictApplicative) {
      return function (dictFoldableWithIndex) {
          return Data_Function.flip(traverseWithIndex_(dictApplicative)(dictFoldableWithIndex));
      };
  };
  var foldMapWithIndexDefaultR = function (dictFoldableWithIndex) {
      return function (dictMonoid) {
          return function (f) {
              return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                  return function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(f(i)(x))(acc);
                      };
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableWithIndexArray = {
      foldrWithIndex: function (f) {
          return function (z) {
              var $167 = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
                  return function (y) {
                      return f(v.value0)(v.value1)(y);
                  };
              })(z);
              var $168 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Data_Tuple.Tuple.create);
              return function ($169) {
                  return $167($168($169));
              };
          };
      },
      foldlWithIndex: function (f) {
          return function (z) {
              var $170 = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (y) {
                  return function (v) {
                      return f(v.value0)(y)(v.value1);
                  };
              })(z);
              var $171 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Data_Tuple.Tuple.create);
              return function ($172) {
                  return $170($171($172));
              };
          };
      },
      foldMapWithIndex: function (dictMonoid) {
          return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
      },
      Foldable0: function () {
          return Data_Foldable.foldableArray;
      }
  };
  var foldMapWithIndex = function (dict) {
      return dict.foldMapWithIndex;
  };
  exports["foldrWithIndex"] = foldrWithIndex;
  exports["foldMapWithIndex"] = foldMapWithIndex;
  exports["forWithIndex_"] = forWithIndex_;
  exports["foldableWithIndexArray"] = foldableWithIndexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.TraversableWithIndex"] = $PS["Data.TraversableWithIndex"] || {};
  var exports = $PS["Data.TraversableWithIndex"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Traversable = $PS["Data.Traversable"];  
  var traverseWithIndexDefault = function (dictTraversableWithIndex) {
      return function (dictApplicative) {
          return function (f) {
              var $64 = Data_Traversable.sequence(dictTraversableWithIndex.Traversable2())(dictApplicative);
              var $65 = Data_FunctorWithIndex.mapWithIndex(dictTraversableWithIndex.FunctorWithIndex0())(f);
              return function ($66) {
                  return $64($65($66));
              };
          };
      };
  };
  var traverseWithIndex = function (dict) {
      return dict.traverseWithIndex;
  };
  var traversableWithIndexArray = {
      traverseWithIndex: function (dictApplicative) {
          return traverseWithIndexDefault(traversableWithIndexArray)(dictApplicative);
      },
      FunctorWithIndex0: function () {
          return Data_FunctorWithIndex.functorWithIndexArray;
      },
      FoldableWithIndex1: function () {
          return Data_FoldableWithIndex.foldableWithIndexArray;
      },
      Traversable2: function () {
          return Data_Traversable.traversableArray;
      }
  };
  exports["traverseWithIndex"] = traverseWithIndex;
  exports["traversableWithIndexArray"] = traversableWithIndexArray;
})(PS);
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Foreign.Object.ST"] = $PS["Foreign.Object.ST"] || {};
  var exports = $PS["Foreign.Object.ST"];
  var $foreign = $PS["Foreign.Object.ST"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];        
  var values = $foreign.toArrayWithKey(function (v) {
      return function (v1) {
          return v1;
      };
  });
  var toUnfoldable = function (dictUnfoldable) {
      var $35 = Data_Array.toUnfoldable(dictUnfoldable);
      var $36 = $foreign.toArrayWithKey(Data_Tuple.Tuple.create);
      return function ($37) {
          return $35($36($37));
      };
  };                                                             
  var thawST = $foreign["_copyST"];
  var mutate = function (f) {
      return function (m) {
          return $foreign.runST(function __do() {
              var s = thawST(m)();
              f(s)();
              return s;
          });
      };
  };                                                                                                    
  var mapWithKey = function (f) {
      return function (m) {
          return $foreign["_mapWithKey"](m, f);
      };
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign["_lookup"])(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var insert = function (k) {
      return function (v) {
          return mutate(Foreign_Object_ST.poke(k)(v));
      };
  };
  var functorObject = {
      map: function (f) {
          return function (m) {
              return $foreign["_fmapObject"](m, f);
          };
      }
  };
  var functorWithIndexObject = {
      mapWithIndex: mapWithKey,
      Functor0: function () {
          return functorObject;
      }
  };
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return $foreign.runST(function __do() {
              var s = Foreign_Object_ST["new"]();
              Control_Monad_ST_Internal.foreach(Data_Array.fromFoldable(dictFoldable)(l))(function (v) {
                  return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Foreign_Object_ST.poke(v.value0)(v.value1)(s));
              })();
              return s;
          });
      };
  };
  var fold = $foreign["_foldM"](Data_Function.applyFlipped);
  var foldMap = function (dictMonoid) {
      return function (f) {
          return fold(function (acc) {
              return function (k) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(k)(v));
                  };
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  };
  var foldableObject = {
      foldl: function (f) {
          return fold(function (z) {
              return function (v) {
                  return f(z);
              };
          });
      },
      foldr: function (f) {
          return function (z) {
              return function (m) {
                  return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(z)(values(m));
              };
          };
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return foldMap(dictMonoid)(Data_Function["const"](f));
          };
      }
  };
  var foldableWithIndexObject = {
      foldlWithIndex: function (f) {
          return fold(Data_Function.flip(f));
      },
      foldrWithIndex: function (f) {
          return function (z) {
              return function (m) {
                  return Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Tuple.uncurry(f))(z)($foreign.toArrayWithKey(Data_Tuple.Tuple.create)(m));
              };
          };
      },
      foldMapWithIndex: function (dictMonoid) {
          return foldMap(dictMonoid);
      },
      Foldable0: function () {
          return foldableObject;
      }
  };
  var traversableWithIndexObject = {
      traverseWithIndex: function (dictApplicative) {
          return function (f) {
              return function (ms) {
                  return fold(function (acc) {
                      return function (k) {
                          return function (v) {
                              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function.flip(insert(k)))(acc))(f(k)(v));
                          };
                      };
                  })(Control_Applicative.pure(dictApplicative)($foreign.empty))(ms);
              };
          };
      },
      FunctorWithIndex0: function () {
          return functorWithIndexObject;
      },
      FoldableWithIndex1: function () {
          return foldableWithIndexObject;
      },
      Traversable2: function () {
          return traversableObject;
      }
  };
  var traversableObject = {
      traverse: function (dictApplicative) {
          var $42 = Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexObject)(dictApplicative);
          return function ($43) {
              return $42(Data_Function["const"]($43));
          };
      },
      sequence: function (dictApplicative) {
          return Data_Traversable.traverse(traversableObject)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      },
      Functor0: function () {
          return functorObject;
      },
      Foldable1: function () {
          return foldableObject;
      }
  };
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["functorObject"] = functorObject;
  exports["traversableObject"] = traversableObject;
  exports["empty"] = $foreign.empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Argonaut.Core"] = $PS["Data.Argonaut.Core"] || {};
  var exports = $PS["Data.Argonaut.Core"];
  var $foreign = $PS["Data.Argonaut.Core"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Foreign_Object = $PS["Foreign.Object"];                
  var verbJsonType = function (def) {
      return function (f) {
          return function (g) {
              return g(def)(f);
          };
      };
  };
  var toJsonType = verbJsonType(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var jsonEmptyObject = $foreign.fromObject(Foreign_Object.empty);   
  var ordJson = {
      compare: function (a) {
          return function (b) {
              return $foreign["_compare"](Data_Ordering.EQ.value, Data_Ordering.GT.value, Data_Ordering.LT.value, a, b);
          };
      },
      Eq0: function () {
          return eqJson;
      }
  };
  var eqJson = {
      eq: function (j1) {
          return function (j2) {
              return Data_Eq.eq(Data_Ordering.eqOrdering)(Data_Ord.compare(ordJson)(j1)(j2))(Data_Ordering.EQ.value);
          };
      }
  };
  var caseJsonString = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                        
  var caseJsonObject = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, j);
          };
      };
  };                                        
  var caseJsonNumber = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                          
  var caseJsonArray = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), j);
          };
      };
  };                                      
  var toArray = toJsonType(caseJsonArray);
  var caseJson = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (json) {
                              return $foreign["_caseJson"](a, b, c, d, e, f, json);
                          };
                      };
                  };
              };
          };
      };
  };
  exports["caseJson"] = caseJson;
  exports["caseJsonNumber"] = caseJsonNumber;
  exports["caseJsonString"] = caseJsonString;
  exports["caseJsonObject"] = caseJsonObject;
  exports["toArray"] = toArray;
  exports["jsonEmptyObject"] = jsonEmptyObject;
  exports["eqJson"] = eqJson;
  exports["fromBoolean"] = $foreign.fromBoolean;
  exports["fromNumber"] = $foreign.fromNumber;
  exports["fromString"] = $foreign.fromString;
  exports["fromArray"] = $foreign.fromArray;
  exports["fromObject"] = $foreign.fromObject;
  exports["jsonNull"] = $foreign.jsonNull;
  exports["stringify"] = $foreign.stringify;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Argonaut.Decode.Error"] = $PS["Data.Argonaut.Decode.Error"] || {};
  var exports = $PS["Data.Argonaut.Decode.Error"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Show = $PS["Data.Show"];                
  var TypeMismatch = (function () {
      function TypeMismatch(value0) {
          this.value0 = value0;
      };
      TypeMismatch.create = function (value0) {
          return new TypeMismatch(value0);
      };
      return TypeMismatch;
  })();
  var UnexpectedValue = (function () {
      function UnexpectedValue(value0) {
          this.value0 = value0;
      };
      UnexpectedValue.create = function (value0) {
          return new UnexpectedValue(value0);
      };
      return UnexpectedValue;
  })();
  var AtIndex = (function () {
      function AtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AtIndex.create = function (value0) {
          return function (value1) {
              return new AtIndex(value0, value1);
          };
      };
      return AtIndex;
  })();
  var AtKey = (function () {
      function AtKey(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AtKey.create = function (value0) {
          return function (value1) {
              return new AtKey(value0, value1);
          };
      };
      return AtKey;
  })();
  var Named = (function () {
      function Named(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Named.create = function (value0) {
          return function (value1) {
              return new Named(value0, value1);
          };
      };
      return Named;
  })();
  var MissingValue = (function () {
      function MissingValue() {

      };
      MissingValue.value = new MissingValue();
      return MissingValue;
  })();
  var showJsonDecodeError = {
      show: function (v) {
          if (v instanceof TypeMismatch) {
              return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
          };
          if (v instanceof UnexpectedValue) {
              return "(UnexpectedValue " + (Data_Argonaut_Core.stringify(v.value0) + ")");
          };
          if (v instanceof AtIndex) {
              return "(AtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showJsonDecodeError)(v.value1) + ")")));
          };
          if (v instanceof AtKey) {
              return "(AtKey " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showJsonDecodeError)(v.value1) + ")")));
          };
          if (v instanceof Named) {
              return "(Named " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showJsonDecodeError)(v.value1) + ")")));
          };
          if (v instanceof MissingValue) {
              return "MissingValue";
          };
          throw new Error("Failed pattern match at Data.Argonaut.Decode.Error (line 24, column 10 - line 30, column 35): " + [ v.constructor.name ]);
      }
  };
  var eqJsonDecodeError = {
      eq: function (x) {
          return function (y) {
              if (x instanceof TypeMismatch && y instanceof TypeMismatch) {
                  return x.value0 === y.value0;
              };
              if (x instanceof UnexpectedValue && y instanceof UnexpectedValue) {
                  return Data_Eq.eq(Data_Argonaut_Core.eqJson)(x.value0)(y.value0);
              };
              if (x instanceof AtIndex && y instanceof AtIndex) {
                  return x.value0 === y.value0 && Data_Eq.eq(eqJsonDecodeError)(x.value1)(y.value1);
              };
              if (x instanceof AtKey && y instanceof AtKey) {
                  return x.value0 === y.value0 && Data_Eq.eq(eqJsonDecodeError)(x.value1)(y.value1);
              };
              if (x instanceof Named && y instanceof Named) {
                  return x.value0 === y.value0 && Data_Eq.eq(eqJsonDecodeError)(x.value1)(y.value1);
              };
              if (x instanceof MissingValue && y instanceof MissingValue) {
                  return true;
              };
              return false;
          };
      }
  };
  exports["TypeMismatch"] = TypeMismatch;
  exports["UnexpectedValue"] = UnexpectedValue;
  exports["AtIndex"] = AtIndex;
  exports["AtKey"] = AtKey;
  exports["Named"] = Named;
  exports["MissingValue"] = MissingValue;
  exports["eqJsonDecodeError"] = eqJsonDecodeError;
  exports["showJsonDecodeError"] = showJsonDecodeError;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Bifunctor"] = $PS["Data.Bifunctor"] || {};
  var exports = $PS["Data.Bifunctor"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var bifunctorTuple = {
      bimap: function (f) {
          return function (g) {
              return function (v) {
                  return new Data_Tuple.Tuple(f(v.value0), g(v.value1));
              };
          };
      }
  };
  var bifunctorEither = {
      bimap: function (v) {
          return function (v1) {
              return function (v2) {
                  if (v2 instanceof Data_Either.Left) {
                      return new Data_Either.Left(v(v2.value0));
                  };
                  if (v2 instanceof Data_Either.Right) {
                      return new Data_Either.Right(v1(v2.value0));
                  };
                  throw new Error("Failed pattern match at Data.Bifunctor (line 32, column 1 - line 34, column 36): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
              };
          };
      }
  };
  exports["bimap"] = bimap;
  exports["lmap"] = lmap;
  exports["bifunctorEither"] = bifunctorEither;
  exports["bifunctorTuple"] = bifunctorTuple;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];
  var top = function (dict) {
      return dict.top;
  };
  var boundedInt = {
      top: $foreign.topInt,
      bottom: $foreign.bottomInt,
      Ord0: function () {
          return Data_Ord.ordInt;
      }
  };
  var boundedChar = {
      top: $foreign.topChar,
      bottom: $foreign.bottomChar,
      Ord0: function () {
          return Data_Ord.ordChar;
      }
  };
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS);
(function(exports) {
  /* globals exports */
  "use strict";               

  exports.isFinite = isFinite;
})(PS["Data.Number"] = PS["Data.Number"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Number"] = $PS["Data.Number"] || {};
  var exports = $PS["Data.Number"];
  var $foreign = $PS["Data.Number"];
  exports["isFinite"] = $foreign["isFinite"];
})(PS);
(function(exports) {
  "use strict";          

  exports.floor = Math.floor;

  exports.round = Math.round;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["floor"] = $foreign.floor;
  exports["round"] = $foreign.round;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Number = $PS["Data.Number"];
  var $$Math = $PS["Math"];
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (!Data_Number["isFinite"](x)) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var round = function ($23) {
      return unsafeClamp($$Math.round($23));
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["fromNumber"] = fromNumber;
  exports["floor"] = floor;
  exports["round"] = round;
  exports["fromString"] = fromString;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Argonaut.Decode.Decoders"] = $PS["Data.Argonaut.Decode.Decoders"] || {};
  var exports = $PS["Data.Argonaut.Decode.Decoders"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Int = $PS["Data.Int"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var decodeString = Data_Argonaut_Core.caseJsonString(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("String")))(Data_Either.Right.create);
  var decodeNumber = Data_Argonaut_Core.caseJsonNumber(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Number")))(Data_Either.Right.create);
  var decodeJArray = (function () {
      var $22 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Array"));
      return function ($23) {
          return $22(Data_Argonaut_Core.toArray($23));
      };
  })();
  var decodeInt = Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
      var $54 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Integer"));
      return function ($55) {
          return $54(Data_Int.fromNumber($55));
      };
  })())(decodeNumber);                                                                                                                                           
  var decodeArray = function (decoder) {
      return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
          var $59 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("Array"));
          var $60 = Data_TraversableWithIndex.traverseWithIndex(Data_TraversableWithIndex.traversableWithIndexArray)(Data_Either.applicativeEither)(function (i) {
              var $62 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtIndex.create(i));
              return function ($63) {
                  return $62(decoder($63));
              };
          });
          return function ($61) {
              return $59($60($61));
          };
      })())(decodeJArray);
  };
  exports["decodeInt"] = decodeInt;
  exports["decodeString"] = decodeString;
  exports["decodeArray"] = decodeArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Argonaut.Decode.Class"] = $PS["Data.Argonaut.Decode.Class"] || {};
  var exports = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Decoders = $PS["Data.Argonaut.Decode.Decoders"];
  var Data_Either = $PS["Data.Either"];
  var decodeJsonString = {
      decodeJson: Data_Argonaut_Decode_Decoders.decodeString
  };
  var decodeJsonJson = {
      decodeJson: Data_Either.Right.create
  };
  var decodeJsonInt = {
      decodeJson: Data_Argonaut_Decode_Decoders.decodeInt
  };
  var decodeJson = function (dict) {
      return dict.decodeJson;
  };
  var decodeArray = function (dictDecodeJson) {
      return {
          decodeJson: Data_Argonaut_Decode_Decoders.decodeArray(decodeJson(dictDecodeJson))
      };
  };
  exports["decodeJson"] = decodeJson;
  exports["decodeJsonInt"] = decodeJsonInt;
  exports["decodeJsonString"] = decodeJsonString;
  exports["decodeJsonJson"] = decodeJsonJson;
  exports["decodeArray"] = decodeArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Argonaut.Encode.Encoders"] = $PS["Data.Argonaut.Encode.Encoders"] || {};
  var exports = $PS["Data.Argonaut.Encode.Encoders"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Function = $PS["Data.Function"];
  var Data_Int = $PS["Data.Int"];   
  var encodeUnit = Data_Function["const"](Data_Argonaut_Core.jsonNull);
  var encodeString = Data_Argonaut_Core.fromString;
  var encodeNumber = Data_Argonaut_Core.fromNumber;
  var encodeInt = function ($48) {
      return Data_Argonaut_Core.fromNumber(Data_Int.toNumber($48));
  };
  var encodeBoolean = Data_Argonaut_Core.fromBoolean;
  exports["encodeUnit"] = encodeUnit;
  exports["encodeBoolean"] = encodeBoolean;
  exports["encodeNumber"] = encodeNumber;
  exports["encodeInt"] = encodeInt;
  exports["encodeString"] = encodeString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Argonaut.Encode.Class"] = $PS["Data.Argonaut.Encode.Class"] || {};
  var exports = $PS["Data.Argonaut.Encode.Class"];
  var Data_Argonaut_Encode_Encoders = $PS["Data.Argonaut.Encode.Encoders"];
  var encodeJsonJString = {
      encodeJson: Data_Argonaut_Encode_Encoders.encodeString
  };
  var encodeJsonJNumber = {
      encodeJson: Data_Argonaut_Encode_Encoders.encodeNumber
  };
  var encodeJsonInt = {
      encodeJson: Data_Argonaut_Encode_Encoders.encodeInt
  };
  var encodeJson = function (dict) {
      return dict.encodeJson;
  };
  exports["encodeJson"] = encodeJson;
  exports["encodeJsonJNumber"] = encodeJsonJNumber;
  exports["encodeJsonInt"] = encodeJsonInt;
  exports["encodeJsonJString"] = encodeJsonJString;
})(PS);
(function(exports) {
  "use strict";

  exports._jsonParser = function (fail, succ, s) {
    try {
      return succ(JSON.parse(s));
    }
    catch (e) {
      return fail(e.message);
    }
  };
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Argonaut.Parser"] = $PS["Data.Argonaut.Parser"] || {};
  var exports = $PS["Data.Argonaut.Parser"];
  var $foreign = $PS["Data.Argonaut.Parser"];
  var Data_Either = $PS["Data.Either"];                
  var jsonParser = function (j) {
      return $foreign["_jsonParser"](Data_Either.Left.create, Data_Either.Right.create, j);
  };
  exports["jsonParser"] = jsonParser;
})(PS);
(function(exports) {
  
  var bigInt =require("big-integer"); 

  exports.fromBaseImpl = function(just) {
    return function(nothing) {
      return function(b) {
        return function(s) {
          try {
            var x = bigInt(s, b);
            return just(x);
          } catch (err) {
            return nothing;
          }
        };
      };
    };
  };

  function truncate(n) {
    if (n > 0) return Math.floor(n);
    return Math.ceil(n);
  }

  exports.fromNumberImpl = function(just) {
    return function(nothing) {
        return function(n) {
          try {
            var x = bigInt(truncate(n));
            return just(x);
          } catch (err) {
            return nothing;
          }
        };
    };
  };

  exports.fromInt = function(n) {
    return bigInt(n);
  };

  exports.toBase = function(base) {
    return function (x) {
      return x.toString(base);
    };
  };

  exports.toNumber = function(x) {
    return x.toJSNumber();
  };

  exports.biAdd = function(x) {
    return function(y) {
      return x.add(y);
    };
  };

  exports.biMul = function(x) {
    return function(y) {
      return x.multiply(y);
    };
  };

  exports.biSub = function(x) {
    return function(y) {
      return x.minus(y);
    };
  };

  exports.biMod = function(x) {
    return function(y) {
      return x.mod(y);
    };
  };

  exports.biDiv = function(x) {
    return function(y) {
      return x.divide(y);
    };
  };

  exports.biEquals = function(x) {
    return function(y) {
      return x.equals(y);
    };
  };

  exports.biCompare = function(x) {
    return function(y) {
      return x.compare(y);
    };
  };

  exports.abs = function(x) {
    return x.abs();
  };
})(PS["Data.BigInt"] = PS["Data.BigInt"] || {});
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var commutativeRingInt = {
      Ring0: function () {
          return Data_Ring.ringInt;
      }
  };
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Semiring = $PS["Data.Semiring"];                
  var mod = function (dict) {
      return dict.mod;
  };
  var gcd = function ($copy_dictEq) {
      return function ($copy_dictEuclideanRing) {
          return function ($copy_a) {
              return function ($copy_b) {
                  var $tco_var_dictEq = $copy_dictEq;
                  var $tco_var_dictEuclideanRing = $copy_dictEuclideanRing;
                  var $tco_var_a = $copy_a;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(dictEq, dictEuclideanRing, a, b) {
                      var $8 = Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
                      if ($8) {
                          $tco_done = true;
                          return a;
                      };
                      $tco_var_dictEq = dictEq;
                      $tco_var_dictEuclideanRing = dictEuclideanRing;
                      $tco_var_a = b;
                      $copy_b = mod(dictEuclideanRing)(a)(b);
                      return;
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_dictEq, $tco_var_dictEuclideanRing, $tco_var_a, $copy_b);
                  };
                  return $tco_result;
              };
          };
      };
  };
  var euclideanRingInt = {
      degree: $foreign.intDegree,
      div: $foreign.intDiv,
      mod: $foreign.intMod,
      CommutativeRing0: function () {
          return Data_CommutativeRing.commutativeRingInt;
      }
  };
  var div = function (dict) {
      return dict.div;
  };
  exports["div"] = div;
  exports["mod"] = mod;
  exports["gcd"] = gcd;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.BigInt"] = $PS["Data.BigInt"] || {};
  var exports = $PS["Data.BigInt"];
  var $foreign = $PS["Data.BigInt"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];                                                
  var toString = $foreign.toBase(10);     
  var showBigInt = {
      show: function (x) {
          return "fromString \"" + (toString(x) + "\"");
      }
  };
  var semiringBigInt = {
      add: $foreign.biAdd,
      zero: $foreign.fromInt(0),
      mul: $foreign.biMul,
      one: $foreign.fromInt(1)
  };
  var ringBigInt = {
      sub: $foreign.biSub,
      Semiring0: function () {
          return semiringBigInt;
      }
  };                       
  var quot = $foreign.biDiv;
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromBase = $foreign.fromBaseImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromBase(10);
  var eqBigInt = {
      eq: $foreign.biEquals
  };
  var ordBigInt = {
      compare: function (x) {
          return function (y) {
              var v = $foreign.biCompare(x)(y);
              if (v === 1) {
                  return Data_Ordering.GT.value;
              };
              if (v === 0) {
                  return Data_Ordering.EQ.value;
              };
              return Data_Ordering.LT.value;
          };
      },
      Eq0: function () {
          return eqBigInt;
      }
  };
  var commutativeRingBigInt = {
      Ring0: function () {
          return ringBigInt;
      }
  };
  var euclideanRingBigInt = {
      div: function (x) {
          return function (y) {
              return $foreign.biDiv(Data_Ring.sub(ringBigInt)(x)(Data_EuclideanRing.mod(euclideanRingBigInt)(x)(y)))(y);
          };
      },
      mod: function (x) {
          return function (y) {
              var yy = $foreign.abs(y);
              return $foreign.biMod(Data_Semiring.add(semiringBigInt)($foreign.biMod(x)(yy))(yy))(yy);
          };
      },
      degree: function ($4) {
          return Data_Int.floor($foreign.toNumber($foreign.abs($4)));
      },
      CommutativeRing0: function () {
          return commutativeRingBigInt;
      }
  };
  exports["fromString"] = fromString;
  exports["fromNumber"] = fromNumber;
  exports["toString"] = toString;
  exports["quot"] = quot;
  exports["eqBigInt"] = eqBigInt;
  exports["ordBigInt"] = ordBigInt;
  exports["showBigInt"] = showBigInt;
  exports["semiringBigInt"] = semiringBigInt;
  exports["ringBigInt"] = ringBigInt;
  exports["euclideanRingBigInt"] = euclideanRingBigInt;
  exports["fromInt"] = $foreign.fromInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];              
  var Identity = function (x) {
      return x;
  };
  var functorIdentity = {
      map: function (f) {
          return function (m) {
              return f(m);
          };
      }
  };
  var applyIdentity = {
      apply: function (v) {
          return function (v1) {
              return v(v1);
          };
      },
      Functor0: function () {
          return functorIdentity;
      }
  };
  var bindIdentity = {
      bind: function (v) {
          return function (f) {
              return f(v);
          };
      },
      Apply0: function () {
          return applyIdentity;
      }
  };
  var applicativeIdentity = {
      pure: Identity,
      Apply0: function () {
          return applyIdentity;
      }
  };
  var monadIdentity = {
      Applicative0: function () {
          return applicativeIdentity;
      },
      Bind1: function () {
          return bindIdentity;
      }
  };
  exports["functorIdentity"] = functorIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Array.Partial"] = $PS["Data.Array.Partial"] || {};
  var exports = $PS["Data.Array.Partial"];
  var Data_Array = $PS["Data.Array"];                
  var tail = function () {
      return function (xs) {
          return Data_Array.slice(1)(Data_Array.length(xs))(xs);
      };
  };
  var last = function () {
      return function (xs) {
          return xs[Data_Array.length(xs) - 1 | 0];
      };
  };
  var init = function () {
      return function (xs) {
          return Data_Array.slice(0)(Data_Array.length(xs) - 1 | 0)(xs);
      };
  };
  var head = function () {
      return function (xs) {
          return xs[0];
      };
  };
  exports["head"] = head;
  exports["tail"] = tail;
  exports["last"] = last;
  exports["init"] = init;
})(PS);
(function(exports) {
  "use strict";

  exports.defer = function (thunk) {
    var v = null;
    return function() {
      if (thunk === undefined) return v;

      v = thunk();
      thunk = undefined; // eslint-disable-line no-param-reassign
      return v;
    };
  };

  exports.force = function (l) {
    return l();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Lazy"] = $PS["Data.Lazy"] || {};
  var exports = $PS["Data.Lazy"];
  var $foreign = $PS["Data.Lazy"];
  exports["defer"] = $foreign.defer;
  exports["force"] = $foreign.force;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Sequence.Internal"] = $PS["Data.Sequence.Internal"] || {};
  var exports = $PS["Data.Sequence.Internal"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var measuredElem = {
      measure: function (v) {
          return 1;
      }
  };
  var measure = function (dict) {
      return dict.measure;
  };
  var measuredArray = function (dictMonoid) {
      return function (dictMeasured) {
          return {
              measure: function (xs) {
                  return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (i) {
                      return function (a) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(i)(measure(dictMeasured)(a));
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              }
          };
      };
  };
  var measuredLazy = function (dictMonoid) {
      return function (dictMeasured) {
          return {
              measure: function (s) {
                  return measure(dictMeasured)(Data_Lazy.force(s));
              }
          };
      };
  };
  var liftElem = Unsafe_Coerce.unsafeCoerce;
  var lift2Elem = Unsafe_Coerce.unsafeCoerce;
  var getElem = function (v) {
      return v;
  };
  exports["measure"] = measure;
  exports["getElem"] = getElem;
  exports["lift2Elem"] = lift2Elem;
  exports["liftElem"] = liftElem;
  exports["measuredArray"] = measuredArray;
  exports["measuredLazy"] = measuredLazy;
  exports["measuredElem"] = measuredElem;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.FingerTree.Digit"] = $PS["Data.FingerTree.Digit"] || {};
  var exports = $PS["Data.FingerTree.Digit"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_Partial = $PS["Data.Array.Partial"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Sequence_Internal = $PS["Data.Sequence.Internal"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var Digit = function (x) {
      return x;
  };
  var runDigit = function (v) {
      return v;
  };
  var tailDigit = (function () {
      var $6 = Data_Array_Partial.tail();
      return function ($7) {
          return $6(runDigit($7));
      };
  })();
  var overDigit = Unsafe_Coerce.unsafeCoerce;
  var snocDigit = function () {
      return function (dg) {
          return function (x) {
              return overDigit(function (xs) {
                  return Data_Array.snoc(xs)(x);
              })(dg);
          };
      };
  };
  var mkDigitMay = function (xs) {
      var $5 = Data_Ord.between(Data_Ord.ordInt)(1)(4)(Data_Array.length(xs));
      if ($5) {
          return new Data_Maybe.Just(xs);
      };
      return Data_Maybe.Nothing.value;
  };
  var mkDigit3 = function (x) {
      return function (y) {
          return function (z) {
              return [ x, y, z ];
          };
      };
  };
  var mkDigit2 = function (x) {
      return function (y) {
          return [ x, y ];
      };
  };
  var mkDigit1 = function (x) {
      return [ x ];
  };
  var mkDigit = function () {
      return Digit;
  };
  var measuredDigit = function (dictMonoid) {
      return function (dictMeasured) {
          return {
              measure: (function () {
                  var $8 = Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredArray(dictMonoid)(dictMeasured));
                  return function ($9) {
                      return $8(runDigit($9));
                  };
              })()
          };
      };
  };
  var lastDigit = (function () {
      var $10 = Data_Array_Partial.last();
      return function ($11) {
          return $10(runDigit($11));
      };
  })();
  var initDigit = (function () {
      var $12 = Data_Array_Partial.init();
      return function ($13) {
          return $12(runDigit($13));
      };
  })();
  var headDigit = (function () {
      var $14 = Data_Array_Partial.head();
      return function ($15) {
          return $14(runDigit($15));
      };
  })();                                        
  var foldableDigit = Data_Foldable.foldableArray;
  var digitLength = function ($18) {
      return Data_Array.length(runDigit($18));
  };
  var consDigit = function () {
      return function (x) {
          return function (dg) {
              return overDigit(Data_Array.cons(x))(dg);
          };
      };
  };
  exports["mkDigit"] = mkDigit;
  exports["mkDigitMay"] = mkDigitMay;
  exports["mkDigit1"] = mkDigit1;
  exports["mkDigit2"] = mkDigit2;
  exports["mkDigit3"] = mkDigit3;
  exports["runDigit"] = runDigit;
  exports["headDigit"] = headDigit;
  exports["tailDigit"] = tailDigit;
  exports["initDigit"] = initDigit;
  exports["lastDigit"] = lastDigit;
  exports["snocDigit"] = snocDigit;
  exports["consDigit"] = consDigit;
  exports["digitLength"] = digitLength;
  exports["foldableDigit"] = foldableDigit;
  exports["measuredDigit"] = measuredDigit;
})(PS);
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function () {
      return $foreign["_crashWith"];
  };
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.FingerTree"] = $PS["Data.FingerTree"] || {};
  var exports = $PS["Data.FingerTree"];
  var Data_Array = $PS["Data.Array"];
  var Data_FingerTree_Digit = $PS["Data.FingerTree.Digit"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Sequence_Internal = $PS["Data.Sequence.Internal"];
  var Partial = $PS["Partial"];                
  var NilR = (function () {
      function NilR() {

      };
      NilR.value = new NilR();
      return NilR;
  })();
  var SnocR = (function () {
      function SnocR(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SnocR.create = function (value0) {
          return function (value1) {
              return new SnocR(value0, value1);
          };
      };
      return SnocR;
  })();
  var NilL = (function () {
      function NilL() {

      };
      NilL.value = new NilL();
      return NilL;
  })();
  var ConsL = (function () {
      function ConsL(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ConsL.create = function (value0) {
          return function (value1) {
              return new ConsL(value0, value1);
          };
      };
      return ConsL;
  })();
  var Split = (function () {
      function Split(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Split.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Split(value0, value1, value2);
              };
          };
      };
      return Split;
  })();
  var Node2 = (function () {
      function Node2(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Node2.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Node2(value0, value1, value2);
              };
          };
      };
      return Node2;
  })();
  var Node3 = (function () {
      function Node3(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Node3.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Node3(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Node3;
  })();
  var LazySplit = (function () {
      function LazySplit(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      LazySplit.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new LazySplit(value0, value1, value2);
              };
          };
      };
      return LazySplit;
  })();
  var Empty = (function () {
      function Empty() {

      };
      Empty.value = new Empty();
      return Empty;
  })();
  var Single = (function () {
      function Single(value0) {
          this.value0 = value0;
      };
      Single.create = function (value0) {
          return new Single(value0);
      };
      return Single;
  })();
  var Deep = (function () {
      function Deep(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Deep.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Deep(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Deep;
  })();
  var splitDigit = function (dictMonoid) {
      return function (dictMeasured) {
          return function (p) {
              return function (i) {
                  return function (as) {
                      var v = Data_FingerTree_Digit.digitLength(as);
                      if (v === 1) {
                          return new Split([  ], Data_FingerTree_Digit.headDigit(as), [  ]);
                      };
                      var bs$prime = Data_FingerTree_Digit.tailDigit(as);
                      var bs = Data_FingerTree_Digit.mkDigit()(bs$prime);
                      var a = Data_FingerTree_Digit.headDigit(as);
                      var i$prime = Data_Semigroup.append(dictMonoid.Semigroup0())(i)(Data_Sequence_Internal.measure(dictMeasured)(a));
                      var $143 = p(i$prime);
                      if ($143) {
                          return new Split([  ], a, bs$prime);
                      };
                      var v1 = splitDigit(dictMonoid)(dictMeasured)(p)(i$prime)(bs);
                      return new Split(Data_Array.cons(a)(v1.value0), v1.value1, v1.value2);
                  };
              };
          };
      };
  };
  var nodeToDigit = (function () {
      var go = function (v) {
          if (v instanceof Node2) {
              return Data_FingerTree_Digit.mkDigit2(v.value1)(v.value2);
          };
          if (v instanceof Node3) {
              return Data_FingerTree_Digit.mkDigit3(v.value1)(v.value2)(v.value3);
          };
          throw new Error("Failed pattern match at Data.FingerTree (line 88, column 3 - line 88, column 34): " + [ v.constructor.name ]);
      };
      return go;
  })();
  var node3 = function (dictMonoid) {
      return function (dictMeasured) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return new Node3(Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Sequence_Internal.measure(dictMeasured)(a))(Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Sequence_Internal.measure(dictMeasured)(b))(Data_Sequence_Internal.measure(dictMeasured)(c))), a, b, c);
                  };
              };
          };
      };
  };
  var node2 = function (dictMonoid) {
      return function (dictMeasured) {
          return function (a) {
              return function (b) {
                  return new Node2(Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Sequence_Internal.measure(dictMeasured)(a))(Data_Sequence_Internal.measure(dictMeasured)(b)), a, b);
              };
          };
      };
  };
  var nodes = function (dictMonoid) {
      return function (dictMeasured) {
          return function (xs) {
              if (xs.length === 2) {
                  return [ node2(dictMonoid)(dictMeasured)(xs[0])(xs[1]) ];
              };
              if (xs.length === 3) {
                  return [ node3(dictMonoid)(dictMeasured)(xs[0])(xs[1])(xs[2]) ];
              };
              if (xs.length === 4) {
                  return [ node2(dictMonoid)(dictMeasured)(xs[0])(xs[1]), node2(dictMonoid)(dictMeasured)(xs[2])(xs[3]) ];
              };
              var idx = Data_Array.unsafeIndex();
              return Data_Array.cons(node3(dictMonoid)(dictMeasured)(idx(xs)(0))(idx(xs)(1))(idx(xs)(2)))(nodes(dictMonoid)(dictMeasured)(Data_Array.drop(3)(xs)));
          };
      };
  };
  var measuredNode = {
      measure: function (v) {
          if (v instanceof Node2) {
              return v.value0;
          };
          if (v instanceof Node3) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.FingerTree (line 107, column 1 - line 109, column 30): " + [ v.constructor.name ]);
      }
  };
  var measuredFingerTree = function (dictMonoid) {
      return function (dictMeasured) {
          return {
              measure: function (v) {
                  if (v instanceof Empty) {
                      return Data_Monoid.mempty(dictMonoid);
                  };
                  if (v instanceof Single) {
                      return Data_Sequence_Internal.measure(dictMeasured)(v.value0);
                  };
                  if (v instanceof Deep) {
                      return Data_Lazy.force(v.value0);
                  };
                  throw new Error("Failed pattern match at Data.FingerTree (line 228, column 1 - line 232, column 37): " + [ v.constructor.name ]);
              }
          };
      };
  };
  var lazyEmpty = Data_Lazy.defer(function (v) {
      return Empty.value;
  });
  var foldableNode = {
      foldr: function (r) {
          return function (z) {
              return function (v) {
                  if (v instanceof Node2) {
                      return r(v.value1)(r(v.value2)(z));
                  };
                  if (v instanceof Node3) {
                      return r(v.value1)(r(v.value2)(r(v.value3)(z)));
                  };
                  throw new Error("Failed pattern match at Data.FingerTree (line 95, column 1 - line 100, column 56): " + [ r.constructor.name, z.constructor.name, v.constructor.name ]);
              };
          };
      },
      foldl: function (l) {
          return function (z) {
              return function (v) {
                  if (v instanceof Node2) {
                      return l(l(z)(v.value1))(v.value2);
                  };
                  if (v instanceof Node3) {
                      return l(l(l(z)(v.value1))(v.value2))(v.value3);
                  };
                  throw new Error("Failed pattern match at Data.FingerTree (line 95, column 1 - line 100, column 56): " + [ l.constructor.name, z.constructor.name, v.constructor.name ]);
              };
          };
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return Data_Foldable.foldr(foldableNode)(function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      }
  };
  var foldableFingerTree = {
      foldr: function (v) {
          return function (z) {
              return function (v1) {
                  if (v1 instanceof Empty) {
                      return z;
                  };
                  if (v1 instanceof Single) {
                      return v(v1.value0)(z);
                  };
                  if (v1 instanceof Deep) {
                      var flipFoldr$prime = Data_Function.flip(Data_Foldable.foldr(Data_FingerTree_Digit.foldableDigit)(v));
                      var flipFoldr = Data_Function.flip(Data_Foldable.foldr(Data_FingerTree_Digit.foldableDigit)(v));
                      var deepFlipFoldr = Data_Function.flip(Data_Foldable.foldr(foldableFingerTree)(Data_Function.flip(Data_Foldable.foldr(foldableNode)(v))));
                      return flipFoldr$prime(v1.value1)(deepFlipFoldr(Data_Lazy.force(v1.value2))(flipFoldr(v1.value3)(z)));
                  };
                  throw new Error("Failed pattern match at Data.FingerTree (line 188, column 1 - line 212, column 56): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
              };
          };
      },
      foldl: function (v) {
          return function (z) {
              return function (v1) {
                  if (v1 instanceof Empty) {
                      return z;
                  };
                  if (v1 instanceof Single) {
                      return v(z)(v1.value0);
                  };
                  if (v1 instanceof Deep) {
                      var leftFold = Data_Foldable.foldl(Data_FingerTree_Digit.foldableDigit)(v);
                      var deepLeftFold = Data_Foldable.foldl(foldableFingerTree)(Data_Foldable.foldl(foldableNode)(v));
                      return leftFold(deepLeftFold(leftFold(z)(v1.value1))(Data_Lazy.force(v1.value2)))(v1.value3);
                  };
                  throw new Error("Failed pattern match at Data.FingerTree (line 188, column 1 - line 212, column 56): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
              };
          };
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return Data_Foldable.foldr(foldableFingerTree)(function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      }
  };
  var deep = function (dictMonoid) {
      return function (dictMeasured) {
          return function (pr) {
              return function (m) {
                  return function (sf) {
                      return new Deep(Data_Lazy.defer(function (v) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Sequence_Internal.measure(Data_FingerTree_Digit.measuredDigit(dictMonoid)(dictMeasured))(pr))(Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredLazy(dictMonoid)(measuredFingerTree(dictMonoid)(measuredNode)))(m))(Data_Sequence_Internal.measure(Data_FingerTree_Digit.measuredDigit(dictMonoid)(dictMeasured))(sf)));
                      }), pr, m, sf);
                  };
              };
          };
      };
  };
  var snoc = function (dictMonoid) {
      return function (dictMeasured) {
          return function (v) {
              return function (a) {
                  if (v instanceof Empty) {
                      return new Single(a);
                  };
                  if (v instanceof Single) {
                      return deep(dictMonoid)(dictMeasured)(Data_FingerTree_Digit.mkDigit1(v.value0))(lazyEmpty)(Data_FingerTree_Digit.mkDigit1(a));
                  };
                  if (v instanceof Deep) {
                      var v1 = Data_FingerTree_Digit.runDigit(v.value3);
                      if (v1.length === 4) {
                          var forcedM = Data_Lazy.force(v.value2);
                          return deep(dictMonoid)(dictMeasured)(v.value1)(Data_Lazy.defer(function (v2) {
                              return snoc(dictMonoid)(measuredNode)(forcedM)(node3(dictMonoid)(dictMeasured)(v1[0])(v1[1])(v1[2]));
                          }))(Data_FingerTree_Digit.mkDigit2(v1[3])(a));
                      };
                      return deep(dictMonoid)(dictMeasured)(v.value1)(v.value2)(Data_FingerTree_Digit.snocDigit()(v.value3)(a));
                  };
                  throw new Error("Failed pattern match at Data.FingerTree (line 262, column 1 - line 263, column 40): " + [ v.constructor.name, a.constructor.name ]);
              };
          };
      };
  };
  var snocAll = function (dictMonoid) {
      return function (dictMeasured) {
          return function (dictFoldable) {
              return Data_Foldable.foldl(dictFoldable)(snoc(dictMonoid)(dictMeasured));
          };
      };
  };
  var toFingerTree = function (dictMonoid) {
      return function (dictMeasured) {
          return function (dictFoldable) {
              return function (s) {
                  return snocAll(dictMonoid)(dictMeasured)(dictFoldable)(Empty.value)(s);
              };
          };
      };
  };
  var viewL = function (dictMonoid) {
      return function (dictMeasured) {
          return function (v) {
              if (v instanceof Empty) {
                  return NilL.value;
              };
              if (v instanceof Single) {
                  return new ConsL(v.value0, lazyEmpty);
              };
              if (v instanceof Deep) {
                  return new ConsL(Data_FingerTree_Digit.headDigit(v.value1), Data_Lazy.defer(function (v1) {
                      return deepL(dictMonoid)(dictMeasured)(Data_FingerTree_Digit.tailDigit(v.value1))(v.value2)(v.value3);
                  }));
              };
              throw new Error("Failed pattern match at Data.FingerTree (line 294, column 1 - line 295, column 50): " + [ v.constructor.name ]);
          };
      };
  };
  var deepL = function (dictMonoid) {
      return function (dictMeasured) {
          return function (pr$prime) {
              return function (m) {
                  return function (sf) {
                      var v = Data_FingerTree_Digit.mkDigitMay(pr$prime);
                      if (v instanceof Data_Maybe.Just) {
                          return deep(dictMonoid)(dictMeasured)(v.value0)(m)(sf);
                      };
                      if (v instanceof Data_Maybe.Nothing) {
                          var v1 = viewL(dictMonoid)(measuredNode)(Data_Lazy.force(m));
                          if (v1 instanceof NilL) {
                              return toFingerTree(dictMonoid)(dictMeasured)(Data_FingerTree_Digit.foldableDigit)(sf);
                          };
                          if (v1 instanceof ConsL) {
                              return deep(dictMonoid)(dictMeasured)(nodeToDigit(v1.value0))(v1.value1)(sf);
                          };
                          throw new Error("Failed pattern match at Data.FingerTree (line 321, column 7 - line 323, column 49): " + [ v1.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.FingerTree (line 317, column 3 - line 323, column 49): " + [ v.constructor.name ]);
                  };
              };
          };
      };
  };
  var viewR = function (dictMonoid) {
      return function (dictMeasured) {
          return function (v) {
              if (v instanceof Empty) {
                  return NilR.value;
              };
              if (v instanceof Single) {
                  return new SnocR(lazyEmpty, v.value0);
              };
              if (v instanceof Deep) {
                  return new SnocR(Data_Lazy.defer(function (v1) {
                      return deepR(dictMonoid)(dictMeasured)(v.value1)(v.value2)(Data_FingerTree_Digit.initDigit(v.value3));
                  }), Data_FingerTree_Digit.lastDigit(v.value3));
              };
              throw new Error("Failed pattern match at Data.FingerTree (line 343, column 1 - line 344, column 50): " + [ v.constructor.name ]);
          };
      };
  };
  var deepR = function (dictMonoid) {
      return function (dictMeasured) {
          return function (pr) {
              return function (m) {
                  return function (sf$prime) {
                      var v = Data_FingerTree_Digit.mkDigitMay(sf$prime);
                      if (v instanceof Data_Maybe.Just) {
                          return deep(dictMonoid)(dictMeasured)(pr)(m)(v.value0);
                      };
                      if (v instanceof Data_Maybe.Nothing) {
                          var v1 = viewR(dictMonoid)(measuredNode)(Data_Lazy.force(m));
                          if (v1 instanceof NilR) {
                              return toFingerTree(dictMonoid)(dictMeasured)(Data_FingerTree_Digit.foldableDigit)(pr);
                          };
                          if (v1 instanceof SnocR) {
                              return deep(dictMonoid)(dictMeasured)(pr)(v1.value0)(nodeToDigit(v1.value1));
                          };
                          throw new Error("Failed pattern match at Data.FingerTree (line 357, column 7 - line 359, column 49): " + [ v1.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.FingerTree (line 353, column 3 - line 359, column 49): " + [ v.constructor.name ]);
                  };
              };
          };
      };
  };
  var splitTree = function (dictMonoid) {
      return function (dictMeasured) {
          return function () {
              return function (v) {
                  return function (v1) {
                      return function (v2) {
                          if (v2 instanceof Single) {
                              return new LazySplit(lazyEmpty, v2.value0, lazyEmpty);
                          };
                          if (v2 instanceof Empty) {
                              return Partial.crashWith()("Data.FingerTree.splitTree: Empty");
                          };
                          if (v2 instanceof Deep) {
                              var vpr = Data_Semigroup.append(dictMonoid.Semigroup0())(v1)(Data_Sequence_Internal.measure(Data_FingerTree_Digit.measuredDigit(dictMonoid)(dictMeasured))(v2.value1));
                              var $344 = v(vpr);
                              if ($344) {
                                  var v3 = splitDigit(dictMonoid)(dictMeasured)(v)(v1)(v2.value1);
                                  return new LazySplit(Data_Lazy.defer(function (v4) {
                                      return toFingerTree(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(v3.value0);
                                  }), v3.value1, Data_Lazy.defer(function (v4) {
                                      return deepL(dictMonoid)(dictMeasured)(v3.value2)(v2.value2)(v2.value3);
                                  }));
                              };
                              var vm = Data_Semigroup.append(dictMonoid.Semigroup0())(vpr)(Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredLazy(dictMonoid)(measuredFingerTree(dictMonoid)(measuredNode)))(v2.value2));
                              var $349 = v(vm);
                              if ($349) {
                                  var v3 = splitTree(dictMonoid)(measuredNode)()(v)(vpr)(Data_Lazy.force(v2.value2));
                                  var v4 = splitDigit(dictMonoid)(dictMeasured)(v)(Data_Semigroup.append(dictMonoid.Semigroup0())(vpr)(Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredLazy(dictMonoid)(measuredFingerTree(dictMonoid)(measuredNode)))(v3.value0)))(nodeToDigit(v3.value1));
                                  return new LazySplit(Data_Lazy.defer(function (v5) {
                                      return deepR(dictMonoid)(dictMeasured)(v2.value1)(v3.value0)(v4.value0);
                                  }), v4.value1, Data_Lazy.defer(function (v5) {
                                      return deepL(dictMonoid)(dictMeasured)(v4.value2)(v3.value2)(v2.value3);
                                  }));
                              };
                              var v3 = splitDigit(dictMonoid)(dictMeasured)(v)(vm)(v2.value3);
                              return new LazySplit(Data_Lazy.defer(function (v4) {
                                  return deepR(dictMonoid)(dictMeasured)(v2.value1)(v2.value2)(v3.value0);
                              }), v3.value1, Data_Lazy.defer(function (v4) {
                                  return toFingerTree(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(v3.value2);
                              }));
                          };
                          throw new Error("Failed pattern match at Data.FingerTree (line 428, column 1 - line 429, column 70): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
                      };
                  };
              };
          };
      };
  };
  var cons = function (dictMonoid) {
      return function (dictMeasured) {
          return function (a) {
              return function (v) {
                  if (v instanceof Empty) {
                      return new Single(a);
                  };
                  if (v instanceof Single) {
                      return deep(dictMonoid)(dictMeasured)(Data_FingerTree_Digit.mkDigit1(a))(lazyEmpty)(Data_FingerTree_Digit.mkDigit1(v.value0));
                  };
                  if (v instanceof Deep) {
                      var v1 = Data_FingerTree_Digit.runDigit(v.value1);
                      if (v1.length === 4) {
                          var forcedM = Data_Lazy.force(v.value2);
                          return deep(dictMonoid)(dictMeasured)(Data_FingerTree_Digit.mkDigit2(a)(v1[0]))(Data_Lazy.defer(function (v2) {
                              return cons(dictMonoid)(measuredNode)(node3(dictMonoid)(dictMeasured)(v1[1])(v1[2])(v1[3]))(forcedM);
                          }))(v.value3);
                      };
                      var pr$prime = Data_FingerTree_Digit.consDigit()(a)(v.value1);
                      return deep(dictMonoid)(dictMeasured)(pr$prime)(v.value2)(v.value3);
                  };
                  throw new Error("Failed pattern match at Data.FingerTree (line 234, column 1 - line 235, column 40): " + [ a.constructor.name, v.constructor.name ]);
              };
          };
      };
  };
  var consAll = function (dictMonoid) {
      return function (dictMeasured) {
          return function (dictFoldable) {
              return Data_Function.flip(Data_Foldable.foldr(dictFoldable)(cons(dictMonoid)(dictMeasured)));
          };
      };
  };
  var app3 = function (dictMonoid) {
      return function (dictMeasured) {
          return function (v) {
              return function (ts) {
                  return function (v1) {
                      if (v instanceof Empty) {
                          return consAll(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(ts)(v1);
                      };
                      if (v1 instanceof Empty) {
                          return snocAll(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(v)(ts);
                      };
                      if (v instanceof Single) {
                          return cons(dictMonoid)(dictMeasured)(v.value0)(consAll(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(ts)(v1));
                      };
                      if (v1 instanceof Single) {
                          return snoc(dictMonoid)(dictMeasured)(snocAll(dictMonoid)(dictMeasured)(Data_Foldable.foldableArray)(v)(ts))(v1.value0);
                      };
                      if (v instanceof Deep && v1 instanceof Deep) {
                          var computeM$prime = function (v2) {
                              return app3(dictMonoid)(measuredNode)(Data_Lazy.force(v.value2))(nodes(dictMonoid)(dictMeasured)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_FingerTree_Digit.runDigit(v.value3))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(ts)(Data_FingerTree_Digit.runDigit(v1.value1)))))(Data_Lazy.force(v1.value2));
                          };
                          return deep(dictMonoid)(dictMeasured)(v.value1)(Data_Lazy.defer(computeM$prime))(v1.value3);
                      };
                      throw new Error("Failed pattern match at Data.FingerTree (line 372, column 1 - line 373, column 70): " + [ v.constructor.name, ts.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
  };
  var append = function (dictMonoid) {
      return function (dictMeasured) {
          return function (xs) {
              return function (ys) {
                  return app3(dictMonoid)(dictMeasured)(xs)([  ])(ys);
              };
          };
      };
  };
  exports["Empty"] = Empty;
  exports["cons"] = cons;
  exports["snoc"] = snoc;
  exports["append"] = append;
  exports["splitTree"] = splitTree;
  exports["foldableFingerTree"] = foldableFingerTree;
  exports["measuredFingerTree"] = measuredFingerTree;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Monoid.Additive"] = $PS["Data.Monoid.Additive"] || {};
  var exports = $PS["Data.Monoid.Additive"];
  var Data_Semiring = $PS["Data.Semiring"];        
  var Additive = function (x) {
      return x;
  };
  var semigroupAdditive = function (dictSemiring) {
      return {
          append: function (v) {
              return function (v1) {
                  return Data_Semiring.add(dictSemiring)(v)(v1);
              };
          }
      };
  };
  var monoidAdditive = function (dictSemiring) {
      return {
          mempty: Data_Semiring.zero(dictSemiring),
          Semigroup0: function () {
              return semigroupAdditive(dictSemiring);
          }
      };
  };
  exports["Additive"] = Additive;
  exports["monoidAdditive"] = monoidAdditive;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Sequence"] = $PS["Data.Sequence"] || {};
  var exports = $PS["Data.Sequence"];
  var Data_FingerTree = $PS["Data.FingerTree"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid_Additive = $PS["Data.Monoid.Additive"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Sequence_Internal = $PS["Data.Sequence.Internal"];
  var unsafeIndex = function () {
      return function (i) {
          return function (v) {
              var v1 = Data_FingerTree.splitTree(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)()(function (n) {
                  return i < Data_Newtype.unwrap()(n);
              })(0)(v);
              return Data_Sequence_Internal.getElem(v1.value1);
          };
      };
  };
  var snoc = function (v) {
      return function (x) {
          return Data_FingerTree.snoc(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(v)(x);
      };
  };
  var length = function (v) {
      return Data_Newtype.un()(Data_Monoid_Additive.Additive)(Data_Sequence_Internal.measure(Data_FingerTree.measuredFingerTree(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem))(v));
  };
  var inBounds = function (i) {
      return function (seq) {
          return 0 <= i && i < length(seq);
      };
  };
  var index = function (i) {
      return function (xs) {
          var $80 = inBounds(i)(xs);
          if ($80) {
              return new Data_Maybe.Just(unsafeIndex()(i)(xs));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var foldableSeq = {
      foldr: function (f) {
          return function (z) {
              return function (v) {
                  return Data_Foldable.foldr(Data_FingerTree.foldableFingerTree)(Data_Sequence_Internal.liftElem(f))(z)(v);
              };
          };
      },
      foldl: function (f) {
          return function (z) {
              return function (v) {
                  return Data_Foldable.foldl(Data_FingerTree.foldableFingerTree)(Data_Sequence_Internal.lift2Elem(f))(z)(v);
              };
          };
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return Data_Foldable.foldMap(Data_FingerTree.foldableFingerTree)(dictMonoid)(Data_Sequence_Internal.liftElem(f))(v);
              };
          };
      }
  };
  var empty = Data_FingerTree.Empty.value;
  var cons = function (x) {
      return function (v) {
          return Data_FingerTree.cons(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(x)(v);
      };
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(cons)(empty);
  };
  var singleton = function (x) {
      return cons(x)(empty);
  };
  var append = function (v) {
      return function (v1) {
          return Data_FingerTree.append(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringInt))(Data_Sequence_Internal.measuredElem)(v)(v1);
      };
  };
  var semigroupSeq = {
      append: append
  };
  var monoidSeq = {
      mempty: empty,
      Semigroup0: function () {
          return semigroupSeq;
      }
  };
  exports["empty"] = empty;
  exports["singleton"] = singleton;
  exports["cons"] = cons;
  exports["snoc"] = snoc;
  exports["fromFoldable"] = fromFoldable;
  exports["length"] = length;
  exports["index"] = index;
  exports["monoidSeq"] = monoidSeq;
  exports["foldableSeq"] = foldableSeq;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeUnionFn = function(r1, r2) {
    var copy = {};
    for (var k1 in r2) {
      if ({}.hasOwnProperty.call(r2, k1)) {
        copy[k1] = r2[k1];
      }
    }
    for (var k2 in r1) {
      if ({}.hasOwnProperty.call(r1, k2)) {
        copy[k2] = r1[k2];
      }
    }
    return copy;
  };
})(PS["Record.Unsafe.Union"] = PS["Record.Unsafe.Union"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Record.Unsafe.Union"] = $PS["Record.Unsafe.Union"] || {};
  var exports = $PS["Record.Unsafe.Union"];
  var $foreign = $PS["Record.Unsafe.Union"];
  exports["unsafeUnionFn"] = $foreign.unsafeUnionFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Record"] = $PS["Record"] || {};
  var exports = $PS["Record"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Record_Unsafe_Union = $PS["Record.Unsafe.Union"];
  var set = function (dictIsSymbol) {
      return function () {
          return function () {
              return function (l) {
                  return function (b) {
                      return function (r) {
                          return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(b)(r);
                      };
                  };
              };
          };
      };
  };
  var merge = function () {
      return function () {
          return function (l) {
              return function (r) {
                  return Record_Unsafe_Union.unsafeUnionFn(l, r);
              };
          };
      };
  };
  var insert = function (dictIsSymbol) {
      return function () {
          return function () {
              return function (l) {
                  return function (a) {
                      return function (r) {
                          return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r);
                      };
                  };
              };
          };
      };
  };
  var get = function (dictIsSymbol) {
      return function () {
          return function (l) {
              return function (r) {
                  return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
              };
          };
      };
  };
  exports["get"] = get;
  exports["set"] = set;
  exports["insert"] = insert;
  exports["merge"] = merge;
})(PS);
(function(exports) {
  "use strict";

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.Reader.Class"] = $PS["Control.Monad.Reader.Class"] || {};
  var exports = $PS["Control.Monad.Reader.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var ask = function (dict) {
      return dict.ask;
  };
  var asks = function (dictMonadAsk) {
      return function (f) {
          return Data_Functor.map((((dictMonadAsk.Monad0()).Bind1()).Apply0()).Functor0())(f)(ask(dictMonadAsk));
      };
  };
  exports["ask"] = ask;
  exports["asks"] = asks;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Effect_Class = $PS["Effect.Class"];                
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  };
  var monadTransExceptT = {
      lift: function (dictMonad) {
          return function (m) {
              return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(a));
              });
          };
      }
  };
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return {
          map: function (f) {
              return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
          }
      };
  };
  var except = function (dictApplicative) {
      var $89 = Control_Applicative.pure(dictApplicative);
      return function ($90) {
          return ExceptT($89($90));
      };
  };
  var monadExceptT = function (dictMonad) {
      return {
          Applicative0: function () {
              return applicativeExceptT(dictMonad);
          },
          Bind1: function () {
              return bindExceptT(dictMonad);
          }
      };
  };
  var bindExceptT = function (dictMonad) {
      return {
          bind: function (v) {
              return function (k) {
                  return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                      var $91 = Control_Applicative.pure(dictMonad.Applicative0());
                      return function ($92) {
                          return $91(Data_Either.Left.create($92));
                      };
                  })())(function (a) {
                      var v1 = k(a);
                      return v1;
                  }));
              };
          },
          Apply0: function () {
              return applyExceptT(dictMonad);
          }
      };
  };
  var applyExceptT = function (dictMonad) {
      return {
          apply: Control_Monad.ap(monadExceptT(dictMonad)),
          Functor0: function () {
              return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
          }
      };
  };
  var applicativeExceptT = function (dictMonad) {
      return {
          pure: (function () {
              var $93 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($94) {
                  return ExceptT($93(Data_Either.Right.create($94)));
              };
          })(),
          Apply0: function () {
              return applyExceptT(dictMonad);
          }
      };
  };
  var monadAskExceptT = function (dictMonadAsk) {
      return {
          ask: Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)),
          Monad0: function () {
              return monadExceptT(dictMonadAsk.Monad0());
          }
      };
  };
  var monadEffectExceptT = function (dictMonadEffect) {
      return {
          liftEffect: (function () {
              var $95 = Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadEffect.Monad0());
              var $96 = Effect_Class.liftEffect(dictMonadEffect);
              return function ($97) {
                  return $95($96($97));
              };
          })(),
          Monad0: function () {
              return monadExceptT(dictMonadEffect.Monad0());
          }
      };
  };
  var monadStateExceptT = function (dictMonadState) {
      return {
          state: function (f) {
              return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
          },
          Monad0: function () {
              return monadExceptT(dictMonadState.Monad0());
          }
      };
  };
  var monadThrowExceptT = function (dictMonad) {
      return {
          throwError: (function () {
              var $103 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($104) {
                  return ExceptT($103(Data_Either.Left.create($104)));
              };
          })(),
          Monad0: function () {
              return monadExceptT(dictMonad);
          }
      };
  };
  var monadErrorExceptT = function (dictMonad) {
      return {
          catchError: function (v) {
              return function (k) {
                  return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function (a) {
                      var v1 = k(a);
                      return v1;
                  })((function () {
                      var $105 = Control_Applicative.pure(dictMonad.Applicative0());
                      return function ($106) {
                          return $105(Data_Either.Right.create($106));
                      };
                  })()));
              };
          },
          MonadThrow0: function () {
              return monadThrowExceptT(dictMonad);
          }
      };
  };
  var altExceptT = function (dictSemigroup) {
      return function (dictMonad) {
          return {
              alt: function (v) {
                  return function (v1) {
                      return Control_Bind.bind(dictMonad.Bind1())(v)(function (rm) {
                          if (rm instanceof Data_Either.Right) {
                              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rm.value0));
                          };
                          if (rm instanceof Data_Either.Left) {
                              return Control_Bind.bind(dictMonad.Bind1())(v1)(function (rn) {
                                  if (rn instanceof Data_Either.Right) {
                                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rn.value0));
                                  };
                                  if (rn instanceof Data_Either.Left) {
                                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(rm.value0)(rn.value0)));
                                  };
                                  throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 87, column 9 - line 89, column 49): " + [ rn.constructor.name ]);
                              });
                          };
                          throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 83, column 5 - line 89, column 49): " + [ rm.constructor.name ]);
                      });
                  };
              },
              Functor0: function () {
                  return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
              }
          };
      };
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["except"] = except;
  exports["functorExceptT"] = functorExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["altExceptT"] = altExceptT;
  exports["monadTransExceptT"] = monadTransExceptT;
  exports["monadEffectExceptT"] = monadEffectExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
  exports["monadErrorExceptT"] = monadErrorExceptT;
  exports["monadAskExceptT"] = monadAskExceptT;
  exports["monadStateExceptT"] = monadStateExceptT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];
  var empty = function (dict) {
      return dict.empty;
  };
  exports["empty"] = empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];                  
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var functorNonEmpty = function (dictFunctor) {
      return {
          map: function (f) {
              return function (m) {
                  return new NonEmpty(f(m.value0), Data_Functor.map(dictFunctor)(f)(m.value1));
              };
          }
      };
  };
  var foldableNonEmpty = function (dictFoldable) {
      return {
          foldMap: function (dictMonoid) {
              return function (f) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
                  };
              };
          },
          foldl: function (f) {
              return function (b) {
                  return function (v) {
                      return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
                  };
              };
          },
          foldr: function (f) {
              return function (b) {
                  return function (v) {
                      return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
                  };
              };
          }
      };
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["functorNonEmpty"] = functorNonEmpty;
  exports["foldableNonEmpty"] = foldableNonEmpty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Traversable = $PS["Data.Traversable"];    
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var toList = function (v) {
      return new Cons(v.value0, v.value1);
  };
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done1 = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done1 = true;
                              return acc;
                          };
                          while (!$tco_done1) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = {
      map: listMap
  };
  var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
  var foldableList = {
      foldr: function (f) {
          return function (b) {
              var rev = (function () {
                  var go = function ($copy_acc) {
                      return function ($copy_v) {
                          var $tco_var_acc = $copy_acc;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(acc, v) {
                              if (v instanceof Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v instanceof Cons) {
                                  $tco_var_acc = new Cons(v.value0, acc);
                                  $copy_v = v.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [ acc.constructor.name, v.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_acc, $copy_v);
                          };
                          return $tco_result;
                      };
                  };
                  return go(Nil.value);
              })();
              var $205 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
              return function ($206) {
                  return $205(rev($206));
              };
          };
      },
      foldl: function (f) {
          var go = function ($copy_b) {
              return function ($copy_v) {
                  var $tco_var_b = $copy_b;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(b, v) {
                      if (v instanceof Nil) {
                          $tco_done1 = true;
                          return b;
                      };
                      if (v instanceof Cons) {
                          $tco_var_b = f(b)(v.value0);
                          $copy_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_b, $copy_v);
                  };
                  return $tco_result;
              };
          };
          return go;
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return Data_Foldable.foldl(foldableList)(function (acc) {
                  var $207 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
                  return function ($208) {
                      return $207(f($208));
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      }
  };
  var foldableNonEmptyList = Data_NonEmpty.foldableNonEmpty(foldableList);
  var semigroupList = {
      append: function (xs) {
          return function (ys) {
              return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
          };
      }
  };
  var semigroupNonEmptyList = {
      append: function (v) {
          return function (as$prime) {
              return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(toList(as$prime)));
          };
      }
  };
  var traversableList = {
      traverse: function (dictApplicative) {
          return function (f) {
              var $222 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value));
              var $223 = Data_Foldable.foldl(foldableList)(function (acc) {
                  var $225 = Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc);
                  return function ($226) {
                      return $225(f($226));
                  };
              })(Control_Applicative.pure(dictApplicative)(Nil.value));
              return function ($224) {
                  return $222($223($224));
              };
          };
      },
      sequence: function (dictApplicative) {
          return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      },
      Functor0: function () {
          return functorList;
      },
      Foldable1: function () {
          return foldableList;
      }
  };
  var unfoldable1List = {
      unfoldr1: function (f) {
          return function (b) {
              var go = function ($copy_source) {
                  return function ($copy_memo) {
                      var $tco_var_source = $copy_source;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(source, memo) {
                          var v = f(source);
                          if (v.value1 instanceof Data_Maybe.Just) {
                              $tco_var_source = v.value1.value0;
                              $copy_memo = new Cons(v.value0, memo);
                              return;
                          };
                          if (v.value1 instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 136, column 22 - line 138, column 61): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_source, $copy_memo);
                      };
                      return $tco_result;
                  };
              };
              return go(b)(Nil.value);
          };
      }
  };
  var unfoldableList = {
      unfoldr: function (f) {
          return function (b) {
              var go = function ($copy_source) {
                  return function ($copy_memo) {
                      var $tco_var_source = $copy_source;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(source, memo) {
                          var v = f(source);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_source = v.value0.value1;
                              $copy_memo = new Cons(v.value0.value0, memo);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 143, column 22 - line 145, column 52): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_source, $copy_memo);
                      };
                      return $tco_result;
                  };
              };
              return go(b)(Nil.value);
          };
      },
      Unfoldable10: function () {
          return unfoldable1List;
      }
  };
  var applyList = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
              };
              throw new Error("Failed pattern match at Data.List.Types (line 158, column 1 - line 160, column 48): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorList;
      }
  };
  var applyNonEmptyList = {
      apply: function (v) {
          return function (v1) {
              return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
          };
      },
      Functor0: function () {
          return functorNonEmptyList;
      }
  };
  var bindList = {
      bind: function (v) {
          return function (v1) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return Data_Semigroup.append(semigroupList)(v1(v.value0))(Control_Bind.bind(bindList)(v.value1)(v1));
              };
              throw new Error("Failed pattern match at Data.List.Types (line 165, column 1 - line 167, column 37): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Apply0: function () {
          return applyList;
      }
  };
  var applicativeList = {
      pure: function (a) {
          return new Cons(a, Nil.value);
      },
      Apply0: function () {
          return applyList;
      }
  };
  var altList = {
      alt: Data_Semigroup.append(semigroupList),
      Functor0: function () {
          return functorList;
      }
  };
  var plusList = {
      empty: Nil.value,
      Alt0: function () {
          return altList;
      }
  };
  var alternativeList = {
      Applicative0: function () {
          return applicativeList;
      },
      Plus1: function () {
          return plusList;
      }
  };
  var applicativeNonEmptyList = {
      pure: (function () {
          var $236 = Data_NonEmpty.singleton(plusList);
          return function ($237) {
              return NonEmptyList($236($237));
          };
      })(),
      Apply0: function () {
          return applyNonEmptyList;
      }
  };
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["traversableList"] = traversableList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
  exports["plusList"] = plusList;
  exports["alternativeList"] = alternativeList;
  exports["functorNonEmptyList"] = functorNonEmptyList;
  exports["applicativeNonEmptyList"] = applicativeNonEmptyList;
  exports["semigroupNonEmptyList"] = semigroupNonEmptyList;
  exports["foldableNonEmptyList"] = foldableNonEmptyList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
  var exports = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var singleton = (function () {
      var $171 = Data_NonEmpty.singleton(Data_List_Types.plusList);
      return function ($172) {
          return Data_List_Types.NonEmptyList($171($172));
      };
  })();
  var head = function (v) {
      return v.value0;
  };
  exports["singleton"] = singleton;
  exports["head"] = head;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Foreign"] = $PS["Foreign"] || {};
  var exports = $PS["Foreign"];
  var $foreign = $PS["Foreign"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_Show = $PS["Data.Show"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var ForeignError = (function () {
      function ForeignError(value0) {
          this.value0 = value0;
      };
      ForeignError.create = function (value0) {
          return new ForeignError(value0);
      };
      return ForeignError;
  })();
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtIndex = (function () {
      function ErrorAtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtIndex.create = function (value0) {
          return function (value1) {
              return new ErrorAtIndex(value0, value1);
          };
      };
      return ErrorAtIndex;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var unsafeToForeign = Unsafe_Coerce.unsafeCoerce;
  var unsafeFromForeign = Unsafe_Coerce.unsafeCoerce;
  var renderForeignError = function (v) {
      if (v instanceof ForeignError) {
          return v.value0;
      };
      if (v instanceof ErrorAtIndex) {
          return "Error at array index " + (Data_Show.show(Data_Show.showInt)(v.value0) + (": " + renderForeignError(v.value1)));
      };
      if (v instanceof ErrorAtProperty) {
          return "Error at property " + (Data_Show.show(Data_Show.showString)(v.value0) + (": " + renderForeignError(v.value1)));
      };
      if (v instanceof TypeMismatch) {
          return "Type mismatch: expected " + (v.value0 + (", found " + v.value1));
      };
      throw new Error("Failed pattern match at Foreign (line 73, column 1 - line 73, column 45): " + [ v.constructor.name ]);
  };
  var fail = function (dictMonad) {
      var $118 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(dictMonad));
      return function ($119) {
          return $118(Data_List_NonEmpty.singleton($119));
      };
  };
  var unsafeReadTagged = function (dictMonad) {
      return function (tag) {
          return function (value) {
              if ($foreign.tagOf(value) === tag) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(unsafeFromForeign(value));
              };
              if (Data_Boolean.otherwise) {
                  return fail(dictMonad)(new TypeMismatch(tag, $foreign.tagOf(value)));
              };
              throw new Error("Failed pattern match at Foreign (line 110, column 1 - line 110, column 71): " + [ tag.constructor.name, value.constructor.name ]);
          };
      };
  };
  var readString = function (dictMonad) {
      return unsafeReadTagged(dictMonad)("String");
  };
  exports["ForeignError"] = ForeignError;
  exports["renderForeignError"] = renderForeignError;
  exports["unsafeToForeign"] = unsafeToForeign;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["readString"] = readString;
  exports["fail"] = fail;
  exports["typeOf"] = $foreign.typeOf;
})(PS);
(function(exports) {
  exports.undefined = undefined;
})(PS["Literals.Undefined"] = PS["Literals.Undefined"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Literals.Undefined"] = $PS["Literals.Undefined"] || {};
  var exports = $PS["Literals.Undefined"];
  var $foreign = $PS["Literals.Undefined"];
  exports["undefined"] = $foreign["undefined"];
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Untagged.Castable"] = $PS["Untagged.Castable"] || {};
  var exports = $PS["Untagged.Castable"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var cast = function () {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["cast"] = cast;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Untagged.TypeCheck"] = $PS["Untagged.TypeCheck"] || {};
  var exports = $PS["Untagged.TypeCheck"];
  var Foreign = $PS["Foreign"];
  var hasRuntimeType = function (dict) {
      return dict.hasRuntimeType;
  };
  var hasJsType = function (name) {
      return function (x) {
          return Foreign.typeOf(x) === name;
      };
  };
  var hasRuntimeTypeString = {
      hasRuntimeType: function (v) {
          return hasJsType("string");
      }
  };
  exports["hasRuntimeType"] = hasRuntimeType;
  exports["hasRuntimeTypeString"] = hasRuntimeTypeString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Untagged.Union"] = $PS["Untagged.Union"] || {};
  var exports = $PS["Untagged.Union"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Foreign = $PS["Foreign"];
  var Literals_Undefined = $PS["Literals.Undefined"];
  var Type_Proxy = $PS["Type.Proxy"];
  var Untagged_Castable = $PS["Untagged.Castable"];
  var Untagged_TypeCheck = $PS["Untagged.TypeCheck"];                
  var withOneOf = function (dictHasRuntimeType) {
      return function (f) {
          return function (g) {
              return function (o) {
                  var isTypeA = Untagged_TypeCheck.hasRuntimeType(dictHasRuntimeType)(Type_Proxy["Proxy"].value);
                  var $23 = isTypeA(Foreign.unsafeToForeign(o));
                  if ($23) {
                      return f(o);
                  };
                  return g(o);
              };
          };
      };
  };
  var toEither1 = function (dictHasRuntimeType) {
      return withOneOf(dictHasRuntimeType)(Data_Either.Left.create)(Data_Either.Right.create);
  };
  var maybeToUor = function (v) {
      if (v instanceof Data_Maybe.Just) {
          return v.value0;
      };
      if (v instanceof Data_Maybe.Nothing) {
          return Untagged_Castable.cast()(Literals_Undefined["undefined"]);
      };
      throw new Error("Failed pattern match at Untagged.Union (line 121, column 1 - line 121, column 49): " + [ v.constructor.name ]);
  };
  var asOneOf = Untagged_Castable.cast;
  exports["asOneOf"] = asOneOf;
  exports["toEither1"] = toEither1;
  exports["maybeToUor"] = maybeToUor;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Aeson"] = $PS["Aeson"] || {};
  var exports = $PS["Aeson"];
  var $foreign = $PS["Aeson"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad_State = $PS["Control.Monad.State"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Class = $PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Argonaut_Encode_Class = $PS["Data.Argonaut.Encode.Class"];
  var Data_Argonaut_Encode_Encoders = $PS["Data.Argonaut.Encode.Encoders"];
  var Data_Argonaut_Parser = $PS["Data.Argonaut.Parser"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Sequence = $PS["Data.Sequence"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_UInt = $PS["Data.UInt"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Record = $PS["Record"];
  var Type_Proxy = $PS["Type.Proxy"];
  var Untagged_Union = $PS["Untagged.Union"];                
  var AesonPatchedJson = function (x) {
      return x;
  };
  var monadAesonEncoder = Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity);
  var gDecodeAesonRowNil = {
      gDecodeAeson: function (v) {
          return function (v1) {
              return new Data_Either.Right({});
          };
      }
  };
  var functorAesonEncoder = Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity);
  var decodeAesonAeson = {
      decodeAeson: Control_Applicative.pure(Data_Either.applicativeEither)
  };
  var bindAesonEncoder = Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity);  
  var applicativeAesonEncoder = Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity);
  var verbAesonType = function (def) {
      return function (f) {
          return function (g) {
              return g(def)(f);
          };
      };
  };
  var useNextIndexIndex = Control_Apply.applyFirst(Control_Monad_State_Trans.applyStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(Data_Semiring.add(Data_Semiring.semiringInt)(1)));
  var encodeAesonUInt = {
      "encodeAeson'": function (i) {
          return Control_Bind.bind(bindAesonEncoder)(useNextIndexIndex)(function (ix) {
              return Control_Applicative.pure(applicativeAesonEncoder)({
                  patchedJson: Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonInt)(ix),
                  numberIndex: Data_Sequence.singleton(Data_UInt.toString(i))
              });
          });
      }
  };
  var toAesonType = verbAesonType(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var stringifyAeson = function (v) {
      return $foreign.stringifyAeson_(Data_Array.fromFoldable(Data_Sequence.foldableSeq)(v.numberIndex))(v.patchedJson);
  };
  var runEncoder = function (v) {
      return Control_Monad_State.evalState(v)(0);
  };
  var parseJsonStringToAeson = function (payload) {
      var v = $foreign.parseJsonExtractingIntegers(payload);
      return Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Function["const"](Data_Argonaut_Decode_Error.MissingValue.value))(Data_Functor.map(Data_Either.functorEither)(AesonPatchedJson)(Data_Argonaut_Parser.jsonParser(v.patchedPayload))))(function (patchedJson) {
          return Control_Applicative.pure(Data_Either.applicativeEither)({
              numberIndex: Data_Sequence.fromFoldable(Data_Foldable.foldableArray)(v.numberIndex),
              patchedJson: patchedJson
          });
      });
  };
  var isAesonType = verbAesonType(false)(Data_Function["const"](true));
  var getCurrentNumberIndex = Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity));
  var gEncodeAesonNil = {
      gEncodeAeson: function (v) {
          return function (v1) {
              return Foreign_Object.empty;
          };
      }
  };
  var gEncodeAeson = function (dict) {
      return dict.gEncodeAeson;
  };
  var encodeAesonRecord = function (dictGEncodeAeson) {
      return function () {
          return {
              "encodeAeson'": function (rec) {
                  var step = function (v) {
                      return function (v1) {
                          return new Data_Tuple.Tuple(Foreign_Object.insert(v.value0)(v.value1.patchedJson)(v1.value0), Data_Sequence.cons(v.value1.numberIndex)(v1.value1));
                      };
                  };
                  return Control_Bind.bind(bindAesonEncoder)(Data_Functor.map(functorAesonEncoder)((function () {
                      var $233 = Data_Array.foldr(step)(new Data_Tuple.Tuple(Foreign_Object.empty, Data_Sequence.empty));
                      var $234 = Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray);
                      return function ($235) {
                          return $233($234($235));
                      };
                  })())(Data_Traversable.sequence(Foreign_Object.traversableObject)(applicativeAesonEncoder)(gEncodeAeson(dictGEncodeAeson)(rec)(Type_Proxy["Proxy"].value))))(function (v) {
                      return Control_Applicative.pure(applicativeAesonEncoder)({
                          patchedJson: Data_Argonaut_Core.fromObject(v.value0),
                          numberIndex: Data_Foldable.fold(Data_Sequence.foldableSeq)(Data_Sequence.monoidSeq)(v.value1)
                      });
                  });
              }
          };
      };
  };
  var gDecodeAeson = function (dict) {
      return dict.gDecodeAeson;
  };
  var fromString = function (str) {
      return {
          patchedJson: Data_Argonaut_Core.fromString(str),
          numberIndex: Data_Monoid.mempty(Data_Sequence.monoidSeq)
      };
  };
  var encodeAesonViaJson = function (dictEncodeJson) {
      return function (v) {
          return Control_Applicative.pure(applicativeAesonEncoder)({
              patchedJson: Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson)(v),
              numberIndex: Data_Sequence.empty
          });
      };
  };
  var encodeAesonString = {
      "encodeAeson'": encodeAesonViaJson(Data_Argonaut_Encode_Class.encodeJsonJString)
  };
  var encodeAeson$prime = function (dict) {
      return dict["encodeAeson'"];
  };
  var encodeTraversable$prime = function (dictTraversable) {
      return function (dictEncodeAeson) {
          return function (arr) {
              var step = function (v) {
                  return function (a) {
                      return Control_Bind.bind(bindAesonEncoder)(encodeAeson$prime(dictEncodeAeson)(a))(function (v1) {
                          return Control_Applicative.pure(applicativeAesonEncoder)(new Data_Tuple.Tuple(Data_Sequence.snoc(v.value0)(v1.patchedJson), Data_Sequence.snoc(v.value1)(v1.numberIndex)));
                      });
                  };
              };
              return Control_Bind.bind(bindAesonEncoder)(Data_Foldable.foldM(dictTraversable.Foldable1())(monadAesonEncoder)(step)(new Data_Tuple.Tuple(Data_Sequence.empty, Data_Sequence.empty))(arr))(function (v) {
                  return Control_Applicative.pure(applicativeAesonEncoder)({
                      patchedJson: Data_Argonaut_Core.fromArray(Data_Array.fromFoldable(Data_Sequence.foldableSeq)(v.value0)),
                      numberIndex: Data_Foldable.fold(Data_Sequence.foldableSeq)(Data_Sequence.monoidSeq)(v.value1)
                  });
              });
          };
      };
  };
  var encodeAesonArray = function (dictEncodeAeson) {
      return {
          "encodeAeson'": encodeTraversable$prime(Data_Traversable.traversableArray)(dictEncodeAeson)
      };
  };
  var gEncodeAesonCons = function (dictEncodeAeson) {
      return function (dictGEncodeAeson) {
          return function (dictIsSymbol) {
              return function () {
                  return {
                      gEncodeAeson: function (row) {
                          return function (v) {
                              return Foreign_Object.insert(Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value))(encodeAeson$prime(dictEncodeAeson)(Record.get(dictIsSymbol)()(Type_Proxy["Proxy"].value)(row)))(gEncodeAeson(dictGEncodeAeson)(row)(Type_Proxy["Proxy"].value));
                          };
                      }
                  };
              };
          };
      };
  };
  var encodeAesonObject = function (dictEncodeAeson) {
      return {
          "encodeAeson'": function (input) {
              var step = function (v) {
                  return function (v1) {
                      return new Data_Tuple.Tuple(Foreign_Object.insert(v.value0)(v.value1.patchedJson)(v1.value0), Data_Sequence.cons(v.value1.numberIndex)(v1.value1));
                  };
              };
              return Control_Bind.bind(bindAesonEncoder)(Data_Functor.map(functorAesonEncoder)((function () {
                  var $238 = Data_Array.foldr(step)(new Data_Tuple.Tuple(Foreign_Object.empty, Data_Sequence.empty));
                  var $239 = Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray);
                  return function ($240) {
                      return $238($239($240));
                  };
              })())(Data_Traversable.sequence(Foreign_Object.traversableObject)(applicativeAesonEncoder)(Data_Functor.map(Foreign_Object.functorObject)(encodeAeson$prime(dictEncodeAeson))(input))))(function (v) {
                  return Control_Applicative.pure(applicativeAesonEncoder)({
                      patchedJson: Data_Argonaut_Core.fromObject(v.value0),
                      numberIndex: Data_Foldable.fold(Data_Sequence.foldableSeq)(Data_Sequence.monoidSeq)(v.value1)
                  });
              });
          }
      };
  };
  var encodeAeson = function (dictEncodeAeson) {
      var $241 = encodeAeson$prime(dictEncodeAeson);
      return function ($242) {
          return runEncoder($241($242));
      };
  };
  var decodeAesonViaJson = function (dictDecodeJson) {
      return function (v) {
          return Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson)(v.patchedJson);
      };
  };
  var decodeNumber = function (parse) {
      return function (v) {
          return Control_Bind.bind(Data_Either.bindEither)(decodeAesonViaJson(Data_Argonaut_Decode_Class.decodeJsonInt)(v))(function (ix) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(Data_Argonaut_Decode_Error.MissingValue.value)(Data_Sequence.index(ix)(v.numberIndex)))(function (numberStr) {
                  return Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Couldn't parse to integral: " + numberStr))(parse(numberStr));
              });
          });
      };
  };
  var decodeAesonBigInt = {
      decodeAeson: decodeNumber(Data_BigInt.fromString)
  };
  var decodeAesonInt = {
      decodeAeson: decodeNumber(Data_Int.fromString)
  };
  var decodeAesonUInt = {
      decodeAeson: decodeNumber(Data_UInt.fromString)
  };
  var decodeAesonString = {
      decodeAeson: decodeAesonViaJson(Data_Argonaut_Decode_Class.decodeJsonString)
  };
  var decodeAesonField = function (dict) {
      return dict.decodeAesonField;
  };
  var gDecodeAesonCons = function (dictDecodeAesonField) {
      return function (dictGDecodeAeson) {
          return function (dictIsSymbol) {
              return function () {
                  return function () {
                      return {
                          gDecodeAeson: function (object) {
                              return function (v) {
                                  var fieldName = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                                  var fieldValue = Foreign_Object.lookup(fieldName)(object);
                                  var v1 = decodeAesonField(dictDecodeAesonField)(fieldValue);
                                  if (v1 instanceof Data_Maybe.Just) {
                                      return Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(fieldName))(v1.value0))(function (val) {
                                          return Control_Bind.bind(Data_Either.bindEither)(gDecodeAeson(dictGDecodeAeson)(object)(Type_Proxy["Proxy"].value))(function (rest) {
                                              return new Data_Either.Right(Record.insert(dictIsSymbol)()()(Type_Proxy["Proxy"].value)(val)(rest));
                                          });
                                      });
                                  };
                                  if (v1 instanceof Data_Maybe.Nothing) {
                                      return new Data_Either.Left(new Data_Argonaut_Decode_Error.AtKey(fieldName, Data_Argonaut_Decode_Error.MissingValue.value));
                                  };
                                  throw new Error("Failed pattern match at Aeson (line 609, column 5 - line 616, column 44): " + [ v1.constructor.name ]);
                              };
                          }
                      };
                  };
              };
          };
      };
  };
  var decodeAeson = function (dict) {
      return dict.decodeAeson;
  };
  var decodeJsonString = function (dictDecodeAeson) {
      return Control_Bind.composeKleisli(Data_Either.bindEither)(parseJsonStringToAeson)(decodeAeson(dictDecodeAeson));
  };   
  var decodeTraversable = function (dictTraversable) {
      return function (dictDecodeAeson) {
          return function (dictDecodeJson) {
              return function (v) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson)(v.patchedJson))(function (v1) {
                      return Data_Traversable["for"](Data_Either.applicativeEither)(dictTraversable)(v1)(function (patchedJson) {
                          return decodeAeson(dictDecodeAeson)({
                              patchedJson: patchedJson,
                              numberIndex: v.numberIndex
                          });
                      });
                  });
              };
          };
      };
  };
  var decodeAesonArray = function (dictDecodeAeson) {
      return {
          decodeAeson: decodeTraversable(Data_Traversable.traversableArray)(dictDecodeAeson)(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeJsonJson))
      };
  };
  var getField = function (dictDecodeAeson) {
      return function (aesonObject) {
          return function (field) {
              var getField$prime = function (decoder) {
                  return function (obj) {
                      return function (str) {
                          return Data_Maybe.maybe(new Data_Either.Left(new Data_Argonaut_Decode_Error.AtKey(str, Data_Argonaut_Decode_Error.MissingValue.value)))((function () {
                              var $252 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str));
                              return function ($253) {
                                  return $252(decoder($253));
                              };
                          })())(Foreign_Object.lookup(str)(obj));
                      };
                  };
              };
              return getField$prime(decodeAeson(dictDecodeAeson))(aesonObject)(field);
          };
      };
  };
  var getFieldOptional = function (dictDecodeAeson) {
      var getFieldOptional_ = function (decoder) {
          return function (obj) {
              return function (str) {
                  var decode = (function () {
                      var $254 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str));
                      return function ($255) {
                          return $254(decoder($255));
                      };
                  })();
                  return Data_Maybe.maybe(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value))((function () {
                      var $256 = Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create);
                      return function ($257) {
                          return $256(decode($257));
                      };
                  })())(Foreign_Object.lookup(str)(obj));
              };
          };
      };
      return getFieldOptional_(decodeAeson(dictDecodeAeson));
  };
  var decodeAesonField1 = function (dictDecodeAeson) {
      return {
          decodeAesonField: function (j) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(decodeAeson(dictDecodeAeson))(j);
          }
      };
  };
  var decodeAeson$bar$plus$bar = function () {
      return function (dictDecodeAeson) {
          return function (dictDecodeAeson1) {
              return {
                  decodeAeson: function (j) {
                      return Control_Alt.alt(Data_Either.altEither)(Data_Functor.map(Data_Either.functorEither)(Untagged_Union.asOneOf())(decodeAeson(dictDecodeAeson)(j)))(Data_Functor.map(Data_Either.functorEither)(Untagged_Union.asOneOf())(decodeAeson(dictDecodeAeson1)(j)));
                  }
              };
          };
      };
  };
  var constAesonCases = function (v) {
      var c = Data_Function["const"](v);
      return {
          caseObject: c,
          caseNull: c,
          caseBoolean: c,
          caseString: c,
          caseNumber: c,
          caseArray: c
      };
  };
  var caseAeson = function (v) {
      return function (v1) {
          var unsafeSeqIndex = function (s) {
              return function (ix) {
                  return Data_Maybe.fromJust()(Data_Sequence.index(ix)(s));
              };
          };
          var mkAeson = function (json) {
              return {
                  patchedJson: json,
                  numberIndex: v1.numberIndex
              };
          };
          return Data_Argonaut_Core.caseJson(v.caseNull)(v.caseBoolean)((function () {
              var $258 = unsafeSeqIndex(v1.numberIndex);
              return function ($259) {
                  return v.caseNumber($258(Data_Int.round($259)));
              };
          })())(v.caseString)((function () {
              var $260 = Data_Functor.map(Data_Functor.functorArray)(mkAeson);
              return function ($261) {
                  return v.caseArray($260($261));
              };
          })())((function () {
              var $262 = Data_Functor.map(Foreign_Object.functorObject)(mkAeson);
              return function ($263) {
                  return v.caseObject($262($263));
              };
          })())(v1.patchedJson);
      };
  };
  var caseAesonArray = function (def) {
      return function (f) {
          return caseAeson((function (v) {
              return {
                  caseArray: f,
                  caseBoolean: v.caseBoolean,
                  caseNull: v.caseNull,
                  caseNumber: v.caseNumber,
                  caseObject: v.caseObject,
                  caseString: v.caseString
              };
          })(constAesonCases(def)));
      };
  };                                            
  var caseAesonNull = function (def) {
      return function (f) {
          return caseAeson((function (v) {
              return {
                  caseNull: f,
                  caseArray: v.caseArray,
                  caseBoolean: v.caseBoolean,
                  caseNumber: v.caseNumber,
                  caseObject: v.caseObject,
                  caseString: v.caseString
              };
          })(constAesonCases(def)));
      };
  };
  var isNull = isAesonType(caseAesonNull);
  var caseAesonNumber = function (def) {
      return function (f) {
          return caseAeson((function (v) {
              return {
                  caseNumber: f,
                  caseArray: v.caseArray,
                  caseBoolean: v.caseBoolean,
                  caseNull: v.caseNull,
                  caseObject: v.caseObject,
                  caseString: v.caseString
              };
          })(constAesonCases(def)));
      };
  };
  var caseAesonBigInt = function (def) {
      return function (f) {
          return caseAesonNumber(def)(function (str) {
              var v = Data_BigInt.fromString(str);
              if (v instanceof Data_Maybe.Nothing) {
                  return def;
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Aeson (line 388, column 3 - line 390, column 22): " + [ v.constructor.name ]);
          });
      };
  };                                          
  var toNumber = toAesonType(caseAesonNumber);
  var caseAesonObject = function (def) {
      return function (f) {
          return caseAeson((function (v) {
              return {
                  caseObject: f,
                  caseArray: v.caseArray,
                  caseBoolean: v.caseBoolean,
                  caseNull: v.caseNull,
                  caseNumber: v.caseNumber,
                  caseString: v.caseString
              };
          })(constAesonCases(def)));
      };
  };                                          
  var toObject = toAesonType(caseAesonObject);
  var decodeAesonRecord = function (dictGDecodeAeson) {
      return function () {
          return {
              decodeAeson: function (json) {
                  var v = toObject(json);
                  if (v instanceof Data_Maybe.Just) {
                      return gDecodeAeson(dictGDecodeAeson)(v.value0)(Type_Proxy["Proxy"].value);
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Object"));
                  };
                  throw new Error("Failed pattern match at Aeson (line 533, column 5 - line 535, column 46): " + [ v.constructor.name ]);
              }
          };
      };
  };
  var decodeAesonObject = function (dictDecodeAeson) {
      return {
          decodeAeson: caseAesonObject(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Expected Object")))(Data_Traversable.traverse(Foreign_Object.traversableObject)(Data_Either.applicativeEither)(decodeAeson(dictDecodeAeson)))
      };
  };
  var caseAesonString = function (def) {
      return function (f) {
          return caseAeson((function (v) {
              return {
                  caseString: f,
                  caseArray: v.caseArray,
                  caseBoolean: v.caseBoolean,
                  caseNull: v.caseNull,
                  caseNumber: v.caseNumber,
                  caseObject: v.caseObject
              };
          })(constAesonCases(def)));
      };
  };                                          
  var toString = toAesonType(caseAesonString);
  var toStringifiedNumbersJson = Control_Lazy.fix(Control_Lazy.lazyFn)(function (v) {
      return caseAeson({
          caseNull: Data_Function["const"](Data_Argonaut_Core.jsonNull),
          caseBoolean: Data_Argonaut_Encode_Encoders.encodeBoolean,
          caseNumber: Data_Argonaut_Encode_Encoders.encodeString,
          caseString: Data_Argonaut_Encode_Encoders.encodeString,
          caseArray: (function () {
              var $264 = Data_Functor.map(Data_Functor.functorArray)(toStringifiedNumbersJson);
              return function ($265) {
                  return Data_Argonaut_Core.fromArray($264($265));
              };
          })(),
          caseObject: (function () {
              var $266 = Data_Functor.map(Foreign_Object.functorObject)(toStringifiedNumbersJson);
              return function ($267) {
                  return Data_Argonaut_Core.fromObject($266($267));
              };
          })()
      });
  });
  var getNestedAeson = function (v) {
      return function (keys) {
          var mkAeson = function (json) {
              return {
                  numberIndex: v.numberIndex,
                  patchedJson: json
              };
          };
          var lookup = function (j) {
              return function (lbl) {
                  return Data_Argonaut_Core.caseJsonObject(Data_Maybe.Nothing.value)(Foreign_Object.lookup(lbl))(j);
              };
          };
          return Data_Either.note(new Data_Argonaut_Decode_Error.UnexpectedValue(toStringifiedNumbersJson(v)))(Data_Functor.map(Data_Maybe.functorMaybe)(mkAeson)(Data_Foldable.foldM(Data_Foldable.foldableArray)(Data_Maybe.monadMaybe)(lookup)(v.patchedJson)(keys)));
      };
  };
  var decodeAesonMaybe = function (dictDecodeAeson) {
      return {
          decodeAeson: function (aeson) {
              return caseAeson({
                  caseNull: function (v) {
                      return new Data_Either.Right(Data_Maybe.Nothing.value);
                  },
                  caseBoolean: function (v) {
                      return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(decodeAeson(dictDecodeAeson)(aeson));
                  },
                  caseNumber: function (v) {
                      return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(decodeAeson(dictDecodeAeson)(aeson));
                  },
                  caseString: function (v) {
                      return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(decodeAeson(dictDecodeAeson)(aeson));
                  },
                  caseArray: function (v) {
                      return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(decodeAeson(dictDecodeAeson)(aeson));
                  },
                  caseObject: function (v) {
                      return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(decodeAeson(dictDecodeAeson)(aeson));
                  }
              })(aeson);
          }
      };
  };
  var decodeAesonFieldMaybe = function (dictDecodeAeson) {
      return {
          decodeAesonField: (function () {
              var $268 = Data_Maybe.maybe(new Data_Either.Right(Data_Maybe.Nothing.value))(decodeAeson(decodeAesonMaybe(dictDecodeAeson)));
              return function ($269) {
                  return Data_Maybe.Just.create($268($269));
              };
          })()
      };
  };
  var bumpNumberIndexBy = function (i) {
      return Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(Data_Semiring.add(Data_Semiring.semiringInt)(i));
  };
  var encodeAesonAeson = {
      "encodeAeson'": function (v) {
          return Control_Bind.bind(bindAesonEncoder)(getCurrentNumberIndex)(function (ix) {
              var encodeNumber = function (n) {
                  return Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJNumber)(Data_Int.toNumber(ix) + n);
              };
              var bumpIndices = Control_Lazy.fix(Control_Lazy.lazyFn)(function (v1) {
                  return Data_Argonaut_Core.caseJson(Data_Argonaut_Encode_Encoders.encodeUnit)(Data_Argonaut_Encode_Encoders.encodeBoolean)(encodeNumber)(Data_Argonaut_Encode_Encoders.encodeString)((function () {
                      var $270 = Data_Functor.map(Data_Functor.functorArray)(bumpIndices);
                      return function ($271) {
                          return Data_Argonaut_Core.fromArray($270($271));
                      };
                  })())((function () {
                      var $272 = Data_Functor.map(Foreign_Object.functorObject)(bumpIndices);
                      return function ($273) {
                          return Data_Argonaut_Core.fromObject($272($273));
                      };
                  })());
              });
              return Control_Bind.discard(Control_Bind.discardUnit)(bindAesonEncoder)(bumpNumberIndexBy(Data_Sequence.length(v.numberIndex)))(function () {
                  return Control_Applicative.pure(applicativeAesonEncoder)({
                      patchedJson: bumpIndices(v.patchedJson),
                      numberIndex: v.numberIndex
                  });
              });
          });
      }
  };
  exports["caseAesonArray"] = caseAesonArray;
  exports["caseAesonBigInt"] = caseAesonBigInt;
  exports["caseAesonObject"] = caseAesonObject;
  exports["caseAesonString"] = caseAesonString;
  exports["decodeAeson"] = decodeAeson;
  exports["encodeAeson"] = encodeAeson;
  exports["getField"] = getField;
  exports["getFieldOptional"] = getFieldOptional;
  exports["getNestedAeson"] = getNestedAeson;
  exports["parseJsonStringToAeson"] = parseJsonStringToAeson;
  exports["stringifyAeson"] = stringifyAeson;
  exports["toStringifiedNumbersJson"] = toStringifiedNumbersJson;
  exports["isNull"] = isNull;
  exports["fromString"] = fromString;
  exports["decodeAesonUInt"] = decodeAesonUInt;
  exports["decodeAesonInt"] = decodeAesonInt;
  exports["decodeAesonBigInt"] = decodeAesonBigInt;
  exports["decodeAesonString"] = decodeAesonString;
  exports["decodeAesonAeson"] = decodeAesonAeson;
  exports["decodeAesonObject"] = decodeAesonObject;
  exports["decodeAesonRecord"] = decodeAesonRecord;
  exports["decodeAeson|+|"] = decodeAeson$bar$plus$bar;
  exports["decodeAesonArray"] = decodeAesonArray;
  exports["gDecodeAesonRowNil"] = gDecodeAesonRowNil;
  exports["gDecodeAesonCons"] = gDecodeAesonCons;
  exports["decodeAesonFieldMaybe"] = decodeAesonFieldMaybe;
  exports["decodeAesonField1"] = decodeAesonField1;
  exports["encodeAesonUInt"] = encodeAesonUInt;
  exports["encodeAesonString"] = encodeAesonString;
  exports["encodeAesonAeson"] = encodeAesonAeson;
  exports["encodeAesonObject"] = encodeAesonObject;
  exports["encodeAesonRecord"] = encodeAesonRecord;
  exports["encodeAesonArray"] = encodeAesonArray;
  exports["gEncodeAesonNil"] = gEncodeAesonNil;
  exports["gEncodeAesonCons"] = gEncodeAesonCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Types.ByteArray"] = $PS["Types.ByteArray"] || {};
  var exports = $PS["Types.ByteArray"];
  var $foreign = $PS["Types.ByteArray"];
  var Aeson = $PS["Aeson"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];
  var showByteArray = {
      show: function (arr) {
          return "(hexToByteArrayUnsafe " + (Data_Show.show(Data_Show.showString)($foreign.byteArrayToHex(arr)) + ")");
      }
  };
  var semigroupByteArray = {
      append: $foreign.concat_
  };
  var monoidByteArray = {
      mempty: $foreign.byteArrayFromIntArrayUnsafe([  ]),
      Semigroup0: function () {
          return semigroupByteArray;
      }
  };
  var ordByteArray = {
      compare: (function () {
          var toDelta = function (x) {
              return function (y) {
                  var v = Data_Ord.compare(Data_Ord.ordInt)(x)(y);
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Types.ByteArray (line 53, column 7 - line 56, column 17): " + [ v.constructor.name ]);
              };
          };
          return function (xs) {
              return function (ys) {
                  return Data_Ord.compare(Data_Ord.ordInt)(0)($foreign.ord_(toDelta)(xs)(ys));
              };
          };
      })(),
      Eq0: function () {
          return eqByteArray;
      }
  };
  var eqByteArray = {
      eq: function (a) {
          return function (b) {
              return Data_Eq.eq(Data_Ordering.eqOrdering)(Data_Ord.compare(ordByteArray)(a)(b))(Data_Ordering.EQ.value);
          };
      }
  };
  var hexToByteArray = $foreign.hexToByteArray_(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var decodeAesonByteArray = {
      decodeAeson: function (j) {
          var unexpectedValueError = new Data_Argonaut_Decode_Error.UnexpectedValue(Aeson.toStringifiedNumbersJson(j));
          var typeMismatchError = new Data_Argonaut_Decode_Error.TypeMismatch("expected a hex-encoded string");
          return Aeson.caseAesonString(new Data_Either.Left(typeMismatchError))((function () {
              var $13 = Data_Either.note(unexpectedValueError);
              return function ($14) {
                  return $13(hexToByteArray($14));
              };
          })())(j);
      }
  };
  var byteLength = (function () {
      var $15 = Data_Newtype.unwrap();
      return function ($16) {
          return $foreign["_byteLength"]($15($16));
      };
  })();
  var byteArrayFromIntArray = $foreign.byteArrayFromIntArray_(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  exports["byteArrayFromIntArray"] = byteArrayFromIntArray;
  exports["byteLength"] = byteLength;
  exports["hexToByteArray"] = hexToByteArray;
  exports["showByteArray"] = showByteArray;
  exports["eqByteArray"] = eqByteArray;
  exports["ordByteArray"] = ordByteArray;
  exports["semigroupByteArray"] = semigroupByteArray;
  exports["monoidByteArray"] = monoidByteArray;
  exports["decodeAesonByteArray"] = decodeAesonByteArray;
  exports["byteArrayFromIntArrayUnsafe"] = $foreign.byteArrayFromIntArrayUnsafe;
  exports["byteArrayToHex"] = $foreign.byteArrayToHex;
  exports["byteArrayToIntArray"] = $foreign.byteArrayToIntArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Types.CborBytes"] = $PS["Types.CborBytes"] || {};
  var exports = $PS["Types.CborBytes"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Types_ByteArray = $PS["Types.ByteArray"];                     
  var semigroupCborBytes = Types_ByteArray.semigroupByteArray;
  var ordCborBytes = Types_ByteArray.ordByteArray;                        
  var eqCborBytes = Types_ByteArray.eqByteArray;              
  var rawBytesAsCborBytes = (function () {
      var $11 = Data_Newtype.wrap();
      var $12 = Data_Newtype.unwrap();
      return function ($13) {
          return $11($12($13));
      };
  })();
  var cborBytesToIntArray = (function () {
      var $18 = Data_Newtype.unwrap();
      return function ($19) {
          return Types_ByteArray.byteArrayToIntArray($18($19));
      };
  })();
  var cborBytesToHex = (function () {
      var $20 = Data_Newtype.unwrap();
      return function ($21) {
          return Types_ByteArray.byteArrayToHex($20($21));
      };
  })();                                            
  var cborBytesFromIntArrayUnsafe = (function () {
      var $22 = Data_Newtype.wrap();
      return function ($23) {
          return $22(Types_ByteArray.byteArrayFromIntArrayUnsafe($23));
      };
  })();
  exports["cborBytesToIntArray"] = cborBytesToIntArray;
  exports["cborBytesFromIntArrayUnsafe"] = cborBytesFromIntArrayUnsafe;
  exports["cborBytesToHex"] = cborBytesToHex;
  exports["rawBytesAsCborBytes"] = rawBytesAsCborBytes;
  exports["eqCborBytes"] = eqCborBytes;
  exports["ordCborBytes"] = ordCborBytes;
  exports["semigroupCborBytes"] = semigroupCborBytes;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Serialization.Address"] = $PS["Serialization.Address"] || {};
  var exports = $PS["Serialization.Address"];
  var $foreign = $PS["Serialization.Address"];
  var Control_Alt = $PS["Control.Alt"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_UInt = $PS["Data.UInt"];
  var FfiHelpers = $PS["FfiHelpers"];
  var Types_CborBytes = $PS["Types.CborBytes"];
  var Slot = function (x) {
      return x;
  };
  var TestnetId = (function () {
      function TestnetId() {

      };
      TestnetId.value = new TestnetId();
      return TestnetId;
  })();
  var MainnetId = (function () {
      function MainnetId() {

      };
      MainnetId.value = new MainnetId();
      return MainnetId;
  })();
  var showAddress = {
      show: function (a) {
          return "(Address " + ($foreign.addressBech32(a) + ")");
      }
  };
  var semigroupSlot = {
      append: function (v) {
          return function (v1) {
              return Data_Semiring.add(Data_UInt.uintSemiring)(v)(v1);
          };
      }
  };
  var eqStakeCredential = {
      eq: Data_Function.on(Data_Eq.eq(Types_CborBytes.eqCborBytes))($foreign.stakeCredentialToBytes)
  };
  var ordStakeCredential = {
      compare: Data_Function.on(Data_Ord.compare(Types_CborBytes.ordCborBytes))($foreign.stakeCredentialToBytes),
      Eq0: function () {
          return eqStakeCredential;
      }
  };
  var eqSlot = Data_UInt.uintEqInstance;
  var eqNetworkId = {
      eq: function (x) {
          return function (y) {
              if (x instanceof TestnetId && y instanceof TestnetId) {
                  return true;
              };
              if (x instanceof MainnetId && y instanceof MainnetId) {
                  return true;
              };
              return false;
          };
      }
  };                                       
  var eqAddress = {
      eq: Data_Function.on(Data_Eq.eq(Types_CborBytes.eqCborBytes))($foreign.addressBytes)
  };
  var eqRewardAddress = {
      eq: Data_Function.on(Data_Eq.eq(eqAddress))($foreign.rewardAddressToAddress)
  };                                                    
  var stakeCredentialToScriptHash = $foreign.withStakeCredential({
      onKeyHash: Data_Function["const"](Data_Maybe.Nothing.value),
      onScriptHash: Data_Maybe.Just.create
  });
  var rewardAddressFromAddress = $foreign["_rewardAddressFromAddress"](FfiHelpers.maybeFfiHelper);
  var rewardAddressBytes = function ($160) {
      return $foreign.addressBytes($foreign.rewardAddressToAddress($160));
  };
  var ordRewardAddress = {
      compare: Data_Function.on(Data_Ord.compare(Types_CborBytes.ordCborBytes))(rewardAddressBytes),
      Eq0: function () {
          return eqRewardAddress;
      }
  };
  var pointerAddressFromAddress = $foreign["_pointerAddressFromAddress"](FfiHelpers.maybeFfiHelper);
  var networkIdtoInt = function (v) {
      if (v instanceof TestnetId) {
          return 0;
      };
      if (v instanceof MainnetId) {
          return 1;
      };
      throw new Error("Failed pattern match at Serialization.Address (line 359, column 18 - line 361, column 17): " + [ v.constructor.name ]);
  };                                                               
  var rewardAddress = $foreign["_rewardAddress"](networkIdtoInt);
  var intToNetworkId = function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(TestnetId.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just(MainnetId.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var unsafeIntToNetId = function (i) {
      return Data_Maybe.fromJust()(intToNetworkId(i));
  };
  var enterpriseAddressFromAddress = $foreign["_enterpriseAddressFromAddress"](FfiHelpers.maybeFfiHelper);
  var enterpriseAddress = $foreign["_enterpriseAddress"](networkIdtoInt);                       
  var baseAddressFromAddress = $foreign["_baseAddressFromAddress"](FfiHelpers.maybeFfiHelper);
  var baseAddress = $foreign["_baseAddress"](networkIdtoInt);
  var pubKeyAddress = function (netId) {
      return function (pkh) {
          return function (skh) {
              return baseAddress({
                  network: netId,
                  paymentCred: $foreign.keyHashCredential(pkh),
                  delegationCred: $foreign.keyHashCredential(skh)
              });
          };
      };
  };
  var addressPaymentCred = function (addr) {
      return Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)($foreign.baseAddressPaymentCred)(baseAddressFromAddress(addr)))(Data_Functor.map(Data_Maybe.functorMaybe)($foreign.rewardAddressPaymentCred)(rewardAddressFromAddress(addr))))(Data_Functor.map(Data_Maybe.functorMaybe)($foreign.pointerAddressPaymentCred)(pointerAddressFromAddress(addr))))(Data_Functor.map(Data_Maybe.functorMaybe)($foreign.enterpriseAddressPaymentCred)(enterpriseAddressFromAddress(addr)));
  };
  var addressFromBytes = $foreign["_addressFromBytes"](FfiHelpers.maybeFfiHelper);
  var addressFromBech32 = $foreign["_addressFromBech32"](FfiHelpers.maybeFfiHelper);
  exports["Slot"] = Slot;
  exports["TestnetId"] = TestnetId;
  exports["MainnetId"] = MainnetId;
  exports["pubKeyAddress"] = pubKeyAddress;
  exports["stakeCredentialToScriptHash"] = stakeCredentialToScriptHash;
  exports["addressFromBytes"] = addressFromBytes;
  exports["addressFromBech32"] = addressFromBech32;
  exports["addressPaymentCred"] = addressPaymentCred;
  exports["enterpriseAddress"] = enterpriseAddress;
  exports["enterpriseAddressFromAddress"] = enterpriseAddressFromAddress;
  exports["networkIdtoInt"] = networkIdtoInt;
  exports["rewardAddress"] = rewardAddress;
  exports["unsafeIntToNetId"] = unsafeIntToNetId;
  exports["eqSlot"] = eqSlot;
  exports["semigroupSlot"] = semigroupSlot;
  exports["showAddress"] = showAddress;
  exports["eqAddress"] = eqAddress;
  exports["eqRewardAddress"] = eqRewardAddress;
  exports["ordRewardAddress"] = ordRewardAddress;
  exports["eqStakeCredential"] = eqStakeCredential;
  exports["ordStakeCredential"] = ordStakeCredential;
  exports["eqNetworkId"] = eqNetworkId;
  exports["addressBytes"] = $foreign.addressBytes;
  exports["addressBech32"] = $foreign.addressBech32;
  exports["keyHashCredential"] = $foreign.keyHashCredential;
  exports["scriptHashCredential"] = $foreign.scriptHashCredential;
  exports["withStakeCredential"] = $foreign.withStakeCredential;
  exports["baseAddressToAddress"] = $foreign.baseAddressToAddress;
  exports["enterpriseAddressPaymentCred"] = $foreign.enterpriseAddressPaymentCred;
  exports["enterpriseAddressToAddress"] = $foreign.enterpriseAddressToAddress;
  exports["rewardAddressToAddress"] = $foreign.rewardAddressToAddress;
})(PS);
(function(exports) {
  "use strict";

  exports.intercalate = function (separator) {
    return function (xs) {
      var len = xs.length;
      if (len === 0) return "";

      var res = xs[0];
      for (var i = 1; i < len; i++) {
        res = res + separator + xs[i];
      }
      return res;
    };
  };
})(PS["Data.Show.Generic"] = PS["Data.Show.Generic"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Generic.Rep"] = $PS["Data.Generic.Rep"] || {};
  var exports = $PS["Data.Generic.Rep"];             
  var Inl = (function () {
      function Inl(value0) {
          this.value0 = value0;
      };
      Inl.create = function (value0) {
          return new Inl(value0);
      };
      return Inl;
  })();
  var Inr = (function () {
      function Inr(value0) {
          this.value0 = value0;
      };
      Inr.create = function (value0) {
          return new Inr(value0);
      };
      return Inr;
  })();
  var Product = (function () {
      function Product(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Product.create = function (value0) {
          return function (value1) {
              return new Product(value0, value1);
          };
      };
      return Product;
  })();
  var NoArguments = (function () {
      function NoArguments() {

      };
      NoArguments.value = new NoArguments();
      return NoArguments;
  })();
  var Constructor = function (x) {
      return x;
  };
  var to = function (dict) {
      return dict.to;
  };
  var from = function (dict) {
      return dict.from;
  };
  exports["to"] = to;
  exports["from"] = from;
  exports["NoArguments"] = NoArguments;
  exports["Inl"] = Inl;
  exports["Inr"] = Inr;
  exports["Product"] = Product;
  exports["Constructor"] = Constructor;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Show.Generic"] = $PS["Data.Show.Generic"] || {};
  var exports = $PS["Data.Show.Generic"];
  var $foreign = $PS["Data.Show.Generic"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var genericShowArgsNoArguments = {
      genericShowArgs: function (v) {
          return [  ];
      }
  };
  var genericShowArgsArgument = function (dictShow) {
      return {
          genericShowArgs: function (v) {
              return [ Data_Show.show(dictShow)(v) ];
          }
      };
  };
  var genericShowArgs = function (dict) {
      return dict.genericShowArgs;
  };
  var genericShowArgsProduct = function (dictGenericShowArgs) {
      return function (dictGenericShowArgs1) {
          return {
              genericShowArgs: function (v) {
                  return Data_Semigroup.append(Data_Semigroup.semigroupArray)(genericShowArgs(dictGenericShowArgs)(v.value0))(genericShowArgs(dictGenericShowArgs1)(v.value1));
              }
          };
      };
  };
  var genericShowConstructor = function (dictGenericShowArgs) {
      return function (dictIsSymbol) {
          return {
              "genericShow'": function (v) {
                  var ctor = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                  var v1 = genericShowArgs(dictGenericShowArgs)(v);
                  if (v1.length === 0) {
                      return ctor;
                  };
                  return "(" + ($foreign.intercalate(" ")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ ctor ])(v1)) + ")");
              }
          };
      };
  };
  var genericShow$prime = function (dict) {
      return dict["genericShow'"];
  };
  var genericShowSum = function (dictGenericShow) {
      return function (dictGenericShow1) {
          return {
              "genericShow'": function (v) {
                  if (v instanceof Data_Generic_Rep.Inl) {
                      return genericShow$prime(dictGenericShow)(v.value0);
                  };
                  if (v instanceof Data_Generic_Rep.Inr) {
                      return genericShow$prime(dictGenericShow1)(v.value0);
                  };
                  throw new Error("Failed pattern match at Data.Show.Generic (line 26, column 1 - line 28, column 40): " + [ v.constructor.name ]);
              }
          };
      };
  };
  var genericShow = function (dictGeneric) {
      return function (dictGenericShow) {
          return function (x) {
              return genericShow$prime(dictGenericShow)(Data_Generic_Rep.from(dictGeneric)(x));
          };
      };
  };
  exports["genericShow"] = genericShow;
  exports["genericShowArgsNoArguments"] = genericShowArgsNoArguments;
  exports["genericShowSum"] = genericShowSum;
  exports["genericShowArgsProduct"] = genericShowArgsProduct;
  exports["genericShowConstructor"] = genericShowConstructor;
  exports["genericShowArgsArgument"] = genericShowArgsArgument;
})(PS);
(function(exports) {
  /* global require exports BROWSER_RUNTIME */

  var CardanoWasm;
  if (typeof BROWSER_RUNTIME != 'undefined' && BROWSER_RUNTIME) {
      CardanoWasm = require('@emurgo/cardano-serialization-lib-browser');
  } else {
      CardanoWasm = require('@emurgo/cardano-serialization-lib-nodejs');
  }

  const hashFromImpl = hashClassFrom => maybe => input => {
      var ret = null;
      try {
          ret = hashClassFrom(input);
      }
      catch (e) {
          console.log(e);
      }
      if (ret == null) {
          return maybe.nothing;
      }
      return maybe.just(ret);
  };

  const hashToBytes = hash => {
      return hash.to_bytes();
  };

  const hashToBech32Unsafe = prefix => hash => {
      return hash.to_bech32(prefix);
  };

  const hashToBech32Impl = maybe => prefix => hash => {
      var ret = null;
      try {
          ret = hash.to_bech32(prefix);
      }
      catch (e) {
          console.log(e);
      }
      if (ret == null) {
          return maybe.nothing;
      }
      return maybe.just(ret);
  };

  exports._ed25519KeyHashFromBytesImpl = maybe => bytes => {
      return hashFromImpl(CardanoWasm.Ed25519KeyHash.from_bytes)(maybe)(bytes);
  };

  exports._scriptHashFromBytesImpl = maybe => bytes => {
      return hashFromImpl(CardanoWasm.ScriptHash.from_bytes)(maybe)(bytes);
  };

  exports.ed25519KeyHashToBytes = hashToBytes;           

  exports.scriptHashToBytes = hashToBytes;
})(PS["Serialization.Hash"] = PS["Serialization.Hash"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Types.RawBytes"] = $PS["Types.RawBytes"] || {};
  var exports = $PS["Types.RawBytes"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];
  var Types_ByteArray = $PS["Types.ByteArray"];              
  var ordRawBytes = Types_ByteArray.ordByteArray;
  var monoidRawBytes = Types_ByteArray.monoidByteArray;                  
  var eqRawBytes = Types_ByteArray.eqByteArray;
  var rawBytesToHex = (function () {
      var $13 = Data_Newtype.unwrap();
      return function ($14) {
          return Types_ByteArray.byteArrayToHex($13($14));
      };
  })();
  var showRawBytes = {
      show: function (rb) {
          return "(hexToRawBytesUnsafe " + (Data_Show.show(Data_Show.showString)(rawBytesToHex(rb)) + ")");
      }
  };   
  var hexToRawBytes = (function () {
      var $23 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.wrap());
      return function ($24) {
          return $23(Types_ByteArray.hexToByteArray($24));
      };
  })();
  exports["rawBytesToHex"] = rawBytesToHex;
  exports["hexToRawBytes"] = hexToRawBytes;
  exports["showRawBytes"] = showRawBytes;
  exports["eqRawBytes"] = eqRawBytes;
  exports["ordRawBytes"] = ordRawBytes;
  exports["monoidRawBytes"] = monoidRawBytes;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Serialization.Hash"] = $PS["Serialization.Hash"] || {};
  var exports = $PS["Serialization.Hash"];
  var $foreign = $PS["Serialization.Hash"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Ord = $PS["Data.Ord"];
  var FfiHelpers = $PS["FfiHelpers"];
  var Types_RawBytes = $PS["Types.RawBytes"];
  var showScriptHash = {
      show: function (edkh) {
          return "(ScriptHash " + (Types_RawBytes.rawBytesToHex($foreign.scriptHashToBytes(edkh)) + ")");
      }
  };
  var showEd25519KeyHash = {
      show: function (edkh) {
          return "(Ed25519KeyHash " + (Types_RawBytes.rawBytesToHex($foreign.ed25519KeyHashToBytes(edkh)) + ")");
      }
  };
  var eqScriptHash = {
      eq: Data_Function.on(Data_Eq.eq(Types_RawBytes.eqRawBytes))($foreign.scriptHashToBytes)
  };
  var ordScriptHash = {
      compare: Data_Function.on(Data_Ord.compare(Types_RawBytes.ordRawBytes))($foreign.scriptHashToBytes),
      Eq0: function () {
          return eqScriptHash;
      }
  };
  var eqEd25519KeyHash = {
      eq: Data_Function.on(Data_Eq.eq(Types_RawBytes.eqRawBytes))($foreign.ed25519KeyHashToBytes)
  };
  var ordEd25519KeyHash = {
      compare: Data_Function.on(Data_Ord.compare(Types_RawBytes.ordRawBytes))($foreign.ed25519KeyHashToBytes),
      Eq0: function () {
          return eqEd25519KeyHash;
      }
  };                                                                                      
  var scriptHashFromBytes = $foreign["_scriptHashFromBytesImpl"](FfiHelpers.maybeFfiHelper);      
  var ed25519KeyHashFromBytes = $foreign["_ed25519KeyHashFromBytesImpl"](FfiHelpers.maybeFfiHelper);
  exports["ed25519KeyHashFromBytes"] = ed25519KeyHashFromBytes;
  exports["scriptHashFromBytes"] = scriptHashFromBytes;
  exports["eqEd25519KeyHash"] = eqEd25519KeyHash;
  exports["ordEd25519KeyHash"] = ordEd25519KeyHash;
  exports["showEd25519KeyHash"] = showEd25519KeyHash;
  exports["ordScriptHash"] = ordScriptHash;
  exports["showScriptHash"] = showScriptHash;
  exports["ed25519KeyHashToBytes"] = $foreign.ed25519KeyHashToBytes;
  exports["scriptHashToBytes"] = $foreign.scriptHashToBytes;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Types.Scripts"] = $PS["Types.Scripts"] || {};
  var exports = $PS["Types.Scripts"];
  var Aeson = $PS["Aeson"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Serialization_Hash = $PS["Serialization.Hash"];
  var Types_ByteArray = $PS["Types.ByteArray"];                
  var ValidatorHash = function (x) {
      return x;
  };
  var PlutusScript = function (x) {
      return x;
  };
  var Validator = function (x) {
      return x;
  };                                                                
  var ordValidatorHash = Serialization_Hash.ordScriptHash;
  var ordMintingPolicyHash = Serialization_Hash.ordScriptHash;
  var genericValidator_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var genericValidatorHash_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showValidatorHash = {
      show: Data_Show_Generic.genericShow(genericValidatorHash_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Serialization_Hash.showScriptHash))({
          reflectSymbol: function () {
              return "ValidatorHash";
          }
      }))
  };
  var genericPlutusScript_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showPlutusScript = {
      show: Data_Show_Generic.genericShow(genericPlutusScript_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ByteArray.showByteArray))({
          reflectSymbol: function () {
              return "PlutusScript";
          }
      }))
  };
  var showValidator = {
      show: Data_Show_Generic.genericShow(genericValidator_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showPlutusScript))({
          reflectSymbol: function () {
              return "Validator";
          }
      }))
  };
  var genericMintingPolicy_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showMintingPolicy = {
      show: Data_Show_Generic.genericShow(genericMintingPolicy_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showPlutusScript))({
          reflectSymbol: function () {
              return "MintingPolicy";
          }
      }))
  };
  var genericMintingPolicyHash_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showMintingPolicyHash = {
      show: Data_Show_Generic.genericShow(genericMintingPolicyHash_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Serialization_Hash.showScriptHash))({
          reflectSymbol: function () {
              return "MintingPolicyHash";
          }
      }))
  };                                                         
  var eqPlutusScript = Types_ByteArray.eqByteArray;
  var eqValidator = eqPlutusScript;                         
  var eqMintingPolicy = eqPlutusScript;                                   
  var decodeAesonPlutusScript = Types_ByteArray.decodeAesonByteArray;
  var decodeAesonHelper = function (dictDecodeAeson) {
      return function (constrName) {
          return function (constr) {
              return Aeson.caseAesonObject(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Expected object")))(Control_Bind.composeKleisli(Data_Either.bindEither)(Data_Function.flip(Aeson.getField(Aeson.decodeAesonAeson))(constrName))((function () {
                  var $96 = Data_Functor.map(Data_Either.functorEither)(constr);
                  var $97 = Aeson.decodeAeson(dictDecodeAeson);
                  return function ($98) {
                      return $96($97($98));
                  };
              })()));
          };
      };
  };
  var decodeAesonValidator = {
      decodeAeson: decodeAesonHelper(decodeAesonPlutusScript)("getValidator")(Validator)
  };
  exports["PlutusScript"] = PlutusScript;
  exports["ValidatorHash"] = ValidatorHash;
  exports["eqPlutusScript"] = eqPlutusScript;
  exports["decodeAesonPlutusScript"] = decodeAesonPlutusScript;
  exports["eqMintingPolicy"] = eqMintingPolicy;
  exports["showMintingPolicy"] = showMintingPolicy;
  exports["eqValidator"] = eqValidator;
  exports["decodeAesonValidator"] = decodeAesonValidator;
  exports["showValidator"] = showValidator;
  exports["ordMintingPolicyHash"] = ordMintingPolicyHash;
  exports["showMintingPolicyHash"] = showMintingPolicyHash;
  exports["ordValidatorHash"] = ordValidatorHash;
  exports["showValidatorHash"] = showValidatorHash;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Address"] = $PS["Address"] || {};
  var exports = $PS["Address"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Types_Scripts = $PS["Types.Scripts"];                
  var ogmiosAddressToAddress = Serialization_Address.addressFromBech32;
  var enterpriseAddressScriptHash = Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(Serialization_Address.stakeCredentialToScriptHash)(Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)((function () {
      var $1 = Control_Applicative.pure(Data_Maybe.applicativeMaybe);
      return function ($2) {
          return $1(Serialization_Address.enterpriseAddressPaymentCred($2));
      };
  })())(Serialization_Address.enterpriseAddressFromAddress));
  var enterpriseAddressValidatorHash = (function () {
      var $5 = Data_Functor.map(Data_Maybe.functorMaybe)(Types_Scripts.ValidatorHash);
      return function ($6) {
          return $5(enterpriseAddressScriptHash($6));
      };
  })();
  var addressToOgmiosAddress = Serialization_Address.addressBech32;
  exports["addressToOgmiosAddress"] = addressToOgmiosAddress;
  exports["enterpriseAddressValidatorHash"] = enterpriseAddressValidatorHash;
  exports["ogmiosAddressToAddress"] = ogmiosAddressToAddress;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.Reader.Trans"] = $PS["Control.Monad.Reader.Trans"] || {};
  var exports = $PS["Control.Monad.Reader.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect_Class = $PS["Effect.Class"];                
  var ReaderT = function (x) {
      return x;
  };
  var withReaderT = function (f) {
      return function (v) {
          return function ($63) {
              return v(f($63));
          };
      };
  };
  var runReaderT = function (v) {
      return v;
  };
  var monadTransReaderT = {
      lift: function (dictMonad) {
          return function ($64) {
              return ReaderT(Data_Function["const"]($64));
          };
      }
  };
  var mapReaderT = function (f) {
      return function (v) {
          return function ($65) {
              return f(v($65));
          };
      };
  };
  var functorReaderT = function (dictFunctor) {
      return {
          map: (function () {
              var $66 = Data_Functor.map(dictFunctor);
              return function ($67) {
                  return mapReaderT($66($67));
              };
          })()
      };
  };
  var applyReaderT = function (dictApply) {
      return {
          apply: function (v) {
              return function (v1) {
                  return function (r) {
                      return Control_Apply.apply(dictApply)(v(r))(v1(r));
                  };
              };
          },
          Functor0: function () {
              return functorReaderT(dictApply.Functor0());
          }
      };
  };
  var bindReaderT = function (dictBind) {
      return {
          bind: function (v) {
              return function (k) {
                  return function (r) {
                      return Control_Bind.bind(dictBind)(v(r))(function (a) {
                          var v1 = k(a);
                          return v1(r);
                      });
                  };
              };
          },
          Apply0: function () {
              return applyReaderT(dictBind.Apply0());
          }
      };
  };
  var applicativeReaderT = function (dictApplicative) {
      return {
          pure: (function () {
              var $71 = Control_Applicative.pure(dictApplicative);
              return function ($72) {
                  return ReaderT(Data_Function["const"]($71($72)));
              };
          })(),
          Apply0: function () {
              return applyReaderT(dictApplicative.Apply0());
          }
      };
  };
  var monadReaderT = function (dictMonad) {
      return {
          Applicative0: function () {
              return applicativeReaderT(dictMonad.Applicative0());
          },
          Bind1: function () {
              return bindReaderT(dictMonad.Bind1());
          }
      };
  };
  var monadAskReaderT = function (dictMonad) {
      return {
          ask: Control_Applicative.pure(dictMonad.Applicative0()),
          Monad0: function () {
              return monadReaderT(dictMonad);
          }
      };
  };
  var monadEffectReader = function (dictMonadEffect) {
      return {
          liftEffect: (function () {
              var $74 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadEffect.Monad0());
              var $75 = Effect_Class.liftEffect(dictMonadEffect);
              return function ($76) {
                  return $74($75($76));
              };
          })(),
          Monad0: function () {
              return monadReaderT(dictMonadEffect.Monad0());
          }
      };
  };
  var monadThrowReaderT = function (dictMonadThrow) {
      return {
          throwError: (function () {
              var $83 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadThrow.Monad0());
              var $84 = Control_Monad_Error_Class.throwError(dictMonadThrow);
              return function ($85) {
                  return $83($84($85));
              };
          })(),
          Monad0: function () {
              return monadReaderT(dictMonadThrow.Monad0());
          }
      };
  };
  var monadErrorReaderT = function (dictMonadError) {
      return {
          catchError: function (v) {
              return function (h) {
                  return function (r) {
                      return Control_Monad_Error_Class.catchError(dictMonadError)(v(r))(function (e) {
                          var v1 = h(e);
                          return v1(r);
                      });
                  };
              };
          },
          MonadThrow0: function () {
              return monadThrowReaderT(dictMonadError.MonadThrow0());
          }
      };
  };
  exports["runReaderT"] = runReaderT;
  exports["withReaderT"] = withReaderT;
  exports["functorReaderT"] = functorReaderT;
  exports["applicativeReaderT"] = applicativeReaderT;
  exports["bindReaderT"] = bindReaderT;
  exports["monadReaderT"] = monadReaderT;
  exports["monadTransReaderT"] = monadTransReaderT;
  exports["monadEffectReader"] = monadEffectReader;
  exports["monadErrorReaderT"] = monadErrorReaderT;
  exports["monadAskReaderT"] = monadAskReaderT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Aeson.Decode"] = $PS["Aeson.Decode"] || {};
  var exports = $PS["Aeson.Decode"];
  var Aeson = $PS["Aeson"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var value = function (dictDecodeAeson) {
      return Aeson.decodeAeson(dictDecodeAeson);
  };
  var decode = Control_Monad_Reader_Trans.runReaderT;
  exports["decode"] = decode;
  exports["value"] = value;
})(PS);
(function(exports) {
  /* global XMLHttpRequest */
  /* global process */
  "use strict";

  exports._ajax = function () {
    var platformSpecific = { };
    if (typeof module !== "undefined" && module.require && !(typeof process !== "undefined" && process.versions["electron"])) {
      // We are on node.js
      platformSpecific.newXHR = function () {
        var XHR = module.require("xhr2");
        return new XHR();
      };

      platformSpecific.fixupUrl = function (url, xhr) {
        if (xhr.nodejsBaseUrl === null) {
          var urllib = module.require("url");
          var u = urllib.parse(url);
          u.protocol = u.protocol || "http:";
          u.hostname = u.hostname || "localhost";
          return urllib.format(u);
        } else {
          return url || "/";
        }
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    } else {
      // We are in the browser
      platformSpecific.newXHR = function () {
        return new XMLHttpRequest();
      };

      platformSpecific.fixupUrl = function (url) {
        return url || "/";
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    }

    return function (timeoutErrorMessageIdent, requestFailedMessageIdent, mkHeader, options) {
      return function (errback, callback) {
        var xhr = platformSpecific.newXHR();
        var fixedUrl = platformSpecific.fixupUrl(options.url, xhr);
        xhr.open(options.method || "GET", fixedUrl, true, options.username, options.password);
        if (options.headers) {
          try {
            // eslint-disable-next-line no-eq-null,eqeqeq
            for (var i = 0, header; (header = options.headers[i]) != null; i++) {
              xhr.setRequestHeader(header.field, header.value);
            }
          } catch (e) {
            errback(e);
          }
        }
        var onerror = function (msgIdent) {
          return function () {
            errback(new Error(msgIdent));
          };
        };
        xhr.onerror = onerror(requestFailedMessageIdent);
        xhr.ontimeout = onerror(timeoutErrorMessageIdent);
        xhr.onload = function () {
          callback({
            status: xhr.status,
            statusText: xhr.statusText,
            headers: xhr.getAllResponseHeaders().split("\r\n")
              .filter(function (header) {
                return header.length > 0;
              })
              .map(function (header) {
                var i = header.indexOf(":");
                return mkHeader(header.substring(0, i))(header.substring(i + 2));
              }),
            body: platformSpecific.getResponse(xhr)
          });
        };
        xhr.responseType = options.responseType;
        xhr.withCredentials = options.withCredentials;
        xhr.timeout = options.timeout;
        xhr.send(options.content);

        return function (error, cancelErrback, cancelCallback) {
          try {
            xhr.abort();
          } catch (e) {
            return cancelErrback(e);
          }
          return cancelCallback();
        };
      };
    };
  }();
})(PS["Affjax"] = PS["Affjax"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.MediaType.Common"] = $PS["Data.MediaType.Common"] || {};
  var exports = $PS["Data.MediaType.Common"];          
  var applicationJSON = "application/json";
  var applicationFormURLEncoded = "application/x-www-form-urlencoded";
  exports["applicationFormURLEncoded"] = applicationFormURLEncoded;
  exports["applicationJSON"] = applicationJSON;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Affjax.RequestBody"] = $PS["Affjax.RequestBody"] || {};
  var exports = $PS["Affjax.RequestBody"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_MediaType_Common = $PS["Data.MediaType.Common"];                
  var ArrayView = (function () {
      function ArrayView(value0) {
          this.value0 = value0;
      };
      ArrayView.create = function (value0) {
          return new ArrayView(value0);
      };
      return ArrayView;
  })();
  var Blob = (function () {
      function Blob(value0) {
          this.value0 = value0;
      };
      Blob.create = function (value0) {
          return new Blob(value0);
      };
      return Blob;
  })();
  var Document = (function () {
      function Document(value0) {
          this.value0 = value0;
      };
      Document.create = function (value0) {
          return new Document(value0);
      };
      return Document;
  })();
  var $$String = (function () {
      function $$String(value0) {
          this.value0 = value0;
      };
      $$String.create = function (value0) {
          return new $$String(value0);
      };
      return $$String;
  })();
  var FormData = (function () {
      function FormData(value0) {
          this.value0 = value0;
      };
      FormData.create = function (value0) {
          return new FormData(value0);
      };
      return FormData;
  })();
  var FormURLEncoded = (function () {
      function FormURLEncoded(value0) {
          this.value0 = value0;
      };
      FormURLEncoded.create = function (value0) {
          return new FormURLEncoded(value0);
      };
      return FormURLEncoded;
  })();
  var Json = (function () {
      function Json(value0) {
          this.value0 = value0;
      };
      Json.create = function (value0) {
          return new Json(value0);
      };
      return Json;
  })();
  var toMediaType = function (v) {
      if (v instanceof FormURLEncoded) {
          return new Data_Maybe.Just(Data_MediaType_Common.applicationFormURLEncoded);
      };
      if (v instanceof Json) {
          return new Data_Maybe.Just(Data_MediaType_Common.applicationJSON);
      };
      return Data_Maybe.Nothing.value;
  };
  exports["ArrayView"] = ArrayView;
  exports["Blob"] = Blob;
  exports["Document"] = Document;
  exports["String"] = $$String;
  exports["FormData"] = FormData;
  exports["FormURLEncoded"] = FormURLEncoded;
  exports["Json"] = Json;
  exports["toMediaType"] = toMediaType;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Affjax.RequestHeader"] = $PS["Affjax.RequestHeader"] || {};
  var exports = $PS["Affjax.RequestHeader"];
  var Data_Newtype = $PS["Data.Newtype"];          
  var Accept = (function () {
      function Accept(value0) {
          this.value0 = value0;
      };
      Accept.create = function (value0) {
          return new Accept(value0);
      };
      return Accept;
  })();
  var ContentType = (function () {
      function ContentType(value0) {
          this.value0 = value0;
      };
      ContentType.create = function (value0) {
          return new ContentType(value0);
      };
      return ContentType;
  })();
  var RequestHeader = (function () {
      function RequestHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RequestHeader.create = function (value0) {
          return function (value1) {
              return new RequestHeader(value0, value1);
          };
      };
      return RequestHeader;
  })();
  var value = function (v) {
      if (v instanceof Accept) {
          return Data_Newtype.unwrap()(v.value0);
      };
      if (v instanceof ContentType) {
          return Data_Newtype.unwrap()(v.value0);
      };
      if (v instanceof RequestHeader) {
          return v.value1;
      };
      throw new Error("Failed pattern match at Affjax.RequestHeader (line 26, column 1 - line 26, column 33): " + [ v.constructor.name ]);
  };
  var name = function (v) {
      if (v instanceof Accept) {
          return "Accept";
      };
      if (v instanceof ContentType) {
          return "Content-Type";
      };
      if (v instanceof RequestHeader) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Affjax.RequestHeader (line 21, column 1 - line 21, column 32): " + [ v.constructor.name ]);
  };
  exports["Accept"] = Accept;
  exports["ContentType"] = ContentType;
  exports["name"] = name;
  exports["value"] = value;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Affjax.ResponseFormat"] = $PS["Affjax.ResponseFormat"] || {};
  var exports = $PS["Affjax.ResponseFormat"];
  var Control_Category = $PS["Control.Category"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_MediaType_Common = $PS["Data.MediaType.Common"];                
  var $$ArrayBuffer = (function () {
      function $$ArrayBuffer(value0) {
          this.value0 = value0;
      };
      $$ArrayBuffer.create = function (value0) {
          return new $$ArrayBuffer(value0);
      };
      return $$ArrayBuffer;
  })();
  var Blob = (function () {
      function Blob(value0) {
          this.value0 = value0;
      };
      Blob.create = function (value0) {
          return new Blob(value0);
      };
      return Blob;
  })();
  var Document = (function () {
      function Document(value0) {
          this.value0 = value0;
      };
      Document.create = function (value0) {
          return new Document(value0);
      };
      return Document;
  })();
  var Json = (function () {
      function Json(value0) {
          this.value0 = value0;
      };
      Json.create = function (value0) {
          return new Json(value0);
      };
      return Json;
  })();
  var $$String = (function () {
      function $$String(value0) {
          this.value0 = value0;
      };
      $$String.create = function (value0) {
          return new $$String(value0);
      };
      return $$String;
  })();
  var Ignore = (function () {
      function Ignore(value0) {
          this.value0 = value0;
      };
      Ignore.create = function (value0) {
          return new Ignore(value0);
      };
      return Ignore;
  })();
  var toResponseType = function (v) {
      if (v instanceof $$ArrayBuffer) {
          return "arraybuffer";
      };
      if (v instanceof Blob) {
          return "blob";
      };
      if (v instanceof Document) {
          return "document";
      };
      if (v instanceof Json) {
          return "text";
      };
      if (v instanceof $$String) {
          return "text";
      };
      if (v instanceof Ignore) {
          return "";
      };
      throw new Error("Failed pattern match at Affjax.ResponseFormat (line 44, column 3 - line 50, column 19): " + [ v.constructor.name ]);
  };
  var toMediaType = function (v) {
      if (v instanceof Json) {
          return new Data_Maybe.Just(Data_MediaType_Common.applicationJSON);
      };
      return Data_Maybe.Nothing.value;
  };
  var string = new $$String(Control_Category.identity(Control_Category.categoryFn));
  var ignore = new Ignore(Control_Category.identity(Control_Category.categoryFn));
  exports["ArrayBuffer"] = $$ArrayBuffer;
  exports["Blob"] = Blob;
  exports["Document"] = Document;
  exports["Json"] = Json;
  exports["String"] = $$String;
  exports["Ignore"] = Ignore;
  exports["string"] = string;
  exports["ignore"] = ignore;
  exports["toResponseType"] = toResponseType;
  exports["toMediaType"] = toMediaType;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Affjax.ResponseHeader"] = $PS["Affjax.ResponseHeader"] || {};
  var exports = $PS["Affjax.ResponseHeader"];      
  var ResponseHeader = (function () {
      function ResponseHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ResponseHeader.create = function (value0) {
          return function (value1) {
              return new ResponseHeader(value0, value1);
          };
      };
      return ResponseHeader;
  })();
  exports["ResponseHeader"] = ResponseHeader;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.Except"] = $PS["Control.Monad.Except"] || {};
  var exports = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Newtype = $PS["Data.Newtype"];                                                
  var runExcept = (function () {
      var $0 = Data_Newtype.unwrap();
      return function ($1) {
          return $0(Control_Monad_Except_Trans.runExceptT($1));
      };
  })();
  exports["runExcept"] = runExcept;
})(PS);
(function(exports) {
  "use strict";

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];
  exports["split"] = $foreign.split;
  exports["joinWith"] = $foreign.joinWith;
})(PS);
(function(exports) {
  "use strict";

  // A helper which transforms the result ofencodeURIComponent to be compliant
  // with RFC3896, as described in the MDN documentation here:
  //
  // https://web.archive.org/web/20201206001047/https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent
  function toRFC3896(input) {
    return input.replace(/[!'()*]/g, function (c) {
      return "%" + c.charCodeAt(0).toString(16);
    });
  } 

  exports._encodeFormURLComponent = function encode(fail, succeed, input) {
    try {
      return succeed(toRFC3896(encodeURIComponent(input)).replace(/%20/g, "+"));
    } catch (err) {
      return fail(err);
    }
  };
})(PS["JSURI"] = PS["JSURI"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["JSURI"] = $PS["JSURI"] || {};
  var exports = $PS["JSURI"];
  var $foreign = $PS["JSURI"];
  var Data_Function = $PS["Data.Function"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Maybe = $PS["Data.Maybe"];                                                                                                                                  
  var encodeFormURLComponent = Data_Function_Uncurried.runFn3($foreign["_encodeFormURLComponent"])(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  exports["encodeFormURLComponent"] = encodeFormURLComponent;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.FormURLEncoded"] = $PS["Data.FormURLEncoded"] || {};
  var exports = $PS["Data.FormURLEncoded"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Traversable = $PS["Data.Traversable"];
  var JSURI = $PS["JSURI"];
  var toArray = function (v) {
      return v;
  };                                                                                                                 
  var encode = (function () {
      var encodePart = function (v) {
          if (v.value1 instanceof Data_Maybe.Nothing) {
              return JSURI.encodeFormURLComponent(v.value0);
          };
          if (v.value1 instanceof Data_Maybe.Just) {
              return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (key) {
                  return function (val) {
                      return key + ("=" + val);
                  };
              })(JSURI.encodeFormURLComponent(v.value0)))(JSURI.encodeFormURLComponent(v.value1.value0));
          };
          throw new Error("Failed pattern match at Data.FormURLEncoded (line 37, column 18 - line 39, column 116): " + [ v.constructor.name ]);
      };
      var $16 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_String_Common.joinWith("&"));
      var $17 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(encodePart);
      return function ($18) {
          return $16($17(toArray($18)));
      };
  })();
  exports["encode"] = encode;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.HTTP.Method"] = $PS["Data.HTTP.Method"] || {};
  var exports = $PS["Data.HTTP.Method"];
  var Data_Either = $PS["Data.Either"];
  var Data_Show = $PS["Data.Show"];                                  
  var OPTIONS = (function () {
      function OPTIONS() {

      };
      OPTIONS.value = new OPTIONS();
      return OPTIONS;
  })();
  var GET = (function () {
      function GET() {

      };
      GET.value = new GET();
      return GET;
  })();
  var HEAD = (function () {
      function HEAD() {

      };
      HEAD.value = new HEAD();
      return HEAD;
  })();
  var POST = (function () {
      function POST() {

      };
      POST.value = new POST();
      return POST;
  })();
  var PUT = (function () {
      function PUT() {

      };
      PUT.value = new PUT();
      return PUT;
  })();
  var DELETE = (function () {
      function DELETE() {

      };
      DELETE.value = new DELETE();
      return DELETE;
  })();
  var TRACE = (function () {
      function TRACE() {

      };
      TRACE.value = new TRACE();
      return TRACE;
  })();
  var CONNECT = (function () {
      function CONNECT() {

      };
      CONNECT.value = new CONNECT();
      return CONNECT;
  })();
  var PROPFIND = (function () {
      function PROPFIND() {

      };
      PROPFIND.value = new PROPFIND();
      return PROPFIND;
  })();
  var PROPPATCH = (function () {
      function PROPPATCH() {

      };
      PROPPATCH.value = new PROPPATCH();
      return PROPPATCH;
  })();
  var MKCOL = (function () {
      function MKCOL() {

      };
      MKCOL.value = new MKCOL();
      return MKCOL;
  })();
  var COPY = (function () {
      function COPY() {

      };
      COPY.value = new COPY();
      return COPY;
  })();
  var MOVE = (function () {
      function MOVE() {

      };
      MOVE.value = new MOVE();
      return MOVE;
  })();
  var LOCK = (function () {
      function LOCK() {

      };
      LOCK.value = new LOCK();
      return LOCK;
  })();
  var UNLOCK = (function () {
      function UNLOCK() {

      };
      UNLOCK.value = new UNLOCK();
      return UNLOCK;
  })();
  var PATCH = (function () {
      function PATCH() {

      };
      PATCH.value = new PATCH();
      return PATCH;
  })();
  var unCustomMethod = function (v) {
      return v;
  };
  var showMethod = {
      show: function (v) {
          if (v instanceof OPTIONS) {
              return "OPTIONS";
          };
          if (v instanceof GET) {
              return "GET";
          };
          if (v instanceof HEAD) {
              return "HEAD";
          };
          if (v instanceof POST) {
              return "POST";
          };
          if (v instanceof PUT) {
              return "PUT";
          };
          if (v instanceof DELETE) {
              return "DELETE";
          };
          if (v instanceof TRACE) {
              return "TRACE";
          };
          if (v instanceof CONNECT) {
              return "CONNECT";
          };
          if (v instanceof PROPFIND) {
              return "PROPFIND";
          };
          if (v instanceof PROPPATCH) {
              return "PROPPATCH";
          };
          if (v instanceof MKCOL) {
              return "MKCOL";
          };
          if (v instanceof COPY) {
              return "COPY";
          };
          if (v instanceof MOVE) {
              return "MOVE";
          };
          if (v instanceof LOCK) {
              return "LOCK";
          };
          if (v instanceof UNLOCK) {
              return "UNLOCK";
          };
          if (v instanceof PATCH) {
              return "PATCH";
          };
          throw new Error("Failed pattern match at Data.HTTP.Method (line 43, column 1 - line 59, column 23): " + [ v.constructor.name ]);
      }
  };
  var print = Data_Either.either(Data_Show.show(showMethod))(unCustomMethod);
  exports["GET"] = GET;
  exports["POST"] = POST;
  exports["print"] = print;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */

  "use strict";

  exports["null"] = null;

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  exports["toNullable"] = toNullable;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* eslint-disable no-unused-vars, no-prototype-builtins, no-use-before-define, no-unused-labels, no-param-reassign */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports._parAffMap = function (f) {
    return function (aff) {
      return Aff.ParMap(f, aff);
    };
  };

  exports._parAffApply = function (aff1) {
    return function (aff2) {
      return Aff.ParApply(aff1, aff2);
    };
  };

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };

  exports._delay = function () {
    function setDelay(n, k) {
      if (n === 0 && typeof setImmediate !== "undefined") {
        return setImmediate(k);
      } else {
        return setTimeout(k, n);
      }
    }

    function clearDelay(n, t) {
      if (n === 0 && typeof clearImmediate !== "undefined") {
        return clearImmediate(t);
      } else {
        return clearTimeout(t);
      }
    }

    return function (right, ms) {
      return Aff.Async(function (cb) {
        return function () {
          var timer = setDelay(ms, cb(right()));
          return function () {
            return Aff.Sync(function () {
              return right(clearDelay(ms, timer));
            });
          };
        };
      });
    };
  }();

  exports._sequential = Aff.Seq;
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Parallel.Class"] = $PS["Control.Parallel.Class"] || {};
  var exports = $PS["Control.Parallel.Class"];
  var sequential = function (dict) {
      return dict.sequential;
  };
  var parallel = function (dict) {
      return dict.parallel;
  };
  exports["parallel"] = parallel;
  exports["sequential"] = sequential;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Parallel"] = $PS["Control.Parallel"] || {};
  var exports = $PS["Control.Parallel"];
  var Control_Category = $PS["Control.Category"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Foldable = $PS["Data.Foldable"];                      
  var parTraverse_ = function (dictParallel) {
      return function (dictFoldable) {
          return function (f) {
              var $17 = Control_Parallel_Class.sequential(dictParallel);
              var $18 = Data_Foldable.traverse_(dictParallel.Applicative1())(dictFoldable)((function () {
                  var $20 = Control_Parallel_Class.parallel(dictParallel);
                  return function ($21) {
                      return $20(f($21));
                  };
              })());
              return function ($19) {
                  return $17($18($19));
              };
          };
      };
  };
  var parSequence_ = function (dictParallel) {
      return function (dictFoldable) {
          return parTraverse_(dictParallel)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["parSequence_"] = parSequence_;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports._unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartial = $foreign["_unsafePartial"];
  var unsafeCrashWith = function (msg) {
      return unsafePartial(function () {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Parallel = $PS["Control.Parallel"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var functorParAff = {
      map: $foreign["_parAffMap"]
  };
  var functorAff = {
      map: $foreign["_map"]
  };                                    
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 404, column 21 - line 406, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 399, column 20 - line 401, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 394, column 12 - line 396, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var fiber = makeFiber(aff)();
          fiber.run();
          return fiber;
      };
  };
  var launchAff_ = (function () {
      var $40 = Data_Functor["void"](Effect.functorEffect);
      return function ($41) {
          return $40(launchAff($41));
      };
  })();                              
  var delay = function (v) {
      return $foreign["_delay"](Data_Either.Right.create, v);
  };
  var applyParAff = {
      apply: $foreign["_parAffApply"],
      Functor0: function () {
          return functorParAff;
      }
  };
  var monadAff = {
      Applicative0: function () {
          return applicativeAff;
      },
      Bind1: function () {
          return bindAff;
      }
  };
  var bindAff = {
      bind: $foreign["_bind"],
      Apply0: function () {
          return applyAff;
      }
  };
  var applyAff = {
      apply: Control_Monad.ap(monadAff),
      Functor0: function () {
          return functorAff;
      }
  };
  var applicativeAff = {
      pure: $foreign["_pure"],
      Apply0: function () {
          return applyAff;
      }
  };
  var monadEffectAff = {
      liftEffect: $foreign["_liftEffect"],
      Monad0: function () {
          return monadAff;
      }
  };   
  var monadThrowAff = {
      throwError: $foreign["_throwError"],
      Monad0: function () {
          return monadAff;
      }
  };
  var monadErrorAff = {
      catchError: $foreign["_catchError"],
      MonadThrow0: function () {
          return monadThrowAff;
      }
  };
  var parallelAff = {
      parallel: Unsafe_Coerce.unsafeCoerce,
      sequential: $foreign["_sequential"],
      Monad0: function () {
          return monadAff;
      },
      Applicative1: function () {
          return applicativeParAff;
      }
  };
  var applicativeParAff = {
      pure: (function () {
          var $50 = Control_Parallel_Class.parallel(parallelAff);
          var $51 = Control_Applicative.pure(applicativeAff);
          return function ($52) {
              return $50($51($52));
          };
      })(),
      Apply0: function () {
          return applyParAff;
      }
  };
  var semigroupCanceler = {
      append: function (v) {
          return function (v1) {
              return function (err) {
                  return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([ v(err), v1(err) ]);
              };
          };
      }
  };
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  var monoidCanceler = {
      mempty: nonCanceler,
      Semigroup0: function () {
          return semigroupCanceler;
      }
  };
  exports["launchAff_"] = launchAff_;
  exports["delay"] = delay;
  exports["nonCanceler"] = nonCanceler;
  exports["functorAff"] = functorAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadErrorAff"] = monadErrorAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["monoidCanceler"] = monoidCanceler;
  exports["makeAff"] = $foreign.makeAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect.Aff.Compat"] = $PS["Effect.Aff.Compat"] || {};
  var exports = $PS["Effect.Aff.Compat"];
  var Data_Either = $PS["Data.Either"];
  var Effect_Aff = $PS["Effect.Aff"];
  var fromEffectFnAff = function (v) {
      return Effect_Aff.makeAff(function (k) {
          return function __do() {
              var v1 = v(function ($4) {
                  return k(Data_Either.Left.create($4))();
              }, function ($5) {
                  return k(Data_Either.Right.create($5))();
              });
              return function (e) {
                  return Effect_Aff.makeAff(function (k2) {
                      return function __do() {
                          v1(e, function ($6) {
                              return k2(Data_Either.Left.create($6))();
                          }, function ($7) {
                              return k2(Data_Either.Right.create($7))();
                          });
                          return Effect_Aff.nonCanceler;
                      };
                  });
              };
          };
      });
  };
  exports["fromEffectFnAff"] = fromEffectFnAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Affjax"] = $PS["Affjax"] || {};
  var exports = $PS["Affjax"];
  var $foreign = $PS["Affjax"];
  var Affjax_RequestBody = $PS["Affjax.RequestBody"];
  var Affjax_RequestHeader = $PS["Affjax.RequestHeader"];
  var Affjax_ResponseFormat = $PS["Affjax.ResponseFormat"];
  var Affjax_ResponseHeader = $PS["Affjax.ResponseHeader"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Parser = $PS["Data.Argonaut.Parser"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FormURLEncoded = $PS["Data.FormURLEncoded"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HTTP_Method = $PS["Data.HTTP.Method"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Compat = $PS["Effect.Aff.Compat"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Foreign = $PS["Foreign"];                
  var RequestContentError = (function () {
      function RequestContentError(value0) {
          this.value0 = value0;
      };
      RequestContentError.create = function (value0) {
          return new RequestContentError(value0);
      };
      return RequestContentError;
  })();
  var ResponseBodyError = (function () {
      function ResponseBodyError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ResponseBodyError.create = function (value0) {
          return function (value1) {
              return new ResponseBodyError(value0, value1);
          };
      };
      return ResponseBodyError;
  })();
  var TimeoutError = (function () {
      function TimeoutError() {

      };
      TimeoutError.value = new TimeoutError();
      return TimeoutError;
  })();
  var RequestFailedError = (function () {
      function RequestFailedError() {

      };
      RequestFailedError.value = new RequestFailedError();
      return RequestFailedError;
  })();
  var XHROtherError = (function () {
      function XHROtherError(value0) {
          this.value0 = value0;
      };
      XHROtherError.create = function (value0) {
          return new XHROtherError(value0);
      };
      return XHROtherError;
  })();
  var request = function (req) {
      var parseJSON = function (v) {
          if (v === "") {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Argonaut_Core.jsonEmptyObject);
          };
          return Data_Either.either((function () {
              var $51 = Foreign.fail(Data_Identity.monadIdentity);
              return function ($52) {
                  return $51(Foreign.ForeignError.create($52));
              };
          })())(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)))(Data_Argonaut_Parser.jsonParser(v));
      };
      var fromResponse = (function () {
          if (req.responseFormat instanceof Affjax_ResponseFormat["ArrayBuffer"]) {
              return Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("ArrayBuffer");
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat.Blob) {
              return Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("Blob");
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat.Document) {
              return function (x) {
                  return Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("Document")(x))(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("XMLDocument")(x)))(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("HTMLDocument")(x));
              };
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat.Json) {
              return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(function ($53) {
                  return req.responseFormat.value0(parseJSON($53));
              })(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("String"));
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat["String"]) {
              return Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("String");
          };
          if (req.responseFormat instanceof Affjax_ResponseFormat.Ignore) {
              return Data_Function["const"](req.responseFormat.value0(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Unit.unit)));
          };
          throw new Error("Failed pattern match at Affjax (line 257, column 18 - line 265, column 57): " + [ req.responseFormat.constructor.name ]);
      })();
      var extractContent = function (v) {
          if (v instanceof Affjax_RequestBody.ArrayView) {
              return new Data_Either.Right(v.value0(Foreign.unsafeToForeign));
          };
          if (v instanceof Affjax_RequestBody.Blob) {
              return new Data_Either.Right(Foreign.unsafeToForeign(v.value0));
          };
          if (v instanceof Affjax_RequestBody.Document) {
              return new Data_Either.Right(Foreign.unsafeToForeign(v.value0));
          };
          if (v instanceof Affjax_RequestBody["String"]) {
              return new Data_Either.Right(Foreign.unsafeToForeign(v.value0));
          };
          if (v instanceof Affjax_RequestBody.FormData) {
              return new Data_Either.Right(Foreign.unsafeToForeign(v.value0));
          };
          if (v instanceof Affjax_RequestBody.FormURLEncoded) {
              return Data_Either.note("Body contains values that cannot be encoded as application/x-www-form-urlencoded")(Data_Functor.map(Data_Maybe.functorMaybe)(Foreign.unsafeToForeign)(Data_FormURLEncoded.encode(v.value0)));
          };
          if (v instanceof Affjax_RequestBody.Json) {
              return new Data_Either.Right(Foreign.unsafeToForeign(Data_Argonaut_Core.stringify(v.value0)));
          };
          throw new Error("Failed pattern match at Affjax (line 217, column 20 - line 232, column 69): " + [ v.constructor.name ]);
      };
      var addHeader = function (mh) {
          return function (hs) {
              if (mh instanceof Data_Maybe.Just && !Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Function.on(Data_Eq.eq(Data_Eq.eqString))(Affjax_RequestHeader.name)(mh.value0))(hs)) {
                  return Data_Array.snoc(hs)(mh.value0);
              };
              return hs;
          };
      };
      var headers = function (reqContent) {
          return addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Affjax_RequestHeader.ContentType.create)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Affjax_RequestBody.toMediaType)(reqContent)))(addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Affjax_RequestHeader.Accept.create)(Affjax_ResponseFormat.toMediaType(req.responseFormat)))(req.headers));
      };
      var ajaxRequest = function (v) {
          return {
              method: Data_HTTP_Method.print(req.method),
              url: req.url,
              headers: Data_Functor.map(Data_Functor.functorArray)(function (h) {
                  return {
                      field: Affjax_RequestHeader.name(h),
                      value: Affjax_RequestHeader.value(h)
                  };
              })(headers(req.content)),
              content: v,
              responseType: Affjax_ResponseFormat.toResponseType(req.responseFormat),
              username: Data_Nullable.toNullable(req.username),
              password: Data_Nullable.toNullable(req.password),
              withCredentials: req.withCredentials,
              timeout: Data_Maybe.fromMaybe(0.0)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
                  return v1;
              })(req.timeout))
          };
      };
      var send = function (content) {
          return Data_Functor.mapFlipped(Effect_Aff.functorAff)(Control_Monad_Error_Class["try"](Effect_Aff.monadErrorAff)(Effect_Aff_Compat.fromEffectFnAff($foreign["_ajax"]("AffjaxTimeoutErrorMessageIdent", "AffjaxRequestFailedMessageIdent", Affjax_ResponseHeader.ResponseHeader.create, ajaxRequest(content)))))(function (v) {
              if (v instanceof Data_Either.Right) {
                  var v1 = Control_Monad_Except.runExcept(fromResponse(v.value0.body));
                  if (v1 instanceof Data_Either.Left) {
                      return new Data_Either.Left(new ResponseBodyError(Data_List_NonEmpty.head(v1.value0), v.value0));
                  };
                  if (v1 instanceof Data_Either.Right) {
                      return new Data_Either.Right({
                          body: v1.value0,
                          headers: v.value0.headers,
                          status: v.value0.status,
                          statusText: v.value0.statusText
                      });
                  };
                  throw new Error("Failed pattern match at Affjax (line 193, column 9 - line 195, column 52): " + [ v1.constructor.name ]);
              };
              if (v instanceof Data_Either.Left) {
                  var message = Effect_Exception.message(v.value0);
                  return new Data_Either.Left((function () {
                      var $38 = message === "AffjaxTimeoutErrorMessageIdent";
                      if ($38) {
                          return TimeoutError.value;
                      };
                      var $39 = message === "AffjaxRequestFailedMessageIdent";
                      if ($39) {
                          return RequestFailedError.value;
                      };
                      return new XHROtherError(v.value0);
                  })());
              };
              throw new Error("Failed pattern match at Affjax (line 191, column 137 - line 201, column 33): " + [ v.constructor.name ]);
          });
      };
      if (req.content instanceof Data_Maybe.Nothing) {
          return send(Data_Nullable.toNullable(Data_Maybe.Nothing.value));
      };
      if (req.content instanceof Data_Maybe.Just) {
          var v = extractContent(req.content.value0);
          if (v instanceof Data_Either.Right) {
              return send(Data_Nullable.toNullable(new Data_Maybe.Just(v.value0)));
          };
          if (v instanceof Data_Either.Left) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Either.Left(new RequestContentError(v.value0)));
          };
          throw new Error("Failed pattern match at Affjax (line 183, column 7 - line 187, column 48): " + [ v.constructor.name ]);
      };
      throw new Error("Failed pattern match at Affjax (line 179, column 3 - line 187, column 48): " + [ req.content.constructor.name ]);
  };
  var printError = function (v) {
      if (v instanceof RequestContentError) {
          return "There was a problem with the request content: " + v.value0;
      };
      if (v instanceof ResponseBodyError) {
          return "There was a problem with the response body: " + Foreign.renderForeignError(v.value0);
      };
      if (v instanceof TimeoutError) {
          return "There was a problem making the request: timeout";
      };
      if (v instanceof RequestFailedError) {
          return "There was a problem making the request: request failed";
      };
      if (v instanceof XHROtherError) {
          return "There was a problem making the request: " + Effect_Exception.message(v.value0);
      };
      throw new Error("Failed pattern match at Affjax (line 97, column 14 - line 107, column 66): " + [ v.constructor.name ]);
  };
  var defaultRequest = {
      method: new Data_Either.Left(Data_HTTP_Method.GET.value),
      url: "/",
      headers: [  ],
      content: Data_Maybe.Nothing.value,
      username: Data_Maybe.Nothing.value,
      password: Data_Maybe.Nothing.value,
      withCredentials: false,
      responseFormat: Affjax_ResponseFormat.ignore,
      timeout: Data_Maybe.Nothing.value
  };
  exports["defaultRequest"] = defaultRequest;
  exports["printError"] = printError;
  exports["request"] = request;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Ansi.Codes"] = $PS["Ansi.Codes"] || {};
  var exports = $PS["Ansi.Codes"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Show = $PS["Data.Show"];                                
  var Bold = (function () {
      function Bold() {

      };
      Bold.value = new Bold();
      return Bold;
  })();
  var Dim = (function () {
      function Dim() {

      };
      Dim.value = new Dim();
      return Dim;
  })();
  var Italic = (function () {
      function Italic() {

      };
      Italic.value = new Italic();
      return Italic;
  })();
  var Underline = (function () {
      function Underline() {

      };
      Underline.value = new Underline();
      return Underline;
  })();
  var Inverse = (function () {
      function Inverse() {

      };
      Inverse.value = new Inverse();
      return Inverse;
  })();
  var Strikethrough = (function () {
      function Strikethrough() {

      };
      Strikethrough.value = new Strikethrough();
      return Strikethrough;
  })();
  var ToEnd = (function () {
      function ToEnd() {

      };
      ToEnd.value = new ToEnd();
      return ToEnd;
  })();
  var FromBeginning = (function () {
      function FromBeginning() {

      };
      FromBeginning.value = new FromBeginning();
      return FromBeginning;
  })();
  var Entire = (function () {
      function Entire() {

      };
      Entire.value = new Entire();
      return Entire;
  })();
  var Black = (function () {
      function Black() {

      };
      Black.value = new Black();
      return Black;
  })();
  var Red = (function () {
      function Red() {

      };
      Red.value = new Red();
      return Red;
  })();
  var Green = (function () {
      function Green() {

      };
      Green.value = new Green();
      return Green;
  })();
  var Yellow = (function () {
      function Yellow() {

      };
      Yellow.value = new Yellow();
      return Yellow;
  })();
  var Blue = (function () {
      function Blue() {

      };
      Blue.value = new Blue();
      return Blue;
  })();
  var Magenta = (function () {
      function Magenta() {

      };
      Magenta.value = new Magenta();
      return Magenta;
  })();
  var Cyan = (function () {
      function Cyan() {

      };
      Cyan.value = new Cyan();
      return Cyan;
  })();
  var White = (function () {
      function White() {

      };
      White.value = new White();
      return White;
  })();
  var BrightBlack = (function () {
      function BrightBlack() {

      };
      BrightBlack.value = new BrightBlack();
      return BrightBlack;
  })();
  var BrightRed = (function () {
      function BrightRed() {

      };
      BrightRed.value = new BrightRed();
      return BrightRed;
  })();
  var BrightGreen = (function () {
      function BrightGreen() {

      };
      BrightGreen.value = new BrightGreen();
      return BrightGreen;
  })();
  var BrightYellow = (function () {
      function BrightYellow() {

      };
      BrightYellow.value = new BrightYellow();
      return BrightYellow;
  })();
  var BrightBlue = (function () {
      function BrightBlue() {

      };
      BrightBlue.value = new BrightBlue();
      return BrightBlue;
  })();
  var BrightMagenta = (function () {
      function BrightMagenta() {

      };
      BrightMagenta.value = new BrightMagenta();
      return BrightMagenta;
  })();
  var BrightCyan = (function () {
      function BrightCyan() {

      };
      BrightCyan.value = new BrightCyan();
      return BrightCyan;
  })();
  var BrightWhite = (function () {
      function BrightWhite() {

      };
      BrightWhite.value = new BrightWhite();
      return BrightWhite;
  })();
  var Reset = (function () {
      function Reset() {

      };
      Reset.value = new Reset();
      return Reset;
  })();
  var PMode = (function () {
      function PMode(value0) {
          this.value0 = value0;
      };
      PMode.create = function (value0) {
          return new PMode(value0);
      };
      return PMode;
  })();
  var PForeground = (function () {
      function PForeground(value0) {
          this.value0 = value0;
      };
      PForeground.create = function (value0) {
          return new PForeground(value0);
      };
      return PForeground;
  })();
  var PBackground = (function () {
      function PBackground(value0) {
          this.value0 = value0;
      };
      PBackground.create = function (value0) {
          return new PBackground(value0);
      };
      return PBackground;
  })();
  var Up = (function () {
      function Up(value0) {
          this.value0 = value0;
      };
      Up.create = function (value0) {
          return new Up(value0);
      };
      return Up;
  })();
  var Down = (function () {
      function Down(value0) {
          this.value0 = value0;
      };
      Down.create = function (value0) {
          return new Down(value0);
      };
      return Down;
  })();
  var Forward = (function () {
      function Forward(value0) {
          this.value0 = value0;
      };
      Forward.create = function (value0) {
          return new Forward(value0);
      };
      return Forward;
  })();
  var Back = (function () {
      function Back(value0) {
          this.value0 = value0;
      };
      Back.create = function (value0) {
          return new Back(value0);
      };
      return Back;
  })();
  var NextLine = (function () {
      function NextLine(value0) {
          this.value0 = value0;
      };
      NextLine.create = function (value0) {
          return new NextLine(value0);
      };
      return NextLine;
  })();
  var PreviousLine = (function () {
      function PreviousLine(value0) {
          this.value0 = value0;
      };
      PreviousLine.create = function (value0) {
          return new PreviousLine(value0);
      };
      return PreviousLine;
  })();
  var HorizontalAbsolute = (function () {
      function HorizontalAbsolute(value0) {
          this.value0 = value0;
      };
      HorizontalAbsolute.create = function (value0) {
          return new HorizontalAbsolute(value0);
      };
      return HorizontalAbsolute;
  })();
  var Position = (function () {
      function Position(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Position.create = function (value0) {
          return function (value1) {
              return new Position(value0, value1);
          };
      };
      return Position;
  })();
  var EraseData = (function () {
      function EraseData(value0) {
          this.value0 = value0;
      };
      EraseData.create = function (value0) {
          return new EraseData(value0);
      };
      return EraseData;
  })();
  var EraseLine = (function () {
      function EraseLine(value0) {
          this.value0 = value0;
      };
      EraseLine.create = function (value0) {
          return new EraseLine(value0);
      };
      return EraseLine;
  })();
  var ScrollUp = (function () {
      function ScrollUp(value0) {
          this.value0 = value0;
      };
      ScrollUp.create = function (value0) {
          return new ScrollUp(value0);
      };
      return ScrollUp;
  })();
  var ScrollDown = (function () {
      function ScrollDown(value0) {
          this.value0 = value0;
      };
      ScrollDown.create = function (value0) {
          return new ScrollDown(value0);
      };
      return ScrollDown;
  })();
  var Graphics = (function () {
      function Graphics(value0) {
          this.value0 = value0;
      };
      Graphics.create = function (value0) {
          return new Graphics(value0);
      };
      return Graphics;
  })();
  var SavePosition = (function () {
      function SavePosition() {

      };
      SavePosition.value = new SavePosition();
      return SavePosition;
  })();
  var RestorePosition = (function () {
      function RestorePosition() {

      };
      RestorePosition.value = new RestorePosition();
      return RestorePosition;
  })();
  var QueryPosition = (function () {
      function QueryPosition() {

      };
      QueryPosition.value = new QueryPosition();
      return QueryPosition;
  })();
  var HideCursor = (function () {
      function HideCursor() {

      };
      HideCursor.value = new HideCursor();
      return HideCursor;
  })();
  var ShowCursor = (function () {
      function ShowCursor() {

      };
      ShowCursor.value = new ShowCursor();
      return ShowCursor;
  })();
  var prefix = "\x1b[";
  var eraseParamToString = function (ep) {
      if (ep instanceof ToEnd) {
          return "0";
      };
      if (ep instanceof FromBeginning) {
          return "1";
      };
      if (ep instanceof Entire) {
          return "2";
      };
      throw new Error("Failed pattern match at Ansi.Codes (line 95, column 3 - line 98, column 25): " + [ ep.constructor.name ]);
  };
  var colorSuffix = "m";
  var colorCode = function (c) {
      if (c instanceof Black) {
          return 30;
      };
      if (c instanceof Red) {
          return 31;
      };
      if (c instanceof Green) {
          return 32;
      };
      if (c instanceof Yellow) {
          return 33;
      };
      if (c instanceof Blue) {
          return 34;
      };
      if (c instanceof Magenta) {
          return 35;
      };
      if (c instanceof Cyan) {
          return 36;
      };
      if (c instanceof White) {
          return 37;
      };
      if (c instanceof BrightBlack) {
          return 90;
      };
      if (c instanceof BrightRed) {
          return 91;
      };
      if (c instanceof BrightGreen) {
          return 92;
      };
      if (c instanceof BrightYellow) {
          return 93;
      };
      if (c instanceof BrightBlue) {
          return 94;
      };
      if (c instanceof BrightMagenta) {
          return 95;
      };
      if (c instanceof BrightCyan) {
          return 96;
      };
      if (c instanceof BrightWhite) {
          return 97;
      };
      throw new Error("Failed pattern match at Ansi.Codes (line 173, column 3 - line 189, column 22): " + [ c.constructor.name ]);
  };
  var codeForRenderingMode = function (m) {
      if (m instanceof Bold) {
          return 1;
      };
      if (m instanceof Dim) {
          return 2;
      };
      if (m instanceof Italic) {
          return 3;
      };
      if (m instanceof Underline) {
          return 4;
      };
      if (m instanceof Inverse) {
          return 7;
      };
      if (m instanceof Strikethrough) {
          return 9;
      };
      throw new Error("Failed pattern match at Ansi.Codes (line 138, column 3 - line 144, column 23): " + [ m.constructor.name ]);
  };
  var graphicsParamToString = function (gp) {
      if (gp instanceof Reset) {
          return "0";
      };
      if (gp instanceof PMode) {
          return Data_Show.show(Data_Show.showInt)(codeForRenderingMode(gp.value0));
      };
      if (gp instanceof PForeground) {
          return Data_Show.show(Data_Show.showInt)(colorCode(gp.value0));
      };
      if (gp instanceof PBackground) {
          return Data_Show.show(Data_Show.showInt)(colorCode(gp.value0) + 10 | 0);
      };
      throw new Error("Failed pattern match at Ansi.Codes (line 116, column 3 - line 120, column 45): " + [ gp.constructor.name ]);
  };
  var escapeCodeToString = (function () {
      var go = function (c) {
          if (c instanceof Up) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "A";
          };
          if (c instanceof Down) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "B";
          };
          if (c instanceof Forward) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "C";
          };
          if (c instanceof Back) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "D";
          };
          if (c instanceof NextLine) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "E";
          };
          if (c instanceof PreviousLine) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "F";
          };
          if (c instanceof HorizontalAbsolute) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "G";
          };
          if (c instanceof Position) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + (";" + (Data_Show.show(Data_Show.showInt)(c.value1) + "H"));
          };
          if (c instanceof EraseData) {
              return eraseParamToString(c.value0) + "J";
          };
          if (c instanceof EraseLine) {
              return eraseParamToString(c.value0) + "K";
          };
          if (c instanceof ScrollUp) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "S";
          };
          if (c instanceof ScrollDown) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "T";
          };
          if (c instanceof Graphics) {
              return Data_Foldable.intercalate(Data_List_Types.foldableNonEmptyList)(Data_Monoid.monoidString)(";")(Data_Functor.map(Data_List_Types.functorNonEmptyList)(graphicsParamToString)(c.value0)) + colorSuffix;
          };
          if (c instanceof SavePosition) {
              return "s";
          };
          if (c instanceof RestorePosition) {
              return "u";
          };
          if (c instanceof QueryPosition) {
              return "6n";
          };
          if (c instanceof HideCursor) {
              return "?25l";
          };
          if (c instanceof ShowCursor) {
              return "?25h";
          };
          throw new Error("Failed pattern match at Ansi.Codes (line 53, column 5 - line 71, column 37): " + [ c.constructor.name ]);
      };
      return function ($624) {
          return (function (v) {
              return prefix + v;
          })(go($624));
      };
  })();
  exports["Graphics"] = Graphics;
  exports["escapeCodeToString"] = escapeCodeToString;
  exports["Reset"] = Reset;
  exports["PMode"] = PMode;
  exports["PForeground"] = PForeground;
  exports["Bold"] = Bold;
  exports["Red"] = Red;
  exports["Yellow"] = Yellow;
  exports["Blue"] = Blue;
  exports["Cyan"] = Cyan;
  exports["White"] = White;
  exports["BrightBlack"] = BrightBlack;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Ansi.Output"] = $PS["Ansi.Output"] || {};
  var exports = $PS["Ansi.Output"];
  var Ansi_Codes = $PS["Ansi.Codes"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_List_Types = $PS["Data.List.Types"];                
  var withGraphics = function (params) {
      return function (text) {
          return Ansi_Codes.escapeCodeToString(new Ansi_Codes.Graphics(params)) + (text + Ansi_Codes.escapeCodeToString(new Ansi_Codes.Graphics(Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(Ansi_Codes.Reset.value))));
      };
  };                                                                                                                              
  var foreground = function (c) {
      return Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(new Ansi_Codes.PForeground(c));
  };                                                                                                                      
  var bold = Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(new Ansi_Codes.PMode(Ansi_Codes.Bold.value));
  exports["withGraphics"] = withGraphics;
  exports["bold"] = bold;
  exports["foreground"] = foreground;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["CBOR"] = $PS["CBOR"] || {};
  var exports = $PS["CBOR"];
  var hello = "5901a4010000323232323232323232323222223233322232323253330103370e90000010991919191919299980b19b87480080084c8c8c94ccc064cdc3a400000426666446666030466e3c00cdd7180f98100008009111801191811181098118021bad3021302030220031225001375c60380026eb0c070c8c070c070c070c070c058004c06c01c8c94ccc06ccdc399b80011012001149858dd68008b0b180e801180e8009baa32301a3013301b0013253330160011613253330170011301b0021630190013332223333016301a0010032332301922533301c00114bd70099299980f1802000899aba0001300330200021300330200023020001301b32301e301f001301d301c301e001003163758603200a6eb0c064010c06400458c068008c068004dd5180b180a801980a000980a980a000980a0020a4c602800460280026ea8008dd68020018011bad00423007300700130012225333005001122500115333006300230090011223002300b00313300300230080012323002233002002001230022330020020015573eae6888cdd780118021802800aba25742460046ea800555cf2ab9d01";
  exports["hello"] = hello;
})(PS);
(function(exports) {
  // global exports
  "use strict";

  exports.now = function() {
    return new Date();
  };

  exports.dateMethod = function(method, date) {
    return date[method]();
  };

  exports.dateMethodEff = function(method, date) {
    return function() {
      return date[method]();
    };
  };

  exports.parse = function(dateString) {
    return function() {
      return new Date(dateString);
    };
  };
})(PS["Data.JSDate"] = PS["Data.JSDate"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.JSDate"] = $PS["Data.JSDate"] || {};
  var exports = $PS["Data.JSDate"];
  var $foreign = $PS["Data.JSDate"];                                           
  var toISOString = function (dt) {
      return $foreign.dateMethodEff("toISOString", dt);
  };
  var getTime = function (dt) {
      return $foreign.dateMethod("getTime", dt);
  };
  exports["getTime"] = getTime;
  exports["toISOString"] = toISOString;
  exports["now"] = $foreign.now;
  exports["parse"] = $foreign.parse;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Log.Level"] = $PS["Data.Log.Level"] || {};
  var exports = $PS["Data.Log.Level"];
  var Data_Ordering = $PS["Data.Ordering"];                
  var Trace = (function () {
      function Trace() {

      };
      Trace.value = new Trace();
      return Trace;
  })();
  var Debug = (function () {
      function Debug() {

      };
      Debug.value = new Debug();
      return Debug;
  })();
  var Info = (function () {
      function Info() {

      };
      Info.value = new Info();
      return Info;
  })();
  var Warn = (function () {
      function Warn() {

      };
      Warn.value = new Warn();
      return Warn;
  })();
  var $$Error = (function () {
      function $$Error() {

      };
      $$Error.value = new $$Error();
      return $$Error;
  })();
  var eqLogLevel = {
      eq: function (x) {
          return function (y) {
              if (x instanceof Trace && y instanceof Trace) {
                  return true;
              };
              if (x instanceof Debug && y instanceof Debug) {
                  return true;
              };
              if (x instanceof Info && y instanceof Info) {
                  return true;
              };
              if (x instanceof Warn && y instanceof Warn) {
                  return true;
              };
              if (x instanceof $$Error && y instanceof $$Error) {
                  return true;
              };
              return false;
          };
      }
  };
  var ordLogLevel = {
      compare: function (x) {
          return function (y) {
              if (x instanceof Trace && y instanceof Trace) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Trace) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Trace) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Debug && y instanceof Debug) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Debug) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Debug) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Info && y instanceof Info) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Info) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Info) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Warn && y instanceof Warn) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Warn) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Warn) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof $$Error && y instanceof $$Error) {
                  return Data_Ordering.EQ.value;
              };
              throw new Error("Failed pattern match at Data.Log.Level (line 9, column 1 - line 9, column 44): " + [ x.constructor.name, y.constructor.name ]);
          };
      },
      Eq0: function () {
          return eqLogLevel;
      }
  };
  exports["Trace"] = Trace;
  exports["Debug"] = Debug;
  exports["Info"] = Info;
  exports["Warn"] = Warn;
  exports["Error"] = $$Error;
  exports["ordLogLevel"] = ordLogLevel;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.Logger.Class"] = $PS["Control.Monad.Logger.Class"] || {};
  var exports = $PS["Control.Monad.Logger.Class"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_JSDate = $PS["Data.JSDate"];
  var Data_Log_Level = $PS["Data.Log.Level"];
  var Effect_Class = $PS["Effect.Class"];                
  var log = function (dict) {
      return dict.log;
  };
  var log$prime = function (dictMonadLogger) {
      return function (level) {
          return function (tags) {
              return function (message) {
                  return Control_Bind.bind(((dictMonadLogger.MonadEffect0()).Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadLogger.MonadEffect0())(Data_JSDate.now))((function () {
                      var $23 = log(dictMonadLogger);
                      return function ($24) {
                          return $23((function (v) {
                              return {
                                  level: level,
                                  message: message,
                                  tags: tags,
                                  timestamp: v
                              };
                          })($24));
                      };
                  })());
              };
          };
      };
  };
  var trace = function (dictMonadLogger) {
      return log$prime(dictMonadLogger)(Data_Log_Level.Trace.value);
  };
  var monadLoggerExceptT = function (dictMonadLogger) {
      return {
          log: (function () {
              var $28 = Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)((dictMonadLogger.MonadEffect0()).Monad0());
              var $29 = log(dictMonadLogger);
              return function ($30) {
                  return $28($29($30));
              };
          })(),
          MonadEffect0: function () {
              return Control_Monad_Except_Trans.monadEffectExceptT(dictMonadLogger.MonadEffect0());
          }
      };
  };
  var monadLoggerReaderT = function (dictMonadLogger) {
      return {
          log: (function () {
              var $40 = Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)((dictMonadLogger.MonadEffect0()).Monad0());
              var $41 = log(dictMonadLogger);
              return function ($42) {
                  return $40($41($42));
              };
          })(),
          MonadEffect0: function () {
              return Control_Monad_Reader_Trans.monadEffectReader(dictMonadLogger.MonadEffect0());
          }
      };
  };
  var info = function (dictMonadLogger) {
      return log$prime(dictMonadLogger)(Data_Log_Level.Info.value);
  };
  exports["trace"] = trace;
  exports["info"] = info;
  exports["monadLoggerExceptT"] = monadLoggerExceptT;
  exports["monadLoggerReaderT"] = monadLoggerReaderT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect.Aff.Class"] = $PS["Effect.Aff.Class"] || {};
  var exports = $PS["Effect.Aff.Class"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Effect_Aff = $PS["Effect.Aff"];                
  var monadAffAff = {
      liftAff: Control_Category.identity(Control_Category.categoryFn),
      MonadEffect0: function () {
          return Effect_Aff.monadEffectAff;
      }
  };
  var liftAff = function (dict) {
      return dict.liftAff;
  };
  var monadAffReader = function (dictMonadAff) {
      return {
          liftAff: (function () {
              var $26 = Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)((dictMonadAff.MonadEffect0()).Monad0());
              var $27 = liftAff(dictMonadAff);
              return function ($28) {
                  return $26($27($28));
              };
          })(),
          MonadEffect0: function () {
              return Control_Monad_Reader_Trans.monadEffectReader(dictMonadAff.MonadEffect0());
          }
      };
  };
  var monadAffState = function (dictMonadAff) {
      return {
          liftAff: (function () {
              var $29 = Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)((dictMonadAff.MonadEffect0()).Monad0());
              var $30 = liftAff(dictMonadAff);
              return function ($31) {
                  return $29($30($31));
              };
          })(),
          MonadEffect0: function () {
              return Control_Monad_State_Trans.monadEffectState(dictMonadAff.MonadEffect0());
          }
      };
  };
  exports["liftAff"] = liftAff;
  exports["monadAffAff"] = monadAffAff;
  exports["monadAffReader"] = monadAffReader;
  exports["monadAffState"] = monadAffState;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Monad.Logger.Trans"] = $PS["Control.Monad.Logger.Trans"] || {};
  var exports = $PS["Control.Monad.Logger.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Class = $PS["Effect.Class"];                
  var LoggerT = function (x) {
      return x;
  };
  var runLoggerT = function (v) {
      return v;
  };
  var monadTransLoggerT = {
      lift: function (dictMonad) {
          return function ($33) {
              return LoggerT(Data_Function["const"]($33));
          };
      }
  };
  var mapLoggerT = function (f) {
      return function (v) {
          return function ($34) {
              return f(v($34));
          };
      };
  };
  var functorLoggerT = function (dictFunctor) {
      return {
          map: (function () {
              var $35 = Data_Functor.map(dictFunctor);
              return function ($36) {
                  return mapLoggerT($35($36));
              };
          })()
      };
  };
  var monadLoggerT = function (dictMonad) {
      return {
          Applicative0: function () {
              return applicativeLoggerT(dictMonad);
          },
          Bind1: function () {
              return bindLoggerT(dictMonad);
          }
      };
  };
  var bindLoggerT = function (dictMonad) {
      return {
          bind: function (v) {
              return function (f) {
                  return function (l) {
                      return Control_Bind.bind(dictMonad.Bind1())(v(l))((function () {
                          var $37 = Data_Newtype.unwrap();
                          return function ($38) {
                              return (function (v1) {
                                  return v1(l);
                              })($37(f($38)));
                          };
                      })());
                  };
              };
          },
          Apply0: function () {
              return applyLoggerT(dictMonad);
          }
      };
  };
  var applyLoggerT = function (dictMonad) {
      return {
          apply: Control_Monad.ap(monadLoggerT(dictMonad)),
          Functor0: function () {
              return functorLoggerT(((dictMonad.Bind1()).Apply0()).Functor0());
          }
      };
  };
  var applicativeLoggerT = function (dictMonad) {
      return {
          pure: (function () {
              var $39 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($40) {
                  return LoggerT(Data_Function["const"]($39($40)));
              };
          })(),
          Apply0: function () {
              return applyLoggerT(dictMonad);
          }
      };
  };
  var monadEffectLoggerT = function (dictMonadEffect) {
      return {
          liftEffect: (function () {
              var $43 = Control_Monad_Trans_Class.lift(monadTransLoggerT)(dictMonadEffect.Monad0());
              var $44 = Effect_Class.liftEffect(dictMonadEffect);
              return function ($45) {
                  return $43($44($45));
              };
          })(),
          Monad0: function () {
              return monadLoggerT(dictMonadEffect.Monad0());
          }
      };
  };
  var monadAffLoggerT = function (dictMonadAff) {
      return {
          liftAff: (function () {
              var $46 = Control_Monad_Trans_Class.lift(monadTransLoggerT)((dictMonadAff.MonadEffect0()).Monad0());
              var $47 = Effect_Aff_Class.liftAff(dictMonadAff);
              return function ($48) {
                  return $46($47($48));
              };
          })(),
          MonadEffect0: function () {
              return monadEffectLoggerT(dictMonadAff.MonadEffect0());
          }
      };
  };
  var monadLoggerLoggerT = function (dictMonadEffect) {
      return {
          log: function (message) {
              return function (v) {
                  return v(message);
              };
          },
          MonadEffect0: function () {
              return monadEffectLoggerT(dictMonadEffect);
          }
      };
  };
  var monadThrowLoggerT = function (dictMonadThrow) {
      return {
          throwError: (function () {
              var $52 = Control_Monad_Trans_Class.lift(monadTransLoggerT)(dictMonadThrow.Monad0());
              var $53 = Control_Monad_Error_Class.throwError(dictMonadThrow);
              return function ($54) {
                  return $52($53($54));
              };
          })(),
          Monad0: function () {
              return monadLoggerT(dictMonadThrow.Monad0());
          }
      };
  };
  var monadErrorLoggerT = function (dictMonadError) {
      return {
          catchError: function (v) {
              return function (h) {
                  return function (l) {
                      return Control_Monad_Error_Class.catchError(dictMonadError)(v(l))((function () {
                          var $55 = Data_Newtype.unwrap();
                          return function ($56) {
                              return (function (v1) {
                                  return v1(l);
                              })($55(h($56)));
                          };
                      })());
                  };
              };
          },
          MonadThrow0: function () {
              return monadThrowLoggerT(dictMonadError.MonadThrow0());
          }
      };
  };
  exports["runLoggerT"] = runLoggerT;
  exports["functorLoggerT"] = functorLoggerT;
  exports["applicativeLoggerT"] = applicativeLoggerT;
  exports["bindLoggerT"] = bindLoggerT;
  exports["monadLoggerT"] = monadLoggerT;
  exports["monadEffectLoggerT"] = monadEffectLoggerT;
  exports["monadAffLoggerT"] = monadAffLoggerT;
  exports["monadLoggerLoggerT"] = monadLoggerLoggerT;
  exports["monadErrorLoggerT"] = monadErrorLoggerT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 626, column 1 - line 626, column 40): " + [ v.constructor.name ]);
  };
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return new Data_Maybe.Just(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return new Data_Maybe.Just(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 591, column 18 - line 600, column 71): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 590, column 3 - line 590, column 19): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var toAscArray = toUnfoldable(Data_Unfoldable.unfoldableArray);
  var showMap = function (dictShow) {
      return function (dictShow1) {
          return {
              show: function (m) {
                  return "(fromFoldable " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(dictShow)(dictShow1)))(toAscArray(m)) + ")");
              }
          };
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 211, column 5 - line 211, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var keys = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 620, column 1 - line 620, column 38): " + [ v.constructor.name ]);
  };
  var isEmpty = function (v) {
      if (v instanceof Leaf) {
          return true;
      };
      return false;
  };
  var functorMap = {
      map: function (v) {
          return function (v1) {
              if (v1 instanceof Leaf) {
                  return Leaf.value;
              };
              if (v1 instanceof Two) {
                  return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
              };
              if (v1 instanceof Three) {
                  return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
              };
              throw new Error("Failed pattern match at Data.Map.Internal (line 101, column 1 - line 104, column 110): " + [ v.constructor.name, v1.constructor.name ]);
          };
      }
  };
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 432, column 3 - line 437, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 429, column 1 - line 429, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 468, column 5 - line 473, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 465, column 3 - line 465, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done1 = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 448, column 3 - line 448, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function ($copy_ctxs) {
              return function ($copy_tree) {
                  var $tco_var_ctxs = $copy_ctxs;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctxs, tree) {
                      if (ctxs instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return tree;
                      };
                      if (ctxs instanceof Data_List_Types.Cons) {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 525, column 9 - line 542, column 136): " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 522, column 5 - line 542, column 136): " + [ ctxs.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                  };
                  return $tco_result;
              };
          };
          var removeMaxNode = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          $tco_done1 = true;
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          $tco_done1 = true;
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 554, column 5 - line 558, column 107): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          var maxNode = function ($copy_m) {
              var $tco_done2 = false;
              var $tco_result;
              function $tco_loop(m) {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      $tco_done2 = true;
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      $copy_m = m.value3;
                      return;
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      $tco_done2 = true;
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      $copy_m = m.value6;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 545, column 33 - line 549, column 45): " + [ m.constructor.name ]);
              };
              while (!$tco_done2) {
                  $tco_result = $tco_loop($copy_m);
              };
              return $tco_result;
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done3 = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done3 = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 495, column 34 - line 518, column 80): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done3) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var foldableMap = {
      foldl: function (f) {
          return function (z) {
              return function (m) {
                  return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
              };
          };
      },
      foldr: function (f) {
          return function (z) {
              return function (m) {
                  return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
              };
          };
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return function (m) {
                  return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
              };
          };
      }
  };
  var traversableMap = {
      traverse: function (dictApplicative) {
          return function (v) {
              return function (v1) {
                  if (v1 instanceof Leaf) {
                      return Control_Applicative.pure(dictApplicative)(Leaf.value);
                  };
                  if (v1 instanceof Two) {
                      return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Two.create)(Data_Traversable.traverse(traversableMap)(dictApplicative)(v)(v1.value0)))(Control_Applicative.pure(dictApplicative)(v1.value1)))(v(v1.value2)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(v)(v1.value3));
                  };
                  if (v1 instanceof Three) {
                      return Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Three.create)(Data_Traversable.traverse(traversableMap)(dictApplicative)(v)(v1.value0)))(Control_Applicative.pure(dictApplicative)(v1.value1)))(v(v1.value2)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(v)(v1.value3)))(Control_Applicative.pure(dictApplicative)(v1.value4)))(v(v1.value5)))(Data_Traversable.traverse(traversableMap)(dictApplicative)(v)(v1.value6));
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 127, column 1 - line 142, column 31): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      },
      sequence: function (dictApplicative) {
          return Data_Traversable.traverse(traversableMap)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      },
      Functor0: function () {
          return functorMap;
      },
      Foldable1: function () {
          return foldableMap;
      }
  };
  var eqMap = function (dictEq) {
      return function (dictEq1) {
          return {
              eq: function (m1) {
                  return function (m2) {
                      return Data_Eq.eq(Data_Eq.eqArray(Data_Tuple.eqTuple(dictEq)(dictEq1)))(toAscArray(m1))(toAscArray(m2));
                  };
              }
          };
      };
  };
  var ordMap = function (dictOrd) {
      return function (dictOrd1) {
          return {
              compare: function (m1) {
                  return function (m2) {
                      return Data_Ord.compare(Data_Ord.ordArray(Data_Tuple.ordTuple(dictOrd)(dictOrd1)))(toAscArray(m1))(toAscArray(m2));
                  };
              },
              Eq0: function () {
                  return eqMap(dictOrd.Eq0())(dictOrd1.Eq0());
              }
          };
      };
  };
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  };
  var asList = Control_Category.identity(Control_Category.categoryFn);
  var foldableWithIndexMap = {
      foldlWithIndex: function (f) {
          return function (z) {
              return function (m) {
                  return Data_Foldable.foldl(Data_List_Types.foldableList)((function () {
                      var $756 = Data_Function.flip(f);
                      return function ($757) {
                          return Data_Tuple.uncurry($756($757));
                      };
                  })())(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
              };
          };
      },
      foldrWithIndex: function (f) {
          return function (z) {
              return function (m) {
                  return Data_Foldable.foldr(Data_List_Types.foldableList)(Data_Tuple.uncurry(f))(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
              };
          };
      },
      foldMapWithIndex: function (dictMonoid) {
          return function (f) {
              return function (m) {
                  return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(Data_Tuple.uncurry(f))(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
              };
          };
      },
      Foldable0: function () {
          return foldableMap;
      }
  };
  var mapMaybeWithKey = function (dictOrd) {
      return function (f) {
          return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexMap)(function (k) {
              return function (a) {
                  return function (acc) {
                      return Data_Maybe.maybe(acc)(function (b) {
                          return insert(dictOrd)(k)(b)(acc);
                      })(f(k)(a));
                  };
              };
          })(empty);
      };
  };
  var mapMaybe = function (dictOrd) {
      var $758 = mapMaybeWithKey(dictOrd);
      return function ($759) {
          return $758(Data_Function["const"]($759));
      };
  };
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var v = f(lookup(dictOrd)(k)(m));
                  if (v instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)(v.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 563, column 15 - line 565, column 25): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var fromFoldableWith = function (dictOrd) {
      return function (dictFoldable) {
          return function (f) {
              var combine = function (v) {
                  return function (v1) {
                      if (v1 instanceof Data_Maybe.Just) {
                          return new Data_Maybe.Just(f(v)(v1.value0));
                      };
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return new Data_Maybe.Just(v);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 580, column 3 - line 580, column 38): " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Data_Foldable.foldl(dictFoldable)(function (m) {
                  return function (v) {
                      return alter(dictOrd)(combine(v.value1))(v.value0)(m);
                  };
              })(empty);
          };
      };
  };
  var insertWith = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (v) {
                  return alter(dictOrd)((function () {
                      var $762 = Data_Maybe.maybe(v)(Data_Function.flip(f)(v));
                      return function ($763) {
                          return Data_Maybe.Just.create($762($763));
                      };
                  })())(k);
              };
          };
      };
  };
  var unionWith = function (dictOrd) {
      return function (f) {
          return function (m1) {
              return function (m2) {
                  var go = function (m) {
                      return function (v) {
                          return alter(dictOrd)((function () {
                              var $764 = Data_Maybe.maybe(v.value1)(f(v.value1));
                              return function ($765) {
                                  return Data_Maybe.Just.create($764($765));
                              };
                          })())(v.value0)(m);
                      };
                  };
                  return Data_Foldable.foldl(Data_List_Types.foldableList)(go)(m2)(toUnfoldable(Data_List_Types.unfoldableList)(m1));
              };
          };
      };
  };
  var union = function (dictOrd) {
      return unionWith(dictOrd)(Data_Function["const"]);
  };
  var unions = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(union(dictOrd))(empty);
      };
  };
  var update = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  return alter(dictOrd)(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
              };
          };
      };
  };
  exports["empty"] = empty;
  exports["isEmpty"] = isEmpty;
  exports["singleton"] = singleton;
  exports["insert"] = insert;
  exports["insertWith"] = insertWith;
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
  exports["fromFoldableWith"] = fromFoldableWith;
  exports["toUnfoldable"] = toUnfoldable;
  exports["delete"] = $$delete;
  exports["update"] = update;
  exports["keys"] = keys;
  exports["values"] = values;
  exports["union"] = union;
  exports["unionWith"] = unionWith;
  exports["unions"] = unions;
  exports["mapMaybe"] = mapMaybe;
  exports["eqMap"] = eqMap;
  exports["ordMap"] = ordMap;
  exports["showMap"] = showMap;
  exports["functorMap"] = functorMap;
  exports["foldableMap"] = foldableMap;
  exports["foldableWithIndexMap"] = foldableWithIndexMap;
  exports["traversableMap"] = traversableMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Log.Tag"] = $PS["Data.Log.Tag"] || {};
  var exports = $PS["Data.Log.Tag"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var StringTag = (function () {
      function StringTag(value0) {
          this.value0 = value0;
      };
      StringTag.create = function (value0) {
          return new StringTag(value0);
      };
      return StringTag;
  })();
  var NumberTag = (function () {
      function NumberTag(value0) {
          this.value0 = value0;
      };
      NumberTag.create = function (value0) {
          return new NumberTag(value0);
      };
      return NumberTag;
  })();
  var IntTag = (function () {
      function IntTag(value0) {
          this.value0 = value0;
      };
      IntTag.create = function (value0) {
          return new IntTag(value0);
      };
      return IntTag;
  })();
  var BooleanTag = (function () {
      function BooleanTag(value0) {
          this.value0 = value0;
      };
      BooleanTag.create = function (value0) {
          return new BooleanTag(value0);
      };
      return BooleanTag;
  })();
  var JSDateTag = (function () {
      function JSDateTag(value0) {
          this.value0 = value0;
      };
      JSDateTag.create = function (value0) {
          return new JSDateTag(value0);
      };
      return JSDateTag;
  })();
  var TagSetTag = (function () {
      function TagSetTag(value0) {
          this.value0 = value0;
      };
      TagSetTag.create = function (value0) {
          return new TagSetTag(value0);
      };
      return TagSetTag;
  })();
  var mkTagType = function (tagger) {
      return function (name) {
          var $0 = Data_Map_Internal.singleton(name);
          return function ($1) {
              return $0(tagger($1));
          };
      };
  };                                          
  var tag = mkTagType(StringTag.create);
  exports["StringTag"] = StringTag;
  exports["NumberTag"] = NumberTag;
  exports["IntTag"] = IntTag;
  exports["BooleanTag"] = BooleanTag;
  exports["JSDateTag"] = JSDateTag;
  exports["TagSetTag"] = TagSetTag;
  exports["tag"] = tag;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Log.Formatter.Pretty"] = $PS["Data.Log.Formatter.Pretty"] || {};
  var exports = $PS["Data.Log.Formatter.Pretty"];
  var Ansi_Codes = $PS["Ansi.Codes"];
  var Ansi_Output = $PS["Ansi.Output"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_JSDate = $PS["Data.JSDate"];
  var Data_Log_Level = $PS["Data.Log.Level"];
  var Data_Log_Tag = $PS["Data.Log.Tag"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];                
  var showBasic = function (dictApplicative) {
      return function (value) {
          return function (label) {
              return Control_Applicative.pure(dictApplicative)(Data_Array.singleton(label + value));
          };
      };
  };
  var indentEachLine = function (dictFunctor) {
      return Data_Functor.map(dictFunctor)(Data_Semigroup.append(Data_Semigroup.semigroupString)("   "));
  };
  var color = function ($35) {
      return Ansi_Output.withGraphics(Ansi_Output.foreground($35));
  };
  var showLevel = function (v) {
      if (v instanceof Data_Log_Level.Trace) {
          return color(Ansi_Codes.Cyan.value)("[TRACE]");
      };
      if (v instanceof Data_Log_Level.Debug) {
          return color(Ansi_Codes.Blue.value)("[DEBUG]");
      };
      if (v instanceof Data_Log_Level.Info) {
          return color(Ansi_Codes.White.value)("[INFO]");
      };
      if (v instanceof Data_Log_Level.Warn) {
          return color(Ansi_Codes.Yellow.value)("[WARN]");
      };
      if (v instanceof Data_Log_Level["Error"]) {
          return color(Ansi_Codes.Red.value)("[ERROR]");
      };
      throw new Error("Failed pattern match at Data.Log.Formatter.Pretty (line 38, column 1 - line 38, column 32): " + [ v.constructor.name ]);
  };
  var showMainLine = function (dictMonadEffect) {
      return function (v) {
          return Effect_Class.liftEffect(dictMonadEffect)(Data_Functor.mapFlipped(Effect.functorEffect)(Data_JSDate.toISOString(v.timestamp))(function (ts) {
              return Data_String_Common.joinWith(" ")([ showLevel(v.level), color(Ansi_Codes.BrightBlack.value)(ts), color(Ansi_Codes.Cyan.value)(v.message) ]);
          }));
      };
  };
  var showSpecial = function (dictApplicative) {
      var $36 = showBasic(dictApplicative);
      var $37 = color(Ansi_Codes.Yellow.value);
      return function ($38) {
          return $36($37($38));
      };
  };
  var showJsDate = function (dictMonadEffect) {
      return function (value) {
          return function (label) {
              return Effect_Class.liftEffect(dictMonadEffect)(Control_Bind.bind(Effect.bindEffect)(Data_JSDate.toISOString(value))(Data_Function.flip(showSpecial(Effect.applicativeEffect))(label)));
          };
      };
  };
  var bold$prime = Ansi_Output.withGraphics(Ansi_Output.bold);
  var tagLines = function (dictMonadEffect) {
      return function (tags) {
          if (Data_Map_Internal.isEmpty(tags)) {
              return Control_Plus.empty(Data_Maybe.plusMaybe);
          };
          if (Data_Boolean.otherwise) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Functor.map((((dictMonadEffect.Monad0()).Bind1()).Apply0()).Functor0())(Data_Functor.map(Data_Functor.functorFn)(indentEachLine(Data_Functor.functorArray))(Data_Array.concat))(lineify(dictMonadEffect)(tags)));
          };
          throw new Error("Failed pattern match at Data.Log.Formatter.Pretty (line 50, column 1 - line 50, column 74): " + [ tags.constructor.name ]);
      };
  };
  var showTag = function (dictMonadEffect) {
      return function (v) {
          if (v instanceof Data_Log_Tag.StringTag) {
              return showBasic((dictMonadEffect.Monad0()).Applicative0())(v.value0);
          };
          if (v instanceof Data_Log_Tag.IntTag) {
              return showSpecial((dictMonadEffect.Monad0()).Applicative0())(Data_Show.show(Data_Show.showInt)(v.value0));
          };
          if (v instanceof Data_Log_Tag.NumberTag) {
              return showSpecial((dictMonadEffect.Monad0()).Applicative0())(Data_Show.show(Data_Show.showNumber)(v.value0));
          };
          if (v instanceof Data_Log_Tag.BooleanTag) {
              return showSpecial((dictMonadEffect.Monad0()).Applicative0())(Data_Show.show(Data_Show.showBoolean)(v.value0));
          };
          if (v instanceof Data_Log_Tag.TagSetTag) {
              return showSubTags(dictMonadEffect)(v.value0);
          };
          if (v instanceof Data_Log_Tag.JSDateTag) {
              return showJsDate(dictMonadEffect)(v.value0);
          };
          throw new Error("Failed pattern match at Data.Log.Formatter.Pretty (line 61, column 1 - line 61, column 72): " + [ v.constructor.name ]);
      };
  };
  var showSubTags = function (dictMonadEffect) {
      return function (value) {
          return function (label) {
              return Data_Functor.map((((dictMonadEffect.Monad0()).Bind1()).Apply0()).Functor0())(Data_Array.cons(label))(Data_Maybe.fromMaybe(Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())([  ]))(tagLines(dictMonadEffect)(value)));
          };
      };
  };
  var showField = function (dictMonadEffect) {
      return function (v) {
          return showTag(dictMonadEffect)(v.value1)(bold$prime(v.value0) + bold$prime(": "));
      };
  };
  var lineify = function (dictMonadEffect) {
      return function (tags) {
          return Data_Traversable.sequence(Data_Traversable.traversableArray)((dictMonadEffect.Monad0()).Applicative0())(Data_Functor.map(Data_Functor.functorArray)(showField(dictMonadEffect))(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(tags)));
      };
  };
  var showTags = function (dictMonadEffect) {
      var $39 = tagLines(dictMonadEffect);
      return function ($40) {
          return (function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())("");
              };
              if (v instanceof Data_Maybe.Just) {
                  return Data_Functor.mapFlipped((((dictMonadEffect.Monad0()).Bind1()).Apply0()).Functor0())(v.value0)((function () {
                      var $41 = Data_Semigroup.append(Data_Semigroup.semigroupString)("\x0a");
                      var $42 = Data_String_Common.joinWith("\x0a");
                      return function ($43) {
                          return $41($42($43));
                      };
                  })());
              };
              throw new Error("Failed pattern match at Data.Log.Formatter.Pretty (line 46, column 25 - line 48, column 56): " + [ v.constructor.name ]);
          })($39($40));
      };
  };
  var prettyFormatter = function (dictMonadEffect) {
      return function (message) {
          return Control_Apply.apply(((dictMonadEffect.Monad0()).Bind1()).Apply0())(Data_Functor.map((((dictMonadEffect.Monad0()).Bind1()).Apply0()).Functor0())(Data_Semigroup.append(Data_Semigroup.semigroupString))(showMainLine(dictMonadEffect)(message)))(showTags(dictMonadEffect)(message.tags));
      };
  };
  exports["prettyFormatter"] = prettyFormatter;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Maybe.Last"] = $PS["Data.Maybe.Last"] || {};
  var exports = $PS["Data.Maybe.Last"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var Last = function (x) {
      return x;
  };
  var semigroupLast = {
      append: function (v) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Just) {
                  return v1;
              };
              if (v1 instanceof Data_Maybe.Nothing) {
                  return v;
              };
              throw new Error("Failed pattern match at Data.Maybe.Last (line 52, column 1 - line 54, column 36): " + [ v.constructor.name, v1.constructor.name ]);
          };
      }
  };
  exports["Last"] = Last;
  exports["semigroupLast"] = semigroupLast;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect.Class.Console"] = $PS["Effect.Class.Console"] || {};
  var exports = $PS["Effect.Class.Console"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var log = function (dictMonadEffect) {
      var $30 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($31) {
          return $30(Effect_Console.log($31));
      };
  };
  exports["log"] = log;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Helpers"] = $PS["Helpers"] || {};
  var exports = $PS["Helpers"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_JSDate = $PS["Data.JSDate"];
  var Data_Log_Formatter_Pretty = $PS["Data.Log.Formatter.Pretty"];
  var Data_Log_Level = $PS["Data.Log.Level"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Maybe_First = $PS["Data.Maybe.First"];
  var Data_Maybe_Last = $PS["Data.Maybe.Last"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_UInt = $PS["Data.UInt"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Class_Console = $PS["Effect.Class.Console"];
  var Effect_Exception = $PS["Effect.Exception"];
  var showWithParens = function (dictShow) {
      return function (ctorName) {
          return function (x) {
              return "(" + (ctorName + (" (" + (Data_Show.show(dictShow)(x) + "))")));
          };
      };
  };
  var maybeArrayMerge = function (dictEq) {
      return function (v) {
          return function (v1) {
              if (v instanceof Data_Maybe.Nothing) {
                  return v1;
              };
              if (v1 instanceof Data_Maybe.Nothing) {
                  return v;
              };
              if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                  return new Data_Maybe.Just(Data_Array.union(dictEq)(v.value0)(v1.value0));
              };
              throw new Error("Failed pattern match at Helpers (line 115, column 1 - line 120, column 21): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var logWithLevel = function (dictMonadEffect) {
      return function (lvl) {
          return function (msg) {
              return Control_Applicative.when((dictMonadEffect.Monad0()).Applicative0())(Data_Ord.greaterThanOrEq(Data_Log_Level.ordLogLevel)(msg.level)(lvl))(Control_Bind.bindFlipped((dictMonadEffect.Monad0()).Bind1())(Effect_Class_Console.log(dictMonadEffect))(Data_Log_Formatter_Pretty.prettyFormatter(dictMonadEffect)(msg)));
          };
      };
  };
  var logString = function (cfgLevel) {
      return function (level) {
          return function (message) {
              return function __do() {
                  var timestamp = Data_JSDate.now();
                  return logWithLevel(Effect_Class.monadEffectEffect)(cfgLevel)({
                      timestamp: timestamp,
                      message: message,
                      level: level,
                      tags: Data_Map_Internal.empty
                  })();
              };
          };
      };
  };
  var liftEither = function (dictMonadError) {
      return Data_Either.either(Control_Monad_Error_Class.throwError(dictMonadError.MonadThrow0()))(Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0()));
  };
  var liftM = function (dictMonadError) {
      return function (err) {
          var $30 = liftEither(dictMonadError);
          var $31 = Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(err))(Data_Either.Right.create);
          return function ($32) {
              return $30($31($32));
          };
      };
  };
  var fromJustEff = function (e) {
      return function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Effect_Exception["throw"](e);
          };
          if (v instanceof Data_Maybe.Just) {
              return Control_Applicative.pure(Effect.applicativeEffect)(v.value0);
          };
          throw new Error("Failed pattern match at Helpers (line 58, column 17 - line 60, column 19): " + [ v.constructor.name ]);
      };
  };
  var bigIntToUInt = function ($51) {
      return Data_UInt.fromString(Data_BigInt.toString($51));
  };
  var appendRightMap = function (dictOrd) {
      return Data_Map_Internal.unionWith(dictOrd)(Data_Function.flip(Data_Function["const"]));
  };
  var appendMap = function (dictOrd) {
      return function (dictSemigroup) {
          return Data_Map_Internal.unionWith(dictOrd)(Data_Semigroup.append(dictSemigroup));
      };
  };
  var appendLastMaybe = function (m) {
      return function (m$prime) {
          return (function (v) {
              return v;
          })(Data_Function.on(Data_Semigroup.append(Data_Maybe_Last.semigroupLast))(Data_Maybe_Last.Last)(m)(m$prime));
      };
  };
  var appendFirstMaybe = function (m) {
      return function (m$prime) {
          return (function (v) {
              return v;
          })(Data_Function.on(Data_Semigroup.append(Data_Maybe_First.semigroupFirst))(Data_Maybe_First.First)(m)(m$prime));
      };
  };
  exports["appendFirstMaybe"] = appendFirstMaybe;
  exports["appendLastMaybe"] = appendLastMaybe;
  exports["appendMap"] = appendMap;
  exports["appendRightMap"] = appendRightMap;
  exports["bigIntToUInt"] = bigIntToUInt;
  exports["fromJustEff"] = fromJustEff;
  exports["liftEither"] = liftEither;
  exports["liftM"] = liftM;
  exports["logString"] = logString;
  exports["logWithLevel"] = logWithLevel;
  exports["maybeArrayMerge"] = maybeArrayMerge;
  exports["showWithParens"] = showWithParens;
})(PS);
(function(exports) {
  /* global require exports BROWSER_RUNTIME */

  var lib;
  if (typeof BROWSER_RUNTIME != 'undefined' && BROWSER_RUNTIME) {
      lib = require('@emurgo/cardano-serialization-lib-browser');
  } else {
      lib = require('@emurgo/cardano-serialization-lib-nodejs');
  }

  const fromBytes = name => helper => bytes => {
      try {
          return helper.valid(lib[name].from_bytes(bytes));
      } catch (e) {
          return helper.error(name + ".from_bytes() raised " + e);
      }
  };

  exports._fromBytesDataHash = fromBytes('DataHash');
  exports._fromBytesTransaction = fromBytes('Transaction');
  exports._fromBytesTransactionHash = fromBytes('TransactionHash');
  exports._fromBytesTransactionUnspentOutput = fromBytes('TransactionUnspentOutput');
  exports._fromBytesTransactionWitnessSet = fromBytes('TransactionWitnessSet');
})(PS["Deserialization.FromBytes"] = PS["Deserialization.FromBytes"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Variant"] = $PS["Data.Variant"] || {};
  var exports = $PS["Data.Variant"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var onMatch = function () {
      return function () {
          return function () {
              return function (r) {
                  return function (k) {
                      return function (v) {
                          if (Record_Unsafe.unsafeHas(v.type)(r)) {
                              return Record_Unsafe.unsafeGet(v.type)(r)(v.value);
                          };
                          return k(v);
                      };
                  };
              };
          };
      };
  };
  var inj = function () {
      return function (dictIsSymbol) {
          return function (p) {
              return function (value) {
                  return {
                      type: Data_Symbol.reflectSymbol(dictIsSymbol)(p),
                      value: value
                  };
              };
          };
      };
  };
  var $$default = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["inj"] = inj;
  exports["onMatch"] = onMatch;
  exports["default"] = $$default;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deserialization.FromBytes"] = $PS["Deserialization.FromBytes"] || {};
  var exports = $PS["Deserialization.FromBytes"];
  var $foreign = $PS["Deserialization.FromBytes"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Variant = $PS["Data.Variant"];
  var Effect = $PS["Effect"];
  var Effect_Exception = $PS["Effect.Exception"];
  var FfiHelpers = $PS["FfiHelpers"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var fromBytes$prime = function (dict) {
      return dict["fromBytes'"];
  };
  var fromBytes = function (dictFromBytes) {
      var $15 = fromBytes$prime(dictFromBytes);
      return function ($16) {
          return Data_Either.hush($15($16));
      };
  };
  var fromBytesEffect = function (dictFromBytes) {
      return function (bytes) {
          var v = fromBytes(dictFromBytes)(bytes);
          if (v instanceof Data_Maybe.Nothing) {
              return Effect_Exception["throw"]("from_bytes() call failed");
          };
          if (v instanceof Data_Maybe.Just) {
              return Control_Applicative.pure(Effect.applicativeEffect)(v.value0);
          };
          throw new Error("Failed pattern match at Deserialization.FromBytes (line 72, column 3 - line 74, column 21): " + [ v.constructor.name ]);
      };
  };
  var _fromBytesError = Type_Proxy["Proxy"].value;
  var eh = FfiHelpers.errorHelper(Data_Variant.inj()({
      reflectSymbol: function () {
          return "fromBytesError";
      }
  })(_fromBytesError));
  var fromBytesDataHash = {
      "fromBytes'": $foreign["_fromBytesDataHash"](eh)
  };
  var fromBytesTransaction = {
      "fromBytes'": $foreign["_fromBytesTransaction"](eh)
  };
  var fromBytesTransactionHash = {
      "fromBytes'": $foreign["_fromBytesTransactionHash"](eh)
  };
  var fromBytesTransactionUnspe = {
      "fromBytes'": $foreign["_fromBytesTransactionUnspentOutput"](eh)
  };
  var fromBytesTransactionWitne = {
      "fromBytes'": $foreign["_fromBytesTransactionWitnessSet"](eh)
  };
  exports["_fromBytesError"] = _fromBytesError;
  exports["fromBytes"] = fromBytes;
  exports["fromBytesEffect"] = fromBytesEffect;
  exports["fromBytesDataHash"] = fromBytesDataHash;
  exports["fromBytesTransaction"] = fromBytesTransaction;
  exports["fromBytesTransactionHash"] = fromBytesTransactionHash;
  exports["fromBytesTransactionUnspe"] = fromBytesTransactionUnspe;
  exports["fromBytesTransactionWitne"] = fromBytesTransactionWitne;
})(PS);
(function(exports) {
  /* global require exports BROWSER_RUNTIME */

  var lib;
  if (typeof BROWSER_RUNTIME != 'undefined' && BROWSER_RUNTIME) {
      lib = require('@emurgo/cardano-serialization-lib-browser');
  } else {
      lib = require('@emurgo/cardano-serialization-lib-nodejs');
  }


  const call = property => object => object[property]();
  const callMaybe = property => maybe => object => {
      const res = object[property]();
      return res != null ? maybe.just(res) : maybe.nothing;
  };

  exports._txIsValid = tx => tx.is_valid();
  exports._txWitnessSet = tx => tx.witness_set();
  exports._txBody = tx => tx.body();
  exports._txAuxiliaryData = maybe => tx => {
      ad = tx.auxiliary_data();
      return ad == null ? maybe.nothing : maybe.just(ad);
  };


  const maybeGetter_ = fmap => propstr => maybe => obj => {
      if (typeof(propstr) != 'string'){
          const s = "maybeGetter_ propstr must be a string, got " + propstr;
          throw s;
      }
      const res = obj[propstr]();
      return res == null ? maybe.nothing : maybe.just(fmap(res));
  };
  const maybeGetter = maybeGetter_ (a => a);
  const maybeGetterMulti = propstr => containerHelper => maybeGetter_(o => containerHelper.unpack(o))(propstr);

  exports._txAuxiliaryData = maybeGetter("auxiliary_data");
  exports._adGeneralMetadata = maybeGetter("metadata");
  exports._adNativeScripts = maybeGetter("native_scripts");
  exports._adPlutusScripts = maybeGetter("plutus_scripts");

  // inputs(): TransactionInputs;
  exports._txBodyInputs = containerhelper => body => containerhelper.unpack(body.inputs());
  // outputs(): TransactionOutputs;
  exports._txBodyOutputs = containerhelper => body => containerhelper.unpack(body.outputs());
  // fee(): BigNum;
  exports._txBodyFee = body => body.fee();
  // ttl(): number | void;
  exports._txBodyTtl = maybeGetter("ttl");
  // certs(): Certificates | void;
  exports._txBodyCerts = maybeGetterMulti("certs");
  // withdrawals(): Withdrawals | void;
  exports._txBodyWithdrawals = maybeGetter("withdrawals");
  // update(): Update | void;
  exports._txBodyUpdate = maybeGetter("update");
  // auxiliary_data_hash(): AuxiliaryDataHash | void;
  exports._txBodyAuxiliaryDataHash = maybeGetter("auxiliary_data_hash");
  // validity_start_interval(): number | void;
  exports._txBodyValidityStartInterval = maybeGetter("validity_start_interval");
  // multiassets(): Mint | void;
  exports._txBodyMultiAssets = maybeGetter("multiassets");
  // script_data_hash(): ScriptDataHash | void;
  exports._txBodyScriptDataHash = maybeGetter("script_data_hash");
  // collateral(): Array TransactionInput | void;
  exports._txBodyCollateral = maybeGetterMulti("collateral");
  // required_signers(): Ed25519KeyHashes | void;
  exports._txBodyRequiredSigners = maybeGetterMulti("required_signers");
  // network_id(): number | void;
  exports._txBodyNetworkId = testnet => mainnet => maybeGetter_(
      o => {
          switch (o.kind()) {
          case lib.NetworkIdKind.Testnet:
              return testnet;
          case lib.NetworkIdKind.Mainnet:
              return mainnet;
          default:
              throw ("Unknown NetworkIdKind: " + o.kind());
          }
      }
  )("network_id");

  // foreign import _unpackWithdrawals :: ContainerHelper -> CSL.Withdrawals -> Array(Tuple CSL.RewardAddress CSL.BigNum)
  exports._unpackWithdrawals = containerhelper => containerhelper.unpackKeyIndexed;

  // foreign import _unpackUpdate :: (forall a b.a -> b -> Tuple a b) -> CSL.Update -> { epoch:: Int, paramUpdates:: Array(Tuple GenesisHash CSL.ProtocolParamUpdate) }
  exports._unpackUpdate = containerhelper => update => {
      const pppus = containerhelper.unpackKeyIndexed(update.proposed_protocol_parameter_updates());
      return { epoch: update.epoch(), paramUpdates: pppus};
  };

  // foreign import _unpackMint :: ContainerHelper -> CSL.Mint -> Array(Tuple ScriptHash MintAssets  )
  exports._unpackMint = containerhelper => containerhelper.unpackKeyIndexed;

  // foreign import _unpackMintAssets :: ContainerHelper -> CSL.MintAssets -> Array (Tuple CSL.AssetName Int)
  exports._unpackMintAssets = containerhelper => containerhelper.unpackKeyIndexed;

  // type CertConvHelper (r :: Row Type) =
  //   { stakeDeregistration :: Csl.StakeCredential -> Err r T.Certificate
  //   , stakeRegistration :: Csl.StakeCredential -> Err r T.Certificate
  //   , stakeDelegation ::
  //       Csl.StakeCredential -> Ed25519KeyHash -> Err r T.Certificate
  //   , poolRegistration :: Csl.PoolParams -> Err r T.Certificate
  //   , poolRetirement :: Ed25519KeyHash -> Int -> Err r T.Certificate
  //   , genesisKeyDelegation ::
  //       Csl.GenesisHash
  //       -> Csl.GenesisDelegateHash
  //       -> Csl.VRFKeyHash
  //       -> Err r T.Certificate
  //   , moveInstantaneousRewardsToOtherPotCert ::
  //       Number -> Csl.BigNum -> Err r T.Certificate
  //   , moveInstantaneousRewardsToStakeCreds ::
  //       Number -> Csl.MIRToStakeCredentials -> Err r T.Certificate
  //   }
  // foreign import _convertCert :: forall r.CertConvHelper r -> CSL.Certificate -> Err r Certificate
  exports._convertCert = certConvHelper => cert => {
      switch (cert.kind()) {
      case lib.CertificateKind.StakeRegistration:
          return certConvHelper.stakeRegistration(
              cert.as_stake_registration().stake_credential()
          );
      case lib.CertificateKind.StakeDeregistration:
          return certConvHelper.stakeDeregistration(
              cert.as_stake_deregistration().stake_credential()
          );
      case lib.CertificateKind.StakeDelegation:
          return certConvHelper.stakeDelegation(
              cert.as_stake_delegation().stake_credential()
          )(
              cert.as_stake_delegation().pool_keyhash()
          );
      case lib.CertificateKind.PoolRegistration:
          return certConvHelper.poolRegistration(
              cert.as_pool_registration().pool_params()
          );
      case lib.CertificateKind.PoolRetirement:
          return certConvHelper.poolRetirement(
              cert.as_pool_retirement().pool_keyhash()
          )(
              cert.as_pool_retirement().epoch()
          );
      case lib.CertificateKind.GenesisKeyDelegation:
          return certConvHelper.genesisKeyDelegation(
              cert.as_genesis_key_delegation().genesishash()
          )(
              cert.as_genesis_key_delegation().genesis_delegate_hash()
          )(
              cert.as_genesis_key_delegation().vrf_keyhash()
          );
      case lib.CertificateKind.MoveInstantaneousRewardsCert:
          const mirCert = cert.as_move_instantaneous_rewards_cert();
          const mir = mirCert.move_instantaneous_reward();
          switch (mir.kind()) {
          case lib.MIRKind.ToOtherPot:
              return certConvHelper.moveInstantaneousRewardsToOtherPotCert(
                  mir.pot()
              )(
                  mir.as_to_other_pot()
              );
          case lib.MIRKind.ToStakeCredentials:
              return certConvHelper.moveInstantaneousRewardsToStakeCreds(
                  mir.pot()
              )(
                  mir.as_to_stake_creds()
              );
          default:
              throw ("MoveInstantaneousReward convertion failed for kind" + mir.kind());
          };
      default:
          throw ("Cert conversion failed for kind: ", cert.kind());
      };
  };


  // foreign import _unpackProtocolParamUpdate
  //   :: MaybeFfiHelper
  //   -> Csl.ProtocolParamUpdate
  //   -> { minfeeA :: Maybe Csl.BigNum
  //      , minfeeB :: Maybe Csl.BigNum
  //      , maxBlockBodySize :: Maybe Number
  //      , maxTxSize :: Maybe Number
  //      , maxBlockHeaderSize :: Maybe Number
  //      , keyDeposit :: Maybe Csl.BigNum
  //      , poolDeposit :: Maybe Csl.BigNum
  //      , maxEpoch :: Maybe Number
  //      , nOpt :: Maybe Number
  //      , poolPledgeInfluence :: Maybe Csl.UnitInterval
  //      , expansionRate ::
  //          Maybe Csl.UnitInterval
  //      , treasuryGrowthRate ::
  //          Maybe Csl.UnitInterval
  //      , d :: Maybe Csl.UnitInterval
  //      , extraEntropy :: Maybe Csl.Nonce
  //      , protocolVersion :: Maybe Csl.ProtocolVersions
  //      , minPoolCost :: Maybe Csl.BigNum
  //      , adaPerUtxoByte :: Maybe Csl.BigNum
  //      , costModels :: Maybe Csl.Costmdls
  //      , executionCosts :: Maybe Csl.ExUnitPrices
  //      , maxTxExUnits :: Maybe Csl.ExUnits
  //      , maxBlockExUnits :: Maybe Csl.ExUnits
  //      , maxValueSize :: Maybe Number
  //      }
  exports._unpackProtocolParamUpdate = maybe => ppu => {
      const optional = x => (x == null) ? maybe.nothing : maybe.just(x);

      return {
          minfeeA: optional(ppu.minfee_a()),
          minfeeB: optional(ppu.minfee_b()),
          maxBlockBodySize: optional(ppu.max_block_body_size()),
          maxTxSize: optional(ppu.max_tx_size()),
          maxBlockHeaderSize: optional(ppu.max_block_header_size()),
          keyDeposit: optional(ppu.key_deposit()),
          poolDeposit: optional(ppu.pool_deposit()),
          maxEpoch: optional(ppu.max_epoch()),
          nOpt: optional(ppu.n_opt()),
          poolPledgeInfluence: optional(ppu.pool_pledge_influence()),
          expansionRate: optional(ppu.expansion_rate()),
          treasuryGrowthRate: optional(ppu.treasury_growth_rate()),
          d: optional(ppu.d()),
          extraEntropy: optional(ppu.extra_entropy()),
          protocolVersion: optional(ppu.protocol_version()),
          minPoolCost: optional(ppu.min_pool_cost()),
          adaPerUtxoByte: optional(ppu.ada_per_utxo_byte()),
          costModels: optional(ppu.cost_models()),
          executionCosts: optional(ppu.execution_costs()),
          maxTxExUnits: optional(ppu.max_tx_ex_units()),
          maxBlockExUnits:  optional(ppu.max_block_ex_units()),
          maxValueSize: optional(ppu.max_value_size())
      };
  };

  // foreign import _unpackCostModels :: ContainerHelper -> CSL.Costmdls -> Array(Tuple CSL.Language CSL.CostModel)
  exports._unpackCostModels = containerhelper => containerhelper.unpackKeyIndexed;

  // foreign import unpackCostModel :: CSL.CostModel -> Array String
  exports._unpackCostModel = cm => {
      // XXX should OP_COUNT be used instead?
      var err = false;
      const res = [];
      try {
        for(var op = 0;; op++) {
          res.push(cm.get(op).to_str());
        }
      } catch (_) { }
      return res;
  };

  // foreign import _convertLanguage
  //   :: forall r.ErrorFfiHelper r -> { plutusV1:: Language } -> CSL.Language -> E r Language
  exports._convertLanguage = errorHelper => langCtors => cslLang => {
      try{
          if(cslLang.kind()==lib.LanguageKind.PlutusV1){
              return errorHelper.valid(langCtors.plutusV1);
          }
          else{
              return errorHelper.error("_convertLanguage: Unsupported language kind: " + cslLang.kind());
          }
      }
      catch(e){
          return errorHelper.error("_convertLanguage raised: " + e);
      }
  };

  // foreign import _convertNonce :: forall r. { identityNonce:: Nonce, hashNonce :: UInt8Array -> Nonce } -> CSL.Nonce -> Nonce
  exports._convertNonce = nonceCtors => cslNonce => {
      const hashBytes = cslNonce.get_hash();
      return hashBytes == null ? nonceCtors.identityNonce : nonceCtors.hashNonce(hashBytes);
  };

  // foreign import _unpackMetadatums
  //   :: ContainerHelper
  //     -> CSL.GeneralTransactionMetadata
  //     -> Array(Tuple CSL.BigNum CSL.TransactionMetadatum)
  exports._unpackMetadatums = containerHelper => containerHelper.unpackKeyIndexed;

  // foreign import _unpackMetadataMap :: ContainerHelper -> CSL.MetadataMap -> Array(Tuple CSL.TransactionMetadatum CSL.TransactionMetadatum)
  exports._unpackMetadataMap = containerHelper => containerHelper.unpackKeyIndexed;

  // foreign import _unpackMetadataList
  //   :: ContainerHelper -> CSL.MetadataList -> Array CSL.TransactionMetadatum
  exports._unpackMetadataList = containerHelper => containerHelper.unpack;

  exports._convertMetadatum = metadataCtors => cslMetadatum => {
      // map
      var r = null;
      try{
          r = cslMetadatum.as_map();
      }
      catch(_){
          r = null;
      }
      if (r) return metadataCtors.from_map(r);
      // list
      try {
          r = cslMetadatum.as_list();
      }
      catch (_) {
          r = null;
      }
      if (r) return metadataCtors.from_list(r);

      // int
      try {
          r = cslMetadatum.as_int();
      }
      catch (_) {
          r = null;
      }
      if (r) return metadataCtors.from_int(r);

      // bytes
      try {
          r = cslMetadatum.as_bytes();
      }
      catch (_) {
          r = null;
      }
      if (r) return metadataCtors.from_bytes(r);

      // text
      try {
          r = cslMetadatum.as_text();
      }
      catch (_) {
          r = null;
      }
      if (r) return metadataCtors.from_text(r);

      return metadataCtors.error("Could not convert to known types.");
  };

  // foreign import _unpackExUnits
  // :: Csl.ExUnits -> {mem :: Csl.BigNum, steps :: Csl.BigNum}
  exports._unpackExUnits = exunits => {
      return {
        mem: exunits.mem(),
        steps: exunits.steps()
      };
  };


  // foreign import _unpackUnitInterval ::
  // Csl.UnitInterval -> { numerator :: Csl.BigNum, denominator :: Csl.BigNum}
  exports._unpackUnitInterval = ui => {
      return {
          numerator: ui.numerator(),
          denominator: ui.denominator()
      };
  };

  // foreign import _unpackProtocolVersions
  // :: ContainerHelper -> Csl.ProtocolVersions -> Array { major :: Number, minor :: Number }
  exports._unpackProtocolVersions = containerhelper => cslPV => {
      const pvs = containerhelper.unpack(cslPV);
      const res = [];
      for(var i=0; i<pvs.length; i++){
          res.push({major: pvs[i].major(), minor: pvs[i].minor()});
      }
      return res;
  };


  // foreign import _unpackExUnitsPrices
  // :: Csl.ExUnitPrices -> {memPrice :: Csl.UnitInterval, stepPrice :: Csl.UnitInterval}
  exports._unpackExUnitsPrices = cslEup => {
      return {
          memPrice: cslEup.mem_price(),
          stepPrice: cslEup.step_price(),
      };
  };

  exports.poolParamsOperator = call('operator');
  exports.poolParamsVrfKeyhash = call('vrf_keyhash');
  exports.poolParamsPledge = call('pledge');
  exports.poolParamsCost = call('cost');
  exports.poolParamsMargin = call('margin');
  exports.poolParamsRewardAccount = call('reward_account');
  exports.poolParamsPoolOwners = containerHelper => poolParams =>
      containerHelper.unpack(poolParams.pool_owners());
  exports.poolParamsRelays = containerHelper => poolParams =>
      containerHelper.unpack(poolParams.relays());
  exports.poolParamsPoolMetadata = callMaybe('pool_metadata');

  exports.convertRelay_ = helper => relay => {
      let res = relay.as_single_host_addr();
      if (res) {
          return helper.asSingleHostAddr(res);
      }

      res = relay.as_single_host_name();
      if (res) {
          return helper.asSingleHostName(res);
      }

      res = relay.as_multi_host_name();
      if (res) {
          return helper.asMultiHostName(res);
      }

      throw "convertRelay_: impossible happened: invalid Relay";
  };

  exports.convertIpv6_ = ipv6 => ipv6.ip();

  exports.convertIpv4_ = ipv6 => ipv6.ip();

  exports.convertSingleHostAddr_ = maybe => cont => singleHostAddr => {
      const port = singleHostAddr.port();
      const ipv4 = singleHostAddr.ipv4();
      const ipv6 = singleHostAddr.ipv6();

      return cont(
          port ? maybe.just(port) : maybe.nothing
      )(
          ipv4 ? maybe.just(ipv4) : maybe.nothing
      )(
          ipv6 ? maybe.just(ipv6) : maybe.nothing
      );
  };

  exports.convertSingleHostName_ = maybe => cont => singleHostName => {
      const port = singleHostName.port();
      return cont(
          port ? maybe.just(port) : maybe.nothing
      )(
          singleHostName.dns_name().record()
      );
  };

  exports.convertMultiHostName_ = multiHostName =>
      multiHostName.dns_name().record();

  exports.unpackMIRToStakeCredentials_ = containerHelper => mirToStakeCredentials =>
      containerHelper.unpackKeyIndexed(mirToStakeCredentials);

  exports.convertPoolMetadata_ = cont => poolMetadata =>
      cont(poolMetadata.url().url())(poolMetadata.pool_metadata_hash().to_bytes());
})(PS["Deserialization.Transaction"] = PS["Deserialization.Transaction"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Alternative"] = $PS["Control.Alternative"] || {};
  var exports = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Unit = $PS["Data.Unit"];                
  var guard = function (dictAlternative) {
      return function (v) {
          if (v) {
              return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Unit.unit);
          };
          if (!v) {
              return Control_Plus.empty(dictAlternative.Plus1());
          };
          throw new Error("Failed pattern match at Control.Alternative (line 48, column 1 - line 48, column 54): " + [ v.constructor.name ]);
      };
  };
  exports["guard"] = guard;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Bifoldable"] = $PS["Data.Bifoldable"] || {};
  var exports = $PS["Data.Bifoldable"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var bifoldableTuple = {
      bifoldMap: function (dictMonoid) {
          return function (f) {
              return function (g) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(g(v.value1));
                  };
              };
          };
      },
      bifoldr: function (f) {
          return function (g) {
              return function (z) {
                  return function (v) {
                      return f(v.value0)(g(v.value1)(z));
                  };
              };
          };
      },
      bifoldl: function (f) {
          return function (g) {
              return function (z) {
                  return function (v) {
                      return g(f(z)(v.value0))(v.value1);
                  };
              };
          };
      }
  };
  exports["bifoldableTuple"] = bifoldableTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Bitraversable"] = $PS["Data.Bitraversable"] || {};
  var exports = $PS["Data.Bitraversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Bifoldable = $PS["Data.Bifoldable"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var bitraverse = function (dict) {
      return dict.bitraverse;
  };
  var ltraverse = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (f) {
              return bitraverse(dictBitraversable)(dictApplicative)(f)(Control_Applicative.pure(dictApplicative));
          };
      };
  };
  var bitraversableTuple = {
      bitraverse: function (dictApplicative) {
          return function (f) {
              return function (g) {
                  return function (v) {
                      return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create)(f(v.value0)))(g(v.value1));
                  };
              };
          };
      },
      bisequence: function (dictApplicative) {
          return function (v) {
              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Tuple.Tuple.create)(v.value0))(v.value1);
          };
      },
      Bifunctor0: function () {
          return Data_Bifunctor.bifunctorTuple;
      },
      Bifoldable1: function () {
          return Data_Bifoldable.bifoldableTuple;
      }
  };
  var bisequence = function (dict) {
      return dict.bisequence;
  };
  exports["bitraverse"] = bitraverse;
  exports["bisequence"] = bisequence;
  exports["ltraverse"] = ltraverse;
  exports["bitraversableTuple"] = bitraversableTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Lattice"] = $PS["Data.Lattice"] || {};
  var exports = $PS["Data.Lattice"];
  var join = function (dict) {
      return dict.join;
  };
  exports["join"] = join;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 372, column 3 - line 372, column 19): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var partition = function (p) {
      return function (xs) {
          var select = function (x) {
              return function (v) {
                  var $228 = p(x);
                  if ($228) {
                      return {
                          no: v.no,
                          yes: new Data_List_Types.Cons(x, v.yes)
                      };
                  };
                  return {
                      no: new Data_List_Types.Cons(x, v.no),
                      yes: v.yes
                  };
              };
          };
          return Data_Foldable.foldr(Data_List_Types.foldableList)(select)({
              no: Data_List_Types.Nil.value,
              yes: Data_List_Types.Nil.value
          })(xs);
      };
  };
  var filter = function (p) {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (p(v.value0)) {
                          $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                          $copy_v = v.value1;
                          return;
                      };
                      if (Data_Boolean.otherwise) {
                          $tco_var_acc = acc;
                          $copy_v = v.value1;
                          return;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List (line 394, column 3 - line 394, column 27): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  var nubByEq = function (v) {
      return function (v1) {
          if (v1 instanceof Data_List_Types.Nil) {
              return Data_List_Types.Nil.value;
          };
          if (v1 instanceof Data_List_Types.Cons) {
              return new Data_List_Types.Cons(v1.value0, nubByEq(v)(filter(function (y) {
                  return !v(v1.value0)(y);
              })(v1.value1)));
          };
          throw new Error("Failed pattern match at Data.List (line 721, column 1 - line 721, column 61): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  exports["partition"] = partition;
  exports["nubByEq"] = nubByEq;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Set"] = $PS["Data.Set"] || {};
  var exports = $PS["Data.Set"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var $$Set = function (x) {
      return x;
  };
  var toList = function (v) {
      return Data_Map_Internal.keys(v);
  };
  var fromMap = $$Set;
  var foldableSet = {
      foldMap: function (dictMonoid) {
          return function (f) {
              var $72 = Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f);
              return function ($73) {
                  return $72(toList($73));
              };
          };
      },
      foldl: function (f) {
          return function (x) {
              var $74 = Data_Foldable.foldl(Data_List_Types.foldableList)(f)(x);
              return function ($75) {
                  return $74(toList($75));
              };
          };
      },
      foldr: function (f) {
          return function (x) {
              var $76 = Data_Foldable.foldr(Data_List_Types.foldableList)(f)(x);
              return function ($77) {
                  return $76(toList($77));
              };
          };
      }
  };
  exports["fromMap"] = fromMap;
  exports["foldableSet"] = foldableSet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Map"] = $PS["Data.Map"] || {};
  var exports = $PS["Data.Map"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Set = $PS["Data.Set"];
  var keys = (function () {
      var $20 = Data_Functor["void"](Data_Map_Internal.functorMap);
      return function ($21) {
          return Data_Set.fromMap($20($21));
      };
  })();
  exports["keys"] = keys;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.These"] = $PS["Data.These"] || {};
  var exports = $PS["Data.These"];                   
  var This = (function () {
      function This(value0) {
          this.value0 = value0;
      };
      This.create = function (value0) {
          return new This(value0);
      };
      return This;
  })();
  var That = (function () {
      function That(value0) {
          this.value0 = value0;
      };
      That.create = function (value0) {
          return new That(value0);
      };
      return That;
  })();
  var Both = (function () {
      function Both(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Both.create = function (value0) {
          return function (value1) {
              return new Both(value0, value1);
          };
      };
      return Both;
  })();
  var these = function (v) {
      return function (v1) {
          return function (v2) {
              return function (v3) {
                  if (v3 instanceof This) {
                      return v(v3.value0);
                  };
                  if (v3 instanceof That) {
                      return v1(v3.value0);
                  };
                  if (v3 instanceof Both) {
                      return v2(v3.value0)(v3.value1);
                  };
                  throw new Error("Failed pattern match at Data.These (line 105, column 1 - line 105, column 79): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name, v3.constructor.name ]);
              };
          };
      };
  };
  exports["This"] = This;
  exports["That"] = That;
  exports["Both"] = Both;
  exports["these"] = these;
})(PS);
(function(exports) {
  // NOTE: Adopted from https://github.com/AlexaDeWit/purescript-text-encoding/blob/master/src/Data/TextDecoding.js
  // See https://github.com/Plutonomicon/cardano-transaction-lib/issues/544
  'use strict';

  // `TextDecoder` is not available in `node`, use polyfill in that case
  let OurTextDecoder;
  if (typeof BROWSER_RUNTIME == 'undefined' || !BROWSER_RUNTIME) {
      OurTextDecoder = require('util').TextDecoder;
  } else {
      OurTextDecoder = TextDecoder;
  };

  // FIXME: https://github.com/Plutonomicon/cardano-transaction-lib/issues/548
  const call = property => object => object[property]();
  exports.assetNameName = call('name');
})(PS["Types.TokenName"] = PS["Types.TokenName"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Types.TokenName"] = $PS["Types.TokenName"] || {};
  var exports = $PS["Types.TokenName"];
  var $foreign = $PS["Types.TokenName"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_RawBytes = $PS["Types.RawBytes"];                
  var TokenName = function (x) {
      return x;
  };                                          
  var showTokenName = {
      show: function (v) {
          return "(TokenName " + (Data_Show.show(Types_RawBytes.showRawBytes)(v) + ")");
      }
  };
  var ordTokenName = Types_RawBytes.ordRawBytes;    
  var eqTokenName = Types_RawBytes.eqRawBytes;
  var tokenNameFromAssetName = (function () {
      var $29 = Data_Newtype.wrap();
      return function ($30) {
          return TokenName($29($foreign.assetNameName($30)));
      };
  })();
  var mkTokenName = function (byteArr) {
      if (Types_ByteArray.byteLength(byteArr) <= 32) {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Newtype.wrap()(byteArr));
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Types.TokenName (line 100, column 1 - line 100, column 44): " + [ byteArr.constructor.name ]);
  };
  var getTokenName = function (v) {
      return Data_Newtype.unwrap()(v);
  };
  var adaToken = Data_Monoid.mempty(Types_RawBytes.monoidRawBytes);
  exports["adaToken"] = adaToken;
  exports["getTokenName"] = getTokenName;
  exports["mkTokenName"] = mkTokenName;
  exports["tokenNameFromAssetName"] = tokenNameFromAssetName;
  exports["eqTokenName"] = eqTokenName;
  exports["ordTokenName"] = ordTokenName;
  exports["showTokenName"] = showTokenName;
  exports["assetNameName"] = $foreign.assetNameName;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Cardano.Types.Value"] = $PS["Cardano.Types.Value"] || {};
  var exports = $PS["Cardano.Types.Value"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Bitraversable = $PS["Data.Bitraversable"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lattice = $PS["Data.Lattice"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map = $PS["Data.Map"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Set = $PS["Data.Set"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Data_These = $PS["Data.These"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Helpers = $PS["Helpers"];
  var Serialization_Hash = $PS["Serialization.Hash"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_TokenName = $PS["Types.TokenName"];                
  var CurrencySymbol = function (x) {
      return x;
  };
  var NonAdaAsset = function (x) {
      return x;
  };
  var Coin = function (x) {
      return x;
  };
  var Value = (function () {
      function Value(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Value.create = function (value0) {
          return function (value1) {
              return new Value(value0, value1);
          };
      };
      return Value;
  })();                                             
  var splitCoin = {
      split: function (v) {
          var $119 = Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(v)(Data_Semiring.zero(Data_BigInt.semiringBigInt));
          if ($119) {
              return new Data_Tuple.Tuple(Data_Ring.negate(Data_BigInt.ringBigInt)(v), Data_Semiring.zero(Data_BigInt.semiringBigInt));
          };
          return new Data_Tuple.Tuple(Data_Semiring.zero(Data_BigInt.semiringBigInt), v);
      }
  };
  var showCurrencySymbol = {
      show: function (v) {
          return "(CurrencySymbol " + (Data_Show.show(Types_ByteArray.showByteArray)(v) + ")");
      }
  };
  var showNonAdaAsset = {
      show: function (v) {
          return "(NonAdaAsset " + (Data_Show.show(Data_Map_Internal.showMap(showCurrencySymbol)(Data_Map_Internal.showMap(Types_TokenName.showTokenName)(Data_BigInt.showBigInt)))(v) + ")");
      }
  };
  var showCoin = {
      show: function (v) {
          return Helpers.showWithParens(Data_BigInt.showBigInt)("Coin")(v);
      }
  };
  var semigroupCoin = {
      append: function (v) {
          return function (v1) {
              return Data_Semiring.add(Data_BigInt.semiringBigInt)(v)(v1);
          };
      }
  };
  var ordCurrencySymbol = Types_ByteArray.ordByteArray;
  var ordCoin = Data_BigInt.ordBigInt;
  var negateNonAdaAsset = {
      negation: (function () {
          var $305 = Data_Newtype.wrap();
          var $306 = Data_Functor.map(Data_Map_Internal.functorMap)(Data_Functor.map(Data_Map_Internal.functorMap)(Data_Ring.negate(Data_BigInt.ringBigInt)));
          var $307 = Data_Newtype.unwrap();
          return function ($308) {
              return $305($306($307($308)));
          };
      })()
  };
  var negateCoin = {
      negation: (function () {
          var $309 = Data_Newtype.wrap();
          var $310 = Data_Ring.negate(Data_BigInt.ringBigInt);
          var $311 = Data_Newtype.unwrap();
          return function ($312) {
              return $309($310($311($312)));
          };
      })()
  };
  var monoidCoin = {
      mempty: Data_Semiring.zero(Data_BigInt.semiringBigInt),
      Semigroup0: function () {
          return semigroupCoin;
      }
  };
  var joinSemilatticeCoin = {
      join: function (v) {
          return function (v1) {
              return Data_Ord.max(Data_BigInt.ordBigInt)(v)(v1);
          };
      }
  };
  var genericValue_ = {
      to: function (x) {
          return new Value(x.value0, x.value1);
      },
      from: function (x) {
          return new Data_Generic_Rep.Product(x.value0, x.value1);
      }
  };
  var showValue = {
      show: Data_Show_Generic.genericShow(genericValue_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(showCoin))(Data_Show_Generic.genericShowArgsArgument(showNonAdaAsset)))({
          reflectSymbol: function () {
              return "Value";
          }
      }))
  };                                                      
  var eqCurrencySymbol = Types_ByteArray.eqByteArray;
  var eqNonAdaAsset = Data_Map_Internal.eqMap(eqCurrencySymbol)(Data_Map_Internal.eqMap(Types_TokenName.eqTokenName)(Data_BigInt.eqBigInt));
  var eqCoin = Data_BigInt.eqBigInt;
  var eqValue = {
      eq: function (x) {
          return function (y) {
              return Data_Eq.eq(eqCoin)(x.value0)(y.value0) && Data_Eq.eq(eqNonAdaAsset)(x.value1)(y.value1);
          };
      }
  };
  var unsafeAllTokenNames$prime = function (v) {
      var nonAdaUnion = Data_Map_Internal.unions(Types_TokenName.ordTokenName)(Data_List_Types.foldableList)(Data_Map_Internal.values(v.value1));
      var v1 = Data_Eq.eq(eqCoin)(v.value0)(Data_Monoid.mempty(monoidCoin));
      if (!v1) {
          return nonAdaUnion;
      };
      if (v1) {
          return Data_Map_Internal.union(Types_TokenName.ordTokenName)(Data_Map_Internal.singleton(Types_TokenName.adaToken)(v.value0))(nonAdaUnion);
      };
      throw new Error("Failed pattern match at Cardano.Types.Value (line 633, column 5 - line 635, column 71): " + [ v1.constructor.name ]);
  };
  var unsafeAllTokenNames = function ($313) {
      return Data_Map.keys(unsafeAllTokenNames$prime($313));
  };
  var unsafeAdaSymbol = Data_Monoid.mempty(Types_ByteArray.monoidByteArray);
  var unsafeIsAda = function (curSymbol) {
      return function (tokenName) {
          return Data_Eq.eq(eqCurrencySymbol)(curSymbol)(unsafeAdaSymbol) && Data_Eq.eq(Types_TokenName.eqTokenName)(tokenName)(Types_TokenName.adaToken);
      };
  };
  var valueOf = function (v) {
      return function (curSymbol) {
          return function (tokenName) {
              var v1 = unsafeIsAda(curSymbol)(tokenName);
              if (!v1) {
                  var v2 = Data_Map_Internal.lookup(ordCurrencySymbol)(curSymbol)(v.value1);
                  if (v2 instanceof Data_Maybe.Nothing) {
                      return Data_Semiring.zero(Data_BigInt.semiringBigInt);
                  };
                  if (v2 instanceof Data_Maybe.Just) {
                      var v3 = Data_Map_Internal.lookup(Types_TokenName.ordTokenName)(tokenName)(v2.value0);
                      if (v3 instanceof Data_Maybe.Nothing) {
                          return Data_Semiring.zero(Data_BigInt.semiringBigInt);
                      };
                      if (v3 instanceof Data_Maybe.Just) {
                          return v3.value0;
                      };
                      throw new Error("Failed pattern match at Cardano.Types.Value (line 600, column 19 - line 602, column 22): " + [ v3.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Cardano.Types.Value (line 598, column 7 - line 602, column 22): " + [ v2.constructor.name ]);
              };
              if (v1) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Cardano.Types.Value (line 596, column 3 - line 603, column 22): " + [ v1.constructor.name ]);
          };
      };
  };
  var valueToCoin$prime = function (v) {
      return valueOf(v)(unsafeAdaSymbol)(Types_TokenName.adaToken);
  };
  var valueToCoin = function ($314) {
      return Coin(valueToCoin$prime($314));
  };
  var union = function (dictOrd) {
      return function (l) {
          return function (r) {
              var rs = Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(r);
              var ls = Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(l);
              var rs$prime = Data_Array.filter(function (v) {
                  return !Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v1) {
                      return Data_Eq.eq(dictOrd.Eq0())(v1.value0)(v.value0);
                  })(ls);
              })(rs);
              var rs$prime$prime = Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)(Data_These.That.create))(rs$prime);
              var f = function (a) {
                  return function (b$prime) {
                      if (b$prime instanceof Data_Maybe.Nothing) {
                          return new Data_These.This(a);
                      };
                      if (b$prime instanceof Data_Maybe.Just) {
                          return new Data_These.Both(a, b$prime.value0);
                      };
                      throw new Error("Failed pattern match at Cardano.Types.Value (line 408, column 14 - line 410, column 25): " + [ b$prime.constructor.name ]);
                  };
              };
              var ls$prime = Data_Functor.map(Data_Functor.functorArray)(function (v) {
                  return new Data_Tuple.Tuple(v.value0, f(v.value1)(Data_Map_Internal.lookup(dictOrd)(v.value0)(Data_Map_Internal.fromFoldable(dictOrd)(Data_Foldable.foldableArray)(rs))));
              })(ls);
              return Data_Map_Internal.fromFoldable(dictOrd)(Data_Foldable.foldableArray)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(ls$prime)(rs$prime$prime));
          };
      };
  };
  var unionNonAda = function (v) {
      return function (v1) {
          var unBoth = function (k) {
              if (k instanceof Data_These.This) {
                  return Data_Functor.map(Data_Map_Internal.functorMap)(Data_These.This.create)(k.value0);
              };
              if (k instanceof Data_These.That) {
                  return Data_Functor.map(Data_Map_Internal.functorMap)(Data_These.That.create)(k.value0);
              };
              if (k instanceof Data_These.Both) {
                  return union(Types_TokenName.ordTokenName)(k.value0)(k.value1);
              };
              throw new Error("Failed pattern match at Cardano.Types.Value (line 439, column 16 - line 442, column 28): " + [ k.constructor.name ]);
          };
          var combined = union(ordCurrencySymbol)(v)(v1);
          return Data_Functor.map(Data_Map_Internal.functorMap)(unBoth)(combined);
      };
  };
  var unionWithNonAda = function (f) {
      return function (ls) {
          return function (rs) {
              var unBoth = function (k$prime) {
                  if (k$prime instanceof Data_These.This) {
                      return f(k$prime.value0)(Data_Semiring.zero(Data_BigInt.semiringBigInt));
                  };
                  if (k$prime instanceof Data_These.That) {
                      return f(Data_Semiring.zero(Data_BigInt.semiringBigInt))(k$prime.value0);
                  };
                  if (k$prime instanceof Data_These.Both) {
                      return f(k$prime.value0)(k$prime.value1);
                  };
                  throw new Error("Failed pattern match at Cardano.Types.Value (line 459, column 17 - line 462, column 24): " + [ k$prime.constructor.name ]);
              };
              var combined = unionNonAda(ls)(rs);
              return Data_Functor.map(Data_Map_Internal.functorMap)(Data_Functor.map(Data_Map_Internal.functorMap)(unBoth))(combined);
          };
      };
  };
  var joinSemilatticeNonAdaAsse = {
      join: unionWithNonAda(Data_Ord.max(Data_BigInt.ordBigInt))
  };
  var joinSemilatticeValue = {
      join: function (v) {
          return function (v1) {
              return new Value(Data_Lattice.join(joinSemilatticeCoin)(v.value0)(v1.value0), Data_Lattice.join(joinSemilatticeNonAdaAsse)(v.value1)(v1.value1));
          };
      }
  };
  var semigroupNonAdaAsset = {
      append: unionWithNonAda(Data_Semiring.add(Data_BigInt.semiringBigInt))
  };
  var monoidNonAdaAsset = {
      mempty: Data_Map_Internal.empty,
      Semigroup0: function () {
          return semigroupNonAdaAsset;
      }
  };
  var semigroupValue = {
      append: function (v) {
          return function (v1) {
              return new Value(Data_Semigroup.append(semigroupCoin)(v.value0)(v1.value0), Data_Semigroup.append(semigroupNonAdaAsset)(v.value1)(v1.value1));
          };
      }
  };
  var monoidValue = {
      mempty: new Value(Data_Monoid.mempty(monoidCoin), Data_Monoid.mempty(monoidNonAdaAsset)),
      Semigroup0: function () {
          return semigroupValue;
      }
  };
  var sumTokenNameLengths = (function () {
      var lenAdd = function (c) {
          return function (a) {
              return Data_Semiring.add(Data_BigInt.semiringBigInt)(c)(Data_BigInt.fromInt(Types_ByteArray.byteLength(Types_TokenName.getTokenName(a))));
          };
      };
      var $315 = Data_Foldable.foldl(Data_Set.foldableSet)(lenAdd)(Data_Semiring.zero(Data_BigInt.semiringBigInt));
      return function ($316) {
          return $315(unsafeAllTokenNames($316));
      };
  })();
  var split = function (dict) {
      return dict.split;
  };
  var scriptHashAsCurrencySymbol = (function () {
      var $317 = Data_Newtype.unwrap();
      return function ($318) {
          return CurrencySymbol($317(Serialization_Hash.scriptHashToBytes($318)));
      };
  })();
  var negation = function (dict) {
      return dict.negation;
  };
  var negateValue = {
      negation: function (v) {
          return new Value(negation(negateCoin)(v.value0), negation(negateNonAdaAsset)(v.value1));
      }
  };
  var mkValue = Value.create;
  var mkSingletonNonAdaAsset = function (curSymbol) {
      return function (tokenName) {
          return function (amount) {
              return Data_Map_Internal.singleton(curSymbol)(Data_Map_Internal.singleton(tokenName)(amount));
          };
      };
  };
  var mkSingletonValue$prime = function (curSymbol) {
      return function (tokenName) {
          return function (amount) {
              var isAdaCs = Data_Eq.eq(eqCurrencySymbol)(curSymbol)(unsafeAdaSymbol);
              return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_Alternative.guard(Data_Maybe.alternativeMaybe)(!isAdaCs || isAdaCs && Data_Eq.eq(Types_TokenName.eqTokenName)(tokenName)(Types_TokenName.adaToken)))(function () {
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)((function () {
                      if (isAdaCs) {
                          return new Value(amount, Data_Monoid.mempty(monoidNonAdaAsset));
                      };
                      return new Value(Data_Monoid.mempty(monoidCoin), mkSingletonNonAdaAsset(curSymbol)(tokenName)(amount));
                  })());
              });
          };
      };
  };
  var unflattenValue = function (v) {
      return mkSingletonValue$prime(v.value0)(v.value1.value0)(v.value1.value1);
  };
  var mkNonAdaAsset = NonAdaAsset;
  var mkCurrencySymbol = function (byteArr) {
      return Control_Apply.applySecond(Data_Maybe.applyMaybe)(Serialization_Hash.scriptHashFromBytes(Data_Newtype.wrap()(byteArr)))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(byteArr));
  };
  var mkNonAdaAssetsFromTokenMap$prime = function (dictTraversable) {
      var $324 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map_Internal.fromFoldable(ordCurrencySymbol)(dictTraversable.Foldable1()));
      var $325 = Data_Traversable.traverse(dictTraversable)(Data_Maybe.applicativeMaybe)(Data_Bitraversable.ltraverse(Data_Bitraversable.bitraversableTuple)(Data_Maybe.applicativeMaybe)(mkCurrencySymbol));
      return function ($326) {
          return $324($325($326));
      };
  };
  var mkNonAdaAssetsFromTokenMap = function (dictTraversable) {
      return function (xs) {
          return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(mkNonAdaAssetsFromTokenMap$prime(dictTraversable)(xs))(mkNonAdaAsset);
      };
  };
  var mpsSymbol = function (v) {
      return mkCurrencySymbol(Data_Newtype.unwrap()(Serialization_Hash.scriptHashToBytes(v)));
  };
  var mkCoin = function ($331) {
      return Coin(Data_BigInt.fromInt($331));
  };
  var mapThese = function (dictOrd) {
      return function (f) {
          return function (mps) {
              var mps$prime = Data_Functor.map(Data_Map_Internal.functorMap)(f)(mps);
              var f$prime = function (k) {
                  return function (v) {
                      return function (v1) {
                          if (v instanceof Data_These.This) {
                              return new Data_Tuple.Tuple(Data_Array.cons(new Data_Tuple.Tuple(k, v.value0))(v1.value0), v1.value1);
                          };
                          if (v instanceof Data_These.That) {
                              return new Data_Tuple.Tuple(v1.value0, Data_Array.cons(new Data_Tuple.Tuple(k, v.value0))(v1.value1));
                          };
                          if (v instanceof Data_These.Both) {
                              return new Data_Tuple.Tuple(Data_Array.cons(new Data_Tuple.Tuple(k, v.value0))(v1.value0), Data_Array.cons(new Data_Tuple.Tuple(k, v.value1))(v1.value1));
                          };
                          throw new Error("Failed pattern match at Cardano.Types.Value (line 702, column 23 - line 705, column 57): " + [ v.constructor.name ]);
                      };
                  };
              };
              return Data_Bifunctor.bimap(Data_Bifunctor.bifunctorTuple)(Data_Map_Internal.fromFoldable(dictOrd)(Data_Foldable.foldableArray))(Data_Map_Internal.fromFoldable(dictOrd)(Data_Foldable.foldableArray))(Data_FoldableWithIndex.foldrWithIndex(Data_Map_Internal.foldableWithIndexMap)(f$prime)(new Data_Tuple.Tuple([  ], [  ]))(mps$prime));
          };
      };
  };
  var splitNonAdaAsset = {
      split: function (v) {
          var splitIntl = function (mp$prime) {
              var v1 = mapThese(Types_TokenName.ordTokenName)(function (i) {
                  var $230 = Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(i)(Data_Semiring.zero(Data_BigInt.semiringBigInt));
                  if ($230) {
                      return new Data_These.This(Data_Ring.negate(Data_BigInt.ringBigInt)(i));
                  };
                  return new Data_These.That(i);
              })(mp$prime);
              return new Data_These.Both(v1.value0, v1.value1);
          };
          var v1 = mapThese(ordCurrencySymbol)(splitIntl)(v);
          return new Data_Tuple.Tuple(v1.value0, v1.value1);
      }
  };
  var splitValue = {
      split: function (v) {
          return Data_Semigroup.append(Data_Tuple.semigroupTuple(semigroupValue)(semigroupValue))(Data_Bifunctor.bimap(Data_Bifunctor.bifunctorTuple)(Data_Function.flip(Value.create)(Data_Monoid.mempty(monoidNonAdaAsset)))(Data_Function.flip(Value.create)(Data_Monoid.mempty(monoidNonAdaAsset)))(split(splitCoin)(v.value0)))(Data_Bifunctor.bimap(Data_Bifunctor.bifunctorTuple)(Value.create(Data_Monoid.mempty(monoidCoin)))(Value.create(Data_Monoid.mempty(monoidCoin)))(split(splitNonAdaAsset)(v.value1)));
      }
  };
  var lovelaceValueOf = Data_Function.flip(function ($332) {
      return Value.create(Coin($332));
  })(Data_Monoid.mempty(monoidNonAdaAsset));
  var isZero = function (v) {
      return Data_Foldable.all(Data_Map_Internal.foldableMap)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Foldable.all(Data_Map_Internal.foldableMap)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Eq.eq(Data_BigInt.eqBigInt)(Data_Semiring.zero(Data_BigInt.semiringBigInt))))(v.value1) && Data_Eq.eq(eqCoin)(v.value0)(Data_Monoid.mempty(monoidCoin));
  };
  var getNonAdaAsset$prime = function (v) {
      return v.value1;
  };
  var getNonAdaAsset = function (v) {
      return v.value1;
  };
  var getLovelace = function (v) {
      return v;
  };
  var getCurrencySymbol = function (v) {
      return v;
  };
  var flattenNonAdaValue = function (v) {
      return Control_Bind.bind(Data_List_Types.bindList)(Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList)(v))(function (v1) {
          return Control_Bind.bind(Data_List_Types.bindList)(Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList)(v1.value1))(function (v2) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Data_List_Types.bindList)(Control_Alternative.guard(Data_List_Types.alternativeList)(Data_Eq.notEq(Data_BigInt.eqBigInt)(v2.value1)(Data_Semiring.zero(Data_BigInt.semiringBigInt))))(function () {
                  return Control_Applicative.pure(Data_List_Types.applicativeList)(new Data_Tuple.Tuple(v1.value0, new Data_Tuple.Tuple(v2.value0, v2.value1)));
              });
          });
      });
  };
  var numNonAdaAssets = function (v) {
      return Data_Foldable.length(Data_List_Types.foldableList)(Data_BigInt.semiringBigInt)(flattenNonAdaValue(v.value1));
  };
  var numNonAdaCurrencySymbols = function (v) {
      return Data_BigInt.fromInt(Data_Foldable.length(Data_List_Types.foldableList)(Data_Semiring.semiringInt)(Data_List.nubByEq(Data_Function.on(Data_Eq.eq(eqCurrencySymbol))(Data_Tuple.fst))(flattenNonAdaValue(v.value1))));
  };
  var unsafeFlattenValue = function (v) {
      var flattenedNonAda = flattenNonAdaValue(v.value1);
      var v1 = Data_Eq.eq(eqCoin)(v.value0)(Data_Monoid.mempty(monoidCoin));
      if (v1) {
          return flattenedNonAda;
      };
      if (!v1) {
          return new Data_List_Types.Cons(new Data_Tuple.Tuple(unsafeAdaSymbol, new Data_Tuple.Tuple(Types_TokenName.adaToken, v.value0)), flattenedNonAda);
      };
      throw new Error("Failed pattern match at Cardano.Types.Value (line 493, column 5 - line 495, column 76): " + [ v1.constructor.name ]);
  };
  var isAdaOnly = function (v) {
      var v1 = unsafeFlattenValue(v);
      if (v1 instanceof Data_List_Types.Cons && v1.value1 instanceof Data_List_Types.Nil) {
          return Data_Eq.eq(eqCurrencySymbol)(v1.value0.value0)(unsafeAdaSymbol) && Data_Eq.eq(Types_TokenName.eqTokenName)(v1.value0.value1.value0)(Types_TokenName.adaToken);
      };
      return false;
  };
  var isPos = (function () {
      var $333 = Data_Foldable.all(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v) {
          return Data_Ord.greaterThan(Data_BigInt.ordBigInt)(v.value1.value1)(Data_Semiring.zero(Data_BigInt.semiringBigInt));
      });
      return function ($334) {
          return $333(unsafeFlattenValue($334));
      };
  })();
  var minus = function (x) {
      return function (y) {
          var negativeValues = Data_Functor.mapFlipped(Data_List_Types.functorList)(unsafeFlattenValue(y))(function (v) {
              return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, Data_Ring.negate(Data_BigInt.ringBigInt)(v.value1.value1)));
          });
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Traversable.traverse(Data_List_Types.traversableList)(Data_Maybe.applicativeMaybe)(unflattenValue)(negativeValues))(function (y$prime) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Semigroup.append(semigroupValue)(x)(Data_Foldable.fold(Data_List_Types.foldableList)(monoidValue)(y$prime)));
          });
      };
  };
  var filterNonAda = function (v) {
      return new Value(Data_Monoid.mempty(monoidCoin), v.value1);
  };
  var checkPred = function (f) {
      return function (v) {
          return function (v1) {
              var inner = Data_Foldable.all(Data_Map_Internal.foldableMap)(Data_HeytingAlgebra.heytingAlgebraBoolean)(f);
              return f(new Data_These.Both(v.value0, v1.value0)) && Data_Foldable.all(Data_Map_Internal.foldableMap)(Data_HeytingAlgebra.heytingAlgebraBoolean)(inner)(unionNonAda(v.value1)(v1.value1));
          };
      };
  };
  var checkBinRel = function (f) {
      return function (l) {
          return function (r) {
              var unThese = function (k$prime) {
                  if (k$prime instanceof Data_These.This) {
                      return f(k$prime.value0)(Data_Semiring.zero(Data_BigInt.semiringBigInt));
                  };
                  if (k$prime instanceof Data_These.That) {
                      return f(Data_Semiring.zero(Data_BigInt.semiringBigInt))(k$prime.value0);
                  };
                  if (k$prime instanceof Data_These.Both) {
                      return f(k$prime.value0)(k$prime.value1);
                  };
                  throw new Error("Failed pattern match at Cardano.Types.Value (line 550, column 18 - line 553, column 24): " + [ k$prime.constructor.name ]);
              };
              return checkPred(unThese)(l)(r);
          };
      };
  };
  var eq = checkBinRel(Data_Eq.eq(Data_BigInt.eqBigInt));
  var geq = checkBinRel(Data_Ord.greaterThanOrEq(Data_BigInt.ordBigInt));
  exports["Coin"] = Coin;
  exports["filterNonAda"] = filterNonAda;
  exports["geq"] = geq;
  exports["getCurrencySymbol"] = getCurrencySymbol;
  exports["getLovelace"] = getLovelace;
  exports["getNonAdaAsset"] = getNonAdaAsset;
  exports["getNonAdaAsset'"] = getNonAdaAsset$prime;
  exports["isAdaOnly"] = isAdaOnly;
  exports["isPos"] = isPos;
  exports["isZero"] = isZero;
  exports["lovelaceValueOf"] = lovelaceValueOf;
  exports["minus"] = minus;
  exports["mkCoin"] = mkCoin;
  exports["mkCurrencySymbol"] = mkCurrencySymbol;
  exports["mkNonAdaAsset"] = mkNonAdaAsset;
  exports["mkNonAdaAssetsFromTokenMap"] = mkNonAdaAssetsFromTokenMap;
  exports["mkSingletonValue'"] = mkSingletonValue$prime;
  exports["mkValue"] = mkValue;
  exports["mpsSymbol"] = mpsSymbol;
  exports["negation"] = negation;
  exports["numNonAdaAssets"] = numNonAdaAssets;
  exports["numNonAdaCurrencySymbols"] = numNonAdaCurrencySymbols;
  exports["split"] = split;
  exports["sumTokenNameLengths"] = sumTokenNameLengths;
  exports["scriptHashAsCurrencySymbol"] = scriptHashAsCurrencySymbol;
  exports["valueToCoin"] = valueToCoin;
  exports["valueToCoin'"] = valueToCoin$prime;
  exports["eqCoin"] = eqCoin;
  exports["ordCoin"] = ordCoin;
  exports["showCoin"] = showCoin;
  exports["semigroupCoin"] = semigroupCoin;
  exports["monoidCoin"] = monoidCoin;
  exports["ordCurrencySymbol"] = ordCurrencySymbol;
  exports["showCurrencySymbol"] = showCurrencySymbol;
  exports["eqNonAdaAsset"] = eqNonAdaAsset;
  exports["semigroupNonAdaAsset"] = semigroupNonAdaAsset;
  exports["monoidNonAdaAsset"] = monoidNonAdaAsset;
  exports["eqValue"] = eqValue;
  exports["showValue"] = showValue;
  exports["semigroupValue"] = semigroupValue;
  exports["monoidValue"] = monoidValue;
  exports["joinSemilatticeValue"] = joinSemilatticeValue;
  exports["negateValue"] = negateValue;
  exports["splitValue"] = splitValue;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Profunctor"] = $PS["Data.Profunctor"] || {};
  var exports = $PS["Data.Profunctor"];                  
  var profunctorFn = {
      dimap: function (a2b) {
          return function (c2d) {
              return function (b2c) {
                  return function ($8) {
                      return c2d(b2c(a2b($8)));
                  };
              };
          };
      }
  };
  var dimap = function (dict) {
      return dict.dimap;
  };
  exports["dimap"] = dimap;
  exports["profunctorFn"] = profunctorFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Lens.Iso"] = $PS["Data.Lens.Iso"] || {};
  var exports = $PS["Data.Lens.Iso"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var iso = function (f) {
      return function (g) {
          return function (dictProfunctor) {
              return function (pab) {
                  return Data_Profunctor.dimap(dictProfunctor)(f)(g)(pab);
              };
          };
      };
  };
  exports["iso"] = iso;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Lens.Iso.Newtype"] = $PS["Data.Lens.Iso.Newtype"] || {};
  var exports = $PS["Data.Lens.Iso.Newtype"];
  var Data_Lens_Iso = $PS["Data.Lens.Iso"];
  var Data_Newtype = $PS["Data.Newtype"];                
  var _Newtype = function () {
      return function () {
          return function (dictProfunctor) {
              return Data_Lens_Iso.iso(Data_Newtype.unwrap())(Data_Newtype.wrap())(dictProfunctor);
          };
      };
  };
  exports["_Newtype"] = _Newtype;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Profunctor.Strong"] = $PS["Data.Profunctor.Strong"] || {};
  var exports = $PS["Data.Profunctor.Strong"];
  var Control_Category = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var strongFn = {
      first: function (a2b) {
          return function (v) {
              return new Data_Tuple.Tuple(a2b(v.value0), v.value1);
          };
      },
      second: Data_Functor.map(Data_Tuple.functorTuple),
      Profunctor0: function () {
          return Data_Profunctor.profunctorFn;
      }
  };
  var second = function (dict) {
      return dict.second;
  };
  var first = function (dict) {
      return dict.first;
  };
  var splitStrong = function (dictCategory) {
      return function (dictStrong) {
          return function (l) {
              return function (r) {
                  return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(first(dictStrong)(l))(second(dictStrong)(r));
              };
          };
      };
  };
  var fanout = function (dictCategory) {
      return function (dictStrong) {
          return function (l) {
              return function (r) {
                  var split = Data_Profunctor.dimap(dictStrong.Profunctor0())(Control_Category.identity(Control_Category.categoryFn))(function (a) {
                      return new Data_Tuple.Tuple(a, a);
                  })(Control_Category.identity(dictCategory));
                  return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(split)(splitStrong(dictCategory)(dictStrong)(l)(r));
              };
          };
      };
  };
  exports["first"] = first;
  exports["second"] = second;
  exports["fanout"] = fanout;
  exports["strongFn"] = strongFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Lens.Lens"] = $PS["Data.Lens.Lens"] || {};
  var exports = $PS["Data.Lens.Lens"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Tuple = $PS["Data.Tuple"];
  var lens$prime = function (to) {
      return function (dictStrong) {
          return function (pab) {
              return Data_Profunctor.dimap(dictStrong.Profunctor0())(to)(function (v) {
                  return v.value1(v.value0);
              })(Data_Profunctor_Strong.first(dictStrong)(pab));
          };
      };
  };
  var lens = function (get) {
      return function (set) {
          return function (dictStrong) {
              return lens$prime(function (s) {
                  return new Data_Tuple.Tuple(get(s), function (b) {
                      return set(s)(b);
                  });
              })(dictStrong);
          };
      };
  };
  exports["lens"] = lens;
  exports["lens'"] = lens$prime;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Lens.Record"] = $PS["Data.Lens.Record"] || {};
  var exports = $PS["Data.Lens.Record"];
  var Data_Function = $PS["Data.Function"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Record = $PS["Record"];                
  var prop = function (dictIsSymbol) {
      return function () {
          return function () {
              return function (l) {
                  return function (dictStrong) {
                      return Data_Lens_Lens.lens(Record.get(dictIsSymbol)()(l))(Data_Function.flip(Record.set(dictIsSymbol)()()(l)))(dictStrong);
                  };
              };
          };
      };
  };
  exports["prop"] = prop;
})(PS);
(function(exports) {
  exports._to_str = x => x.to_str();

  exports._vrfKeyHashBytes = vrfKeyhash =>
      vrfKeyhash.to_bytes();
})(PS["Serialization.Types"] = PS["Serialization.Types"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Serialization.Types"] = $PS["Serialization.Types"] || {};
  var exports = $PS["Serialization.Types"];
  var $foreign = $PS["Serialization.Types"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Show = $PS["Data.Show"];
  var Types_ByteArray = $PS["Types.ByteArray"];                
  var showVRFKeyHash = {
      show: function ($4) {
          return Types_ByteArray.byteArrayToHex($foreign["_vrfKeyHashBytes"]($4));
      }
  };
  var showBigNum = {
      show: $foreign["_to_str"]
  };
  var eqVRFKeyHash = {
      eq: Data_Function.on(Data_Eq.eq(Data_Eq.eqString))(Data_Show.show(showVRFKeyHash))
  };
  var eqBigNum = {
      eq: Data_Function.on(Data_Eq.eq(Data_Eq.eqString))(Data_Show.show(showBigNum))
  };
  exports["showBigNum"] = showBigNum;
  exports["eqBigNum"] = eqBigNum;
  exports["eqVRFKeyHash"] = eqVRFKeyHash;
})(PS);
(function(exports) {
  /* global require exports BROWSER_RUNTIME */

  var lib;
  if (typeof BROWSER_RUNTIME != 'undefined' && BROWSER_RUNTIME) {
      lib = require('@emurgo/cardano-serialization-lib-browser');
  } else {
      lib = require('@emurgo/cardano-serialization-lib-nodejs');
  }

  exports.newPositive = lib.Int.new;
  exports.newNegative = lib.Int.new_negative;
  exports._intToStr = n => n.to_str();
})(PS["Types.Int"] = PS["Types.Int"] || {});
(function(exports) {
  /* global require exports BROWSER_RUNTIME */

  var lib;
  if (typeof BROWSER_RUNTIME != 'undefined' && BROWSER_RUNTIME) {
      lib = require('@emurgo/cardano-serialization-lib-browser');
  } else {
      lib = require('@emurgo/cardano-serialization-lib-nodejs');
  }

  exports.bigNumFromString = helper => str => {
      try {
          return helper.just(lib.BigNum.from_str(str));
      } catch (_) {
          return helper.nothing;
      }
  };
})(PS["Serialization.BigNum"] = PS["Serialization.BigNum"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Serialization.BigNum"] = $PS["Serialization.BigNum"] || {};
  var exports = $PS["Serialization.BigNum"];
  var $foreign = $PS["Serialization.BigNum"];
  var Data_BigInt = $PS["Data.BigInt"];
  var FfiHelpers = $PS["FfiHelpers"];                
  var bigNumFromBigInt = (function () {
      var $0 = $foreign.bigNumFromString(FfiHelpers.maybeFfiHelper);
      return function ($1) {
          return $0(Data_BigInt.toString($1));
      };
  })();
  exports["bigNumFromBigInt"] = bigNumFromBigInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Types.Int"] = $PS["Types.Int"] || {};
  var exports = $PS["Types.Int"];
  var $foreign = $PS["Types.Int"];
  var Control_Alt = $PS["Control.Alt"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ring = $PS["Data.Ring"];
  var Serialization_BigNum = $PS["Serialization.BigNum"];
  var eqInt = {
      eq: Data_Function.on(Data_Eq.eq(Data_Eq.eqString))($foreign["_intToStr"])
  };
  var toBigInt = function ($$int) {
      return Data_Maybe.fromJust()(Data_BigInt.fromString($foreign["_intToStr"]($$int)));
  };
  var ordInt = {
      compare: Data_Function.on(Data_Ord.compare(Data_BigInt.ordBigInt))(toBigInt),
      Eq0: function () {
          return eqInt;
      }
  };
  var fromBigInt = function (bi) {
      return Control_Alt.alt(Data_Maybe.altMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)($foreign.newPositive)(Serialization_BigNum.bigNumFromBigInt(bi)))(Data_Functor.map(Data_Maybe.functorMaybe)($foreign.newNegative)(Serialization_BigNum.bigNumFromBigInt(Data_Ring.negate(Data_BigInt.ringBigInt)(bi))));
  };
  exports["fromBigInt"] = fromBigInt;
  exports["toBigInt"] = toBigInt;
  exports["eqInt"] = eqInt;
  exports["ordInt"] = ordInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Types.PlutusData"] = $PS["Types.PlutusData"] || {};
  var exports = $PS["Types.PlutusData"];
  var Aeson = $PS["Aeson"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Types_ByteArray = $PS["Types.ByteArray"];                
  var Constr = (function () {
      function Constr(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Constr.create = function (value0) {
          return function (value1) {
              return new Constr(value0, value1);
          };
      };
      return Constr;
  })();
  var $$Map = (function () {
      function $$Map(value0) {
          this.value0 = value0;
      };
      $$Map.create = function (value0) {
          return new $$Map(value0);
      };
      return $$Map;
  })();
  var List = (function () {
      function List(value0) {
          this.value0 = value0;
      };
      List.create = function (value0) {
          return new List(value0);
      };
      return List;
  })();
  var Integer = (function () {
      function Integer(value0) {
          this.value0 = value0;
      };
      Integer.create = function (value0) {
          return new Integer(value0);
      };
      return Integer;
  })();
  var Bytes = (function () {
      function Bytes(value0) {
          this.value0 = value0;
      };
      Bytes.create = function (value0) {
          return new Bytes(value0);
      };
      return Bytes;
  })();
  var genericPlutusData_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new Constr(x.value0.value0, x.value0.value1);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return new $$Map(x.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
              return new List(x.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
              return new Integer(x.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inr))) {
              return new Bytes(x.value0.value0.value0.value0);
          };
          throw new Error("Failed pattern match at Types.PlutusData (line 38, column 1 - line 38, column 37): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof Constr) {
              return new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1));
          };
          if (x instanceof $$Map) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
          };
          if (x instanceof List) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
          };
          if (x instanceof Integer) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))));
          };
          if (x instanceof Bytes) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0))));
          };
          throw new Error("Failed pattern match at Types.PlutusData (line 38, column 1 - line 38, column 37): " + [ x.constructor.name ]);
      }
  };
  var showPlutusData = {
      show: function (x) {
          return Data_Show_Generic.genericShow(genericPlutusData_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Data_BigInt.showBigInt))(Data_Show_Generic.genericShowArgsArgument(Data_Show.showArray(showPlutusData))))({
              reflectSymbol: function () {
                  return "Constr";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showArray(Data_Tuple.showTuple(showPlutusData)(showPlutusData))))({
              reflectSymbol: function () {
                  return "Map";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showArray(showPlutusData)))({
              reflectSymbol: function () {
                  return "List";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_BigInt.showBigInt))({
              reflectSymbol: function () {
                  return "Integer";
              }
          }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ByteArray.showByteArray))({
              reflectSymbol: function () {
                  return "Bytes";
              }
          }))))))(x);
      }
  };
  var eqPlutusData = {
      eq: function (x) {
          return function (y) {
              if (x instanceof Constr && y instanceof Constr) {
                  return Data_Eq.eq(Data_BigInt.eqBigInt)(x.value0)(y.value0) && Data_Eq.eq(Data_Eq.eqArray(eqPlutusData))(x.value1)(y.value1);
              };
              if (x instanceof $$Map && y instanceof $$Map) {
                  return Data_Eq.eq(Data_Eq.eqArray(Data_Tuple.eqTuple(eqPlutusData)(eqPlutusData)))(x.value0)(y.value0);
              };
              if (x instanceof List && y instanceof List) {
                  return Data_Eq.eq(Data_Eq.eqArray(eqPlutusData))(x.value0)(y.value0);
              };
              if (x instanceof Integer && y instanceof Integer) {
                  return Data_Eq.eq(Data_BigInt.eqBigInt)(x.value0)(y.value0);
              };
              if (x instanceof Bytes && y instanceof Bytes) {
                  return Data_Eq.eq(Types_ByteArray.eqByteArray)(x.value0)(y.value0);
              };
              return false;
          };
      }
  };
  var decodeAesonPlutusData = {
      decodeAeson: function (aeson) {
          var decodeMap = Control_Bind.bind(Data_Either.bindEither)(Aeson.decodeAeson(Aeson.decodeAesonObject(Aeson.decodeAesonAeson))(aeson))(function (obj) {
              return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonArray(Aeson.decodeAesonObject(Aeson.decodeAesonAeson)))(obj)("map"))(function (map1) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable["for"](Data_Either.applicativeEither)(Data_Traversable.traversableArray)(map1)(function (entryJson) {
                      return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(decodeAesonPlutusData)(entryJson)("key"))(function (key) {
                          return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(decodeAesonPlutusData)(entryJson)("value"))(function (value) {
                              return Control_Applicative.pure(Data_Either.applicativeEither)(new Data_Tuple.Tuple(key, value));
                          });
                      });
                  }))(function (kvs) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)(new $$Map(kvs));
                  });
              });
          });
          var decodeList = Data_Functor.map(Data_Either.functorEither)(List.create)(Aeson.decodeAeson(Aeson.decodeAesonArray(decodeAesonPlutusData))(aeson));
          var decodeInteger = Data_Functor.map(Data_Either.functorEither)(Integer.create)(Aeson.decodeAeson(Aeson.decodeAesonBigInt)(aeson));
          var decodeConstr = Control_Bind.bind(Data_Either.bindEither)(Aeson.decodeAeson(Aeson.decodeAesonObject(Aeson.decodeAesonAeson))(aeson))(function (x) {
              return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonBigInt)(x)("constr"))(function (constr) {
                  return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonArray(decodeAesonPlutusData))(x)("fields"))(function (fields) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)(new Constr(constr, fields));
                  });
              });
          });
          var decodeBytes = Control_Bind.bind(Data_Either.bindEither)(Aeson.decodeAeson(Aeson.decodeAesonString)(aeson))(function (bytesHex) {
              var v = Types_ByteArray.hexToByteArray(bytesHex);
              if (v instanceof Data_Maybe.Nothing) {
                  return new Data_Either.Left(new Data_Argonaut_Decode_Error.UnexpectedValue(Aeson.toStringifiedNumbersJson(Aeson.encodeAeson(Aeson.encodeAesonString)(bytesHex))));
              };
              if (v instanceof Data_Maybe.Just) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(new Bytes(v.value0));
              };
              throw new Error("Failed pattern match at Types.PlutusData (line 79, column 7 - line 82, column 37): " + [ v.constructor.name ]);
          });
          return Control_Alt.alt(Data_Either.altEither)(Control_Alt.alt(Data_Either.altEither)(Control_Alt.alt(Data_Either.altEither)(Control_Alt.alt(Data_Either.altEither)(decodeConstr)(decodeMap))(decodeList))(decodeInteger))(decodeBytes);
      }
  };
  exports["Constr"] = Constr;
  exports["Map"] = $$Map;
  exports["List"] = List;
  exports["Integer"] = Integer;
  exports["Bytes"] = Bytes;
  exports["eqPlutusData"] = eqPlutusData;
  exports["showPlutusData"] = showPlutusData;
  exports["decodeAesonPlutusData"] = decodeAesonPlutusData;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Bounded.Generic"] = $PS["Data.Bounded.Generic"] || {};
  var exports = $PS["Data.Bounded.Generic"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];                
  var genericTopNoArguments = {
      "genericTop'": Data_Generic_Rep.NoArguments.value
  };
  var genericTop$prime = function (dict) {
      return dict["genericTop'"];
  };
  var genericTopConstructor = function (dictGenericTop) {
      return {
          "genericTop'": genericTop$prime(dictGenericTop)
      };
  };
  var genericBottomNoArguments = {
      "genericBottom'": Data_Generic_Rep.NoArguments.value
  };
  var genericBottom$prime = function (dict) {
      return dict["genericBottom'"];
  };
  var genericBottomConstructor = function (dictGenericBottom) {
      return {
          "genericBottom'": genericBottom$prime(dictGenericBottom)
      };
  };
  var genericBottomSum = function (dictGenericBottom) {
      return {
          "genericBottom'": new Data_Generic_Rep.Inl(genericBottom$prime(dictGenericBottom))
      };
  };
  exports["genericBottom'"] = genericBottom$prime;
  exports["genericTop'"] = genericTop$prime;
  exports["genericBottomNoArguments"] = genericBottomNoArguments;
  exports["genericBottomSum"] = genericBottomSum;
  exports["genericBottomConstructor"] = genericBottomConstructor;
  exports["genericTopNoArguments"] = genericTopNoArguments;
  exports["genericTopConstructor"] = genericTopConstructor;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Enum.Generic"] = $PS["Data.Enum.Generic"] || {};
  var exports = $PS["Data.Enum.Generic"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded_Generic = $PS["Data.Bounded.Generic"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];                
  var genericToEnum$prime = function (dict) {
      return dict["genericToEnum'"];
  };
  var genericToEnum = function (dictGeneric) {
      return function (dictGenericBoundedEnum) {
          var $95 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.to(dictGeneric));
          var $96 = genericToEnum$prime(dictGenericBoundedEnum);
          return function ($97) {
              return $95($96($97));
          };
      };
  };
  var genericSucc$prime = function (dict) {
      return dict["genericSucc'"];
  };
  var genericSucc = function (dictGeneric) {
      return function (dictGenericEnum) {
          var $98 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.to(dictGeneric));
          var $99 = genericSucc$prime(dictGenericEnum);
          var $100 = Data_Generic_Rep.from(dictGeneric);
          return function ($101) {
              return $98($99($100($101)));
          };
      };
  };
  var genericPred$prime = function (dict) {
      return dict["genericPred'"];
  };
  var genericPred = function (dictGeneric) {
      return function (dictGenericEnum) {
          var $102 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.to(dictGeneric));
          var $103 = genericPred$prime(dictGenericEnum);
          var $104 = Data_Generic_Rep.from(dictGeneric);
          return function ($105) {
              return $102($103($104($105)));
          };
      };
  };
  var genericFromEnum$prime = function (dict) {
      return dict["genericFromEnum'"];
  };
  var genericFromEnum = function (dictGeneric) {
      return function (dictGenericBoundedEnum) {
          var $106 = genericFromEnum$prime(dictGenericBoundedEnum);
          var $107 = Data_Generic_Rep.from(dictGeneric);
          return function ($108) {
              return $106($107($108));
          };
      };
  };
  var genericEnumSum = function (dictGenericEnum) {
      return function (dictGenericTop) {
          return function (dictGenericEnum1) {
              return function (dictGenericBottom) {
                  return {
                      "genericPred'": function (v) {
                          if (v instanceof Data_Generic_Rep.Inl) {
                              return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Inl.create)(genericPred$prime(dictGenericEnum)(v.value0));
                          };
                          if (v instanceof Data_Generic_Rep.Inr) {
                              var v1 = genericPred$prime(dictGenericEnum1)(v.value0);
                              if (v1 instanceof Data_Maybe.Nothing) {
                                  return new Data_Maybe.Just(new Data_Generic_Rep.Inl(Data_Bounded_Generic["genericTop'"](dictGenericTop)));
                              };
                              if (v1 instanceof Data_Maybe.Just) {
                                  return new Data_Maybe.Just(new Data_Generic_Rep.Inr(v1.value0));
                              };
                              throw new Error("Failed pattern match at Data.Enum.Generic (line 30, column 14 - line 32, column 31): " + [ v1.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Enum.Generic (line 28, column 18 - line 32, column 31): " + [ v.constructor.name ]);
                      },
                      "genericSucc'": function (v) {
                          if (v instanceof Data_Generic_Rep.Inl) {
                              var v1 = genericSucc$prime(dictGenericEnum)(v.value0);
                              if (v1 instanceof Data_Maybe.Nothing) {
                                  return new Data_Maybe.Just(new Data_Generic_Rep.Inr(Data_Bounded_Generic["genericBottom'"](dictGenericBottom)));
                              };
                              if (v1 instanceof Data_Maybe.Just) {
                                  return new Data_Maybe.Just(new Data_Generic_Rep.Inl(v1.value0));
                              };
                              throw new Error("Failed pattern match at Data.Enum.Generic (line 34, column 14 - line 36, column 31): " + [ v1.constructor.name ]);
                          };
                          if (v instanceof Data_Generic_Rep.Inr) {
                              return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Inr.create)(genericSucc$prime(dictGenericEnum1)(v.value0));
                          };
                          throw new Error("Failed pattern match at Data.Enum.Generic (line 33, column 18 - line 37, column 36): " + [ v.constructor.name ]);
                      }
                  };
              };
          };
      };
  };
  var genericEnumNoArguments = {
      "genericPred'": function (v) {
          return Data_Maybe.Nothing.value;
      },
      "genericSucc'": function (v) {
          return Data_Maybe.Nothing.value;
      }
  };
  var genericEnumConstructor = function (dictGenericEnum) {
      return {
          "genericPred'": function (v) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Constructor)(genericPred$prime(dictGenericEnum)(v));
          },
          "genericSucc'": function (v) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Constructor)(genericSucc$prime(dictGenericEnum)(v));
          }
      };
  };
  var genericCardinality$prime = function (dict) {
      return dict["genericCardinality'"];
  };
  var genericCardinality = function (dictGeneric) {
      return function (dictGenericBoundedEnum) {
          return Data_Newtype.unwrap()(genericCardinality$prime(dictGenericBoundedEnum));
      };
  };
  var genericBoundedEnumSum = function (dictGenericBoundedEnum) {
      return function (dictGenericBoundedEnum1) {
          return {
              "genericCardinality'": Data_Newtype.unwrap()(genericCardinality$prime(dictGenericBoundedEnum)) + Data_Newtype.unwrap()(genericCardinality$prime(dictGenericBoundedEnum1)) | 0,
              "genericToEnum'": function (n) {
                  var to = function (v) {
                      if (n >= 0 && n < v) {
                          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Inl.create)(genericToEnum$prime(dictGenericBoundedEnum)(n));
                      };
                      if (Data_Boolean.otherwise) {
                          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Inr.create)(genericToEnum$prime(dictGenericBoundedEnum1)(n - v | 0));
                      };
                      throw new Error("Failed pattern match at Data.Enum.Generic (line 83, column 5 - line 83, column 43): " + [ v.constructor.name ]);
                  };
                  return to(genericCardinality$prime(dictGenericBoundedEnum));
              },
              "genericFromEnum'": function (v) {
                  if (v instanceof Data_Generic_Rep.Inl) {
                      return genericFromEnum$prime(dictGenericBoundedEnum)(v.value0);
                  };
                  if (v instanceof Data_Generic_Rep.Inr) {
                      return genericFromEnum$prime(dictGenericBoundedEnum1)(v.value0) + Data_Newtype.unwrap()(genericCardinality$prime(dictGenericBoundedEnum)) | 0;
                  };
                  throw new Error("Failed pattern match at Data.Enum.Generic (line 87, column 22 - line 89, column 80): " + [ v.constructor.name ]);
              }
          };
      };
  };
  var genericBoundedEnumNoArguments = {
      "genericCardinality'": 1,
      "genericToEnum'": function (i) {
          var $92 = i === 0;
          if ($92) {
              return new Data_Maybe.Just(Data_Generic_Rep.NoArguments.value);
          };
          return Data_Maybe.Nothing.value;
      },
      "genericFromEnum'": function (v) {
          return 0;
      }
  };
  var genericBoundedEnumConstructor = function (dictGenericBoundedEnum) {
      return {
          "genericCardinality'": Data_Newtype.unwrap()(genericCardinality$prime(dictGenericBoundedEnum)),
          "genericToEnum'": function (i) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Constructor)(genericToEnum$prime(dictGenericBoundedEnum)(i));
          },
          "genericFromEnum'": function (v) {
              return genericFromEnum$prime(dictGenericBoundedEnum)(v);
          }
      };
  };
  exports["genericPred"] = genericPred;
  exports["genericSucc"] = genericSucc;
  exports["genericCardinality"] = genericCardinality;
  exports["genericToEnum"] = genericToEnum;
  exports["genericFromEnum"] = genericFromEnum;
  exports["genericEnumNoArguments"] = genericEnumNoArguments;
  exports["genericEnumConstructor"] = genericEnumConstructor;
  exports["genericEnumSum"] = genericEnumSum;
  exports["genericBoundedEnumNoArguments"] = genericBoundedEnumNoArguments;
  exports["genericBoundedEnumConstructor"] = genericBoundedEnumConstructor;
  exports["genericBoundedEnumSum"] = genericBoundedEnumSum;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Types.RedeemerTag"] = $PS["Types.RedeemerTag"] || {};
  var exports = $PS["Types.RedeemerTag"];
  var Data_Bounded_Generic = $PS["Data.Bounded.Generic"];
  var Data_Enum_Generic = $PS["Data.Enum.Generic"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];                
  var Spend = (function () {
      function Spend() {

      };
      Spend.value = new Spend();
      return Spend;
  })();
  var Mint = (function () {
      function Mint() {

      };
      Mint.value = new Mint();
      return Mint;
  })();
  var Cert = (function () {
      function Cert() {

      };
      Cert.value = new Cert();
      return Cert;
  })();
  var Reward = (function () {
      function Reward() {

      };
      Reward.value = new Reward();
      return Reward;
  })();
  var genericRedeemerTag_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return Spend.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return Mint.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
              return Cert.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inr)) {
              return Reward.value;
          };
          throw new Error("Failed pattern match at Types.RedeemerTag (line 21, column 1 - line 21, column 38): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof Spend) {
              return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
          };
          if (x instanceof Mint) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
          };
          if (x instanceof Cert) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
          };
          if (x instanceof Reward) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)));
          };
          throw new Error("Failed pattern match at Types.RedeemerTag (line 21, column 1 - line 21, column 38): " + [ x.constructor.name ]);
      }
  };
  var showRedeemerTag = {
      show: Data_Show_Generic.genericShow(genericRedeemerTag_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "Spend";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "Mint";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "Cert";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "Reward";
          }
      })))))
  };
  var eqRedeemerTag = {
      eq: function (x) {
          return function (y) {
              if (x instanceof Spend && y instanceof Spend) {
                  return true;
              };
              if (x instanceof Mint && y instanceof Mint) {
                  return true;
              };
              if (x instanceof Cert && y instanceof Cert) {
                  return true;
              };
              if (x instanceof Reward && y instanceof Reward) {
                  return true;
              };
              return false;
          };
      }
  };
  var ordRedeemerTag = {
      compare: function (x) {
          return function (y) {
              if (x instanceof Spend && y instanceof Spend) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Spend) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Spend) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Mint && y instanceof Mint) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Mint) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Mint) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Cert && y instanceof Cert) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof Cert) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Cert) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Reward && y instanceof Reward) {
                  return Data_Ordering.EQ.value;
              };
              throw new Error("Failed pattern match at Types.RedeemerTag (line 23, column 1 - line 23, column 32): " + [ x.constructor.name, y.constructor.name ]);
          };
      },
      Eq0: function () {
          return eqRedeemerTag;
      }
  };
  var enumRedeemerTag = {
      pred: Data_Enum_Generic.genericPred(genericRedeemerTag_)(Data_Enum_Generic.genericEnumSum(Data_Enum_Generic.genericEnumConstructor(Data_Enum_Generic.genericEnumNoArguments))(Data_Bounded_Generic.genericTopConstructor(Data_Bounded_Generic.genericTopNoArguments))(Data_Enum_Generic.genericEnumSum(Data_Enum_Generic.genericEnumConstructor(Data_Enum_Generic.genericEnumNoArguments))(Data_Bounded_Generic.genericTopConstructor(Data_Bounded_Generic.genericTopNoArguments))(Data_Enum_Generic.genericEnumSum(Data_Enum_Generic.genericEnumConstructor(Data_Enum_Generic.genericEnumNoArguments))(Data_Bounded_Generic.genericTopConstructor(Data_Bounded_Generic.genericTopNoArguments))(Data_Enum_Generic.genericEnumConstructor(Data_Enum_Generic.genericEnumNoArguments))(Data_Bounded_Generic.genericBottomConstructor(Data_Bounded_Generic.genericBottomNoArguments)))(Data_Bounded_Generic.genericBottomSum(Data_Bounded_Generic.genericBottomConstructor(Data_Bounded_Generic.genericBottomNoArguments))))(Data_Bounded_Generic.genericBottomSum(Data_Bounded_Generic.genericBottomConstructor(Data_Bounded_Generic.genericBottomNoArguments)))),
      succ: Data_Enum_Generic.genericSucc(genericRedeemerTag_)(Data_Enum_Generic.genericEnumSum(Data_Enum_Generic.genericEnumConstructor(Data_Enum_Generic.genericEnumNoArguments))(Data_Bounded_Generic.genericTopConstructor(Data_Bounded_Generic.genericTopNoArguments))(Data_Enum_Generic.genericEnumSum(Data_Enum_Generic.genericEnumConstructor(Data_Enum_Generic.genericEnumNoArguments))(Data_Bounded_Generic.genericTopConstructor(Data_Bounded_Generic.genericTopNoArguments))(Data_Enum_Generic.genericEnumSum(Data_Enum_Generic.genericEnumConstructor(Data_Enum_Generic.genericEnumNoArguments))(Data_Bounded_Generic.genericTopConstructor(Data_Bounded_Generic.genericTopNoArguments))(Data_Enum_Generic.genericEnumConstructor(Data_Enum_Generic.genericEnumNoArguments))(Data_Bounded_Generic.genericBottomConstructor(Data_Bounded_Generic.genericBottomNoArguments)))(Data_Bounded_Generic.genericBottomSum(Data_Bounded_Generic.genericBottomConstructor(Data_Bounded_Generic.genericBottomNoArguments))))(Data_Bounded_Generic.genericBottomSum(Data_Bounded_Generic.genericBottomConstructor(Data_Bounded_Generic.genericBottomNoArguments)))),
      Ord0: function () {
          return ordRedeemerTag;
      }
  };
  var boundedRedeemerTag = {
      top: Reward.value,
      bottom: Spend.value,
      Ord0: function () {
          return ordRedeemerTag;
      }
  };
  var boundedEnumRedeemerTag = {
      cardinality: Data_Enum_Generic.genericCardinality(genericRedeemerTag_)(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))))),
      toEnum: Data_Enum_Generic.genericToEnum(genericRedeemerTag_)(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))))),
      fromEnum: Data_Enum_Generic.genericFromEnum(genericRedeemerTag_)(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))))),
      Bounded0: function () {
          return boundedRedeemerTag;
      },
      Enum1: function () {
          return enumRedeemerTag;
      }
  };
  exports["Spend"] = Spend;
  exports["Mint"] = Mint;
  exports["Cert"] = Cert;
  exports["Reward"] = Reward;
  exports["eqRedeemerTag"] = eqRedeemerTag;
  exports["showRedeemerTag"] = showRedeemerTag;
  exports["boundedEnumRedeemerTag"] = boundedEnumRedeemerTag;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Types.Transaction"] = $PS["Types.Transaction"] || {};
  var exports = $PS["Types.Transaction"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Data_UInt = $PS["Data.UInt"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var DataHash = function (x) {
      return x;
  };                                          
  var ordDataHash = Types_ByteArray.ordByteArray;
  var genericTransactionInput_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var genericTransactionHash_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showTransactionHash = {
      show: Data_Show_Generic.genericShow(genericTransactionHash_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ByteArray.showByteArray))({
          reflectSymbol: function () {
              return "TransactionHash";
          }
      }))
  };
  var showTransactionInput = {
      show: Data_Show_Generic.genericShow(genericTransactionInput_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "index";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "transactionId";
          }
      })(Data_Show.showRecordFieldsNil)(showTransactionHash))(Data_UInt.uintShowInstance))))({
          reflectSymbol: function () {
              return "TransactionInput";
          }
      }))
  };
  var genericDataHash_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showDataHash = {
      show: Data_Show_Generic.genericShow(genericDataHash_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_ByteArray.showByteArray))({
          reflectSymbol: function () {
              return "DataHash";
          }
      }))
  };                                                
  var eqTransactionHash = Types_ByteArray.eqByteArray;
  var eqTransactionInput = Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
      reflectSymbol: function () {
          return "transactionId";
      }
  })(eqTransactionHash))()({
      reflectSymbol: function () {
          return "index";
      }
  })(Data_UInt.uintEqInstance));
  var ordTransactionHash = {
      compare: function (v) {
          return function (v1) {
              return Data_Ord.compare(Data_Ord.ordString)(Types_ByteArray.byteArrayToHex(v))(Types_ByteArray.byteArrayToHex(v1));
          };
      },
      Eq0: function () {
          return eqTransactionHash;
      }
  };
  var ordTransactionInput = {
      compare: function (v) {
          return function (v1) {
              var v2 = Data_Ord.compare(ordTransactionHash)(v.transactionId)(v1.transactionId);
              if (v2 instanceof Data_Ordering.EQ) {
                  return Data_Ord.compare(Data_UInt.uintOrd)(v.index)(v1.index);
              };
              return v2;
          };
      },
      Eq0: function () {
          return eqTransactionInput;
      }
  };
  var eqDataHash = Types_ByteArray.eqByteArray;
  exports["DataHash"] = DataHash;
  exports["eqTransactionInput"] = eqTransactionInput;
  exports["ordTransactionInput"] = ordTransactionInput;
  exports["showTransactionInput"] = showTransactionInput;
  exports["eqTransactionHash"] = eqTransactionHash;
  exports["showTransactionHash"] = showTransactionHash;
  exports["eqDataHash"] = eqDataHash;
  exports["ordDataHash"] = ordDataHash;
  exports["showDataHash"] = showDataHash;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Types.TransactionMetadata"] = $PS["Types.TransactionMetadata"] || {};
  var exports = $PS["Types.TransactionMetadata"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Helpers = $PS["Helpers"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_Int = $PS["Types.Int"];                
  var TransactionMetadatumLabel = function (x) {
      return x;
  };
  var MetadataMap = (function () {
      function MetadataMap(value0) {
          this.value0 = value0;
      };
      MetadataMap.create = function (value0) {
          return new MetadataMap(value0);
      };
      return MetadataMap;
  })();
  var MetadataList = (function () {
      function MetadataList(value0) {
          this.value0 = value0;
      };
      MetadataList.create = function (value0) {
          return new MetadataList(value0);
      };
      return MetadataList;
  })();
  var Int = (function () {
      function Int(value0) {
          this.value0 = value0;
      };
      Int.create = function (value0) {
          return new Int(value0);
      };
      return Int;
  })();
  var Bytes = (function () {
      function Bytes(value0) {
          this.value0 = value0;
      };
      Bytes.create = function (value0) {
          return new Bytes(value0);
      };
      return Bytes;
  })();
  var Text = (function () {
      function Text(value0) {
          this.value0 = value0;
      };
      Text.create = function (value0) {
          return new Text(value0);
      };
      return Text;
  })();
  var ordTransactionMetadatumLa = Data_BigInt.ordBigInt;
  var semigroupGeneralTransacti = {
      append: function (v) {
          return function (v1) {
              return Helpers.appendRightMap(ordTransactionMetadatumLa)(v)(v1);
          };
      }
  };                                                   
  var eqTransactionMetadatum = {
      eq: function (x) {
          return function (y) {
              if (x instanceof MetadataMap && y instanceof MetadataMap) {
                  return Data_Eq.eq(Data_Map_Internal.eqMap(eqTransactionMetadatum)(eqTransactionMetadatum))(x.value0)(y.value0);
              };
              if (x instanceof MetadataList && y instanceof MetadataList) {
                  return Data_Eq.eq(Data_Eq.eqArray(eqTransactionMetadatum))(x.value0)(y.value0);
              };
              if (x instanceof Int && y instanceof Int) {
                  return Data_Eq.eq(Types_Int.eqInt)(x.value0)(y.value0);
              };
              if (x instanceof Bytes && y instanceof Bytes) {
                  return Data_Eq.eq(Types_ByteArray.eqByteArray)(x.value0)(y.value0);
              };
              if (x instanceof Text && y instanceof Text) {
                  return x.value0 === y.value0;
              };
              return false;
          };
      }
  };
  var ordTransactionMetadatum = {
      compare: function (x) {
          return function (y) {
              if (x instanceof MetadataMap && y instanceof MetadataMap) {
                  return Data_Ord.compare(Data_Map_Internal.ordMap(ordTransactionMetadatum)(ordTransactionMetadatum))(x.value0)(y.value0);
              };
              if (x instanceof MetadataMap) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof MetadataMap) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof MetadataList && y instanceof MetadataList) {
                  return Data_Ord.compare(Data_Ord.ordArray(ordTransactionMetadatum))(x.value0)(y.value0);
              };
              if (x instanceof MetadataList) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof MetadataList) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Int && y instanceof Int) {
                  return Data_Ord.compare(Types_Int.ordInt)(x.value0)(y.value0);
              };
              if (x instanceof Int) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Int) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Bytes && y instanceof Bytes) {
                  return Data_Ord.compare(Types_ByteArray.ordByteArray)(x.value0)(y.value0);
              };
              if (x instanceof Bytes) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof Bytes) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof Text && y instanceof Text) {
                  return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              };
              throw new Error("Failed pattern match at Types.TransactionMetadata (line 62, column 1 - line 62, column 41): " + [ x.constructor.name, y.constructor.name ]);
          };
      },
      Eq0: function () {
          return eqTransactionMetadatum;
      }
  };
  exports["MetadataMap"] = MetadataMap;
  exports["MetadataList"] = MetadataList;
  exports["Int"] = Int;
  exports["Bytes"] = Bytes;
  exports["Text"] = Text;
  exports["TransactionMetadatumLabel"] = TransactionMetadatumLabel;
  exports["semigroupGeneralTransacti"] = semigroupGeneralTransacti;
  exports["ordTransactionMetadatumLa"] = ordTransactionMetadatumLa;
  exports["ordTransactionMetadatum"] = ordTransactionMetadatum;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Cardano.Types.Transaction"] = $PS["Cardano.Types.Transaction"] || {};
  var exports = $PS["Cardano.Types.Transaction"];
  var Aeson = $PS["Aeson"];
  var Cardano_Types_Value = $PS["Cardano.Types.Value"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Iso_Newtype = $PS["Data.Lens.Iso.Newtype"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Record = $PS["Data.Lens.Record"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_UInt = $PS["Data.UInt"];
  var Helpers = $PS["Helpers"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Serialization_Hash = $PS["Serialization.Hash"];
  var Serialization_Types = $PS["Serialization.Types"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_Int = $PS["Types.Int"];
  var Types_PlutusData = $PS["Types.PlutusData"];
  var Types_RedeemerTag = $PS["Types.RedeemerTag"];
  var Types_Scripts = $PS["Types.Scripts"];
  var Types_Transaction = $PS["Types.Transaction"];
  var Types_TransactionMetadata = $PS["Types.TransactionMetadata"];
  var UtxoM = function (x) {
      return x;
  };
  var ScriptDataHash = function (x) {
      return x;
  };
  var RequiredSigner = function (x) {
      return x;
  };
  var PublicKey = function (x) {
      return x;
  };
  var Vkey = function (x) {
      return x;
  };
  var IdentityNonce = (function () {
      function IdentityNonce() {

      };
      IdentityNonce.value = new IdentityNonce();
      return IdentityNonce;
  })();
  var HashNonce = (function () {
      function HashNonce(value0) {
          this.value0 = value0;
      };
      HashNonce.create = function (value0) {
          return new HashNonce(value0);
      };
      return HashNonce;
  })();
  var ScriptPubkey = (function () {
      function ScriptPubkey(value0) {
          this.value0 = value0;
      };
      ScriptPubkey.create = function (value0) {
          return new ScriptPubkey(value0);
      };
      return ScriptPubkey;
  })();
  var ScriptAll = (function () {
      function ScriptAll(value0) {
          this.value0 = value0;
      };
      ScriptAll.create = function (value0) {
          return new ScriptAll(value0);
      };
      return ScriptAll;
  })();
  var ScriptAny = (function () {
      function ScriptAny(value0) {
          this.value0 = value0;
      };
      ScriptAny.create = function (value0) {
          return new ScriptAny(value0);
      };
      return ScriptAny;
  })();
  var ScriptNOfK = (function () {
      function ScriptNOfK(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ScriptNOfK.create = function (value0) {
          return function (value1) {
              return new ScriptNOfK(value0, value1);
          };
      };
      return ScriptNOfK;
  })();
  var TimelockStart = (function () {
      function TimelockStart(value0) {
          this.value0 = value0;
      };
      TimelockStart.create = function (value0) {
          return new TimelockStart(value0);
      };
      return TimelockStart;
  })();
  var TimelockExpiry = (function () {
      function TimelockExpiry(value0) {
          this.value0 = value0;
      };
      TimelockExpiry.create = function (value0) {
          return new TimelockExpiry(value0);
      };
      return TimelockExpiry;
  })();
  var MIRToStakeCredentials = function (x) {
      return x;
  };
  var ToOtherPot = (function () {
      function ToOtherPot(value0) {
          this.value0 = value0;
      };
      ToOtherPot.create = function (value0) {
          return new ToOtherPot(value0);
      };
      return ToOtherPot;
  })();
  var ToStakeCreds = (function () {
      function ToStakeCreds(value0) {
          this.value0 = value0;
      };
      ToStakeCreds.create = function (value0) {
          return new ToStakeCreds(value0);
      };
      return ToStakeCreds;
  })();
  var PlutusV1 = (function () {
      function PlutusV1() {

      };
      PlutusV1.value = new PlutusV1();
      return PlutusV1;
  })();
  var Ipv6 = function (x) {
      return x;
  };
  var Ipv4 = function (x) {
      return x;
  };
  var SingleHostAddr = (function () {
      function SingleHostAddr(value0) {
          this.value0 = value0;
      };
      SingleHostAddr.create = function (value0) {
          return new SingleHostAddr(value0);
      };
      return SingleHostAddr;
  })();
  var SingleHostName = (function () {
      function SingleHostName(value0) {
          this.value0 = value0;
      };
      SingleHostName.create = function (value0) {
          return new SingleHostName(value0);
      };
      return SingleHostName;
  })();
  var MultiHostName = (function () {
      function MultiHostName(value0) {
          this.value0 = value0;
      };
      MultiHostName.create = function (value0) {
          return new MultiHostName(value0);
      };
      return MultiHostName;
  })();
  var GenesisHash = function (x) {
      return x;
  };
  var Epoch = function (x) {
      return x;
  };
  var Ed25519Signature = function (x) {
      return x;
  };
  var CostModel = function (x) {
      return x;
  };
  var Costmdls = function (x) {
      return x;
  };
  var StakeRegistration = (function () {
      function StakeRegistration(value0) {
          this.value0 = value0;
      };
      StakeRegistration.create = function (value0) {
          return new StakeRegistration(value0);
      };
      return StakeRegistration;
  })();
  var StakeDeregistration = (function () {
      function StakeDeregistration(value0) {
          this.value0 = value0;
      };
      StakeDeregistration.create = function (value0) {
          return new StakeDeregistration(value0);
      };
      return StakeDeregistration;
  })();
  var StakeDelegation = (function () {
      function StakeDelegation(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      StakeDelegation.create = function (value0) {
          return function (value1) {
              return new StakeDelegation(value0, value1);
          };
      };
      return StakeDelegation;
  })();
  var PoolRegistration = (function () {
      function PoolRegistration(value0) {
          this.value0 = value0;
      };
      PoolRegistration.create = function (value0) {
          return new PoolRegistration(value0);
      };
      return PoolRegistration;
  })();
  var PoolRetirement = (function () {
      function PoolRetirement(value0) {
          this.value0 = value0;
      };
      PoolRetirement.create = function (value0) {
          return new PoolRetirement(value0);
      };
      return PoolRetirement;
  })();
  var GenesisKeyDelegation = (function () {
      function GenesisKeyDelegation(value0) {
          this.value0 = value0;
      };
      GenesisKeyDelegation.create = function (value0) {
          return new GenesisKeyDelegation(value0);
      };
      return GenesisKeyDelegation;
  })();
  var MoveInstantaneousRewardsCert = (function () {
      function MoveInstantaneousRewardsCert(value0) {
          this.value0 = value0;
      };
      MoveInstantaneousRewardsCert.create = function (value0) {
          return new MoveInstantaneousRewardsCert(value0);
      };
      return MoveInstantaneousRewardsCert;
  })();
  var TransactionWitnessSet = function (x) {
      return x;
  };
  var AuxiliaryDataHash = function (x) {
      return x;
  };
  var TxBody = function (x) {
      return x;
  };
  var Transaction = function (x) {
      return x;
  };
  var semigroupMint = Cardano_Types_Value.semigroupNonAdaAsset;
  var ordGenesisHash = Types_ByteArray.ordByteArray;
  var genericRedeemer_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showRedeemer = {
      show: Data_Show_Generic.genericShow(genericRedeemer_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "data";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "exUnits";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "index";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "tag";
          }
      })(Data_Show.showRecordFieldsNil)(Types_RedeemerTag.showRedeemerTag))(Data_BigInt.showBigInt))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "mem";
          }
      })(Data_Show.showRecordFieldsCons({
          reflectSymbol: function () {
              return "steps";
          }
      })(Data_Show.showRecordFieldsNil)(Data_BigInt.showBigInt))(Data_BigInt.showBigInt))))(Types_PlutusData.showPlutusData))))({
          reflectSymbol: function () {
              return "Redeemer";
          }
      }))
  };
  var eqURL = {
      eq: function (x) {
          return function (y) {
              return x === y;
          };
      }
  };
  var eqTransactionOutput = Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
      reflectSymbol: function () {
          return "dataHash";
      }
  })(Data_Maybe.eqMaybe(Types_Transaction.eqDataHash)))()({
      reflectSymbol: function () {
          return "amount";
      }
  })(Cardano_Types_Value.eqValue))()({
      reflectSymbol: function () {
          return "address";
      }
  })(Serialization_Address.eqAddress));                                                            
  var eqScriptDataHash = Types_ByteArray.eqByteArray;
  var eqRequiredSigner = Serialization_Hash.eqEd25519KeyHash;
  var eqRedeemer = Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
      reflectSymbol: function () {
          return "tag";
      }
  })(Types_RedeemerTag.eqRedeemerTag))()({
      reflectSymbol: function () {
          return "index";
      }
  })(Data_BigInt.eqBigInt))()({
      reflectSymbol: function () {
          return "exUnits";
      }
  })(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
      reflectSymbol: function () {
          return "steps";
      }
  })(Data_BigInt.eqBigInt))()({
      reflectSymbol: function () {
          return "mem";
      }
  })(Data_BigInt.eqBigInt))))()({
      reflectSymbol: function () {
          return "data";
      }
  })(Types_PlutusData.eqPlutusData));
  var eqPublicKey = Data_Eq.eqString;
  var eqVkey = eqPublicKey;
  var eqPoolMetadataHash = {
      eq: function (x) {
          return function (y) {
              return Data_Eq.eq(Types_ByteArray.eqByteArray)(x)(y);
          };
      }
  };
  var eqPoolMetadata = {
      eq: function (x) {
          return function (y) {
              return Data_Eq.eq(eqPoolMetadataHash)(x.hash)(y.hash) && Data_Eq.eq(eqURL)(x.url)(y.url);
          };
      }
  };
  var eqNonce = {
      eq: function (x) {
          return function (y) {
              if (x instanceof IdentityNonce && y instanceof IdentityNonce) {
                  return true;
              };
              if (x instanceof HashNonce && y instanceof HashNonce) {
                  return Data_Eq.eq(Types_ByteArray.eqByteArray)(x.value0)(y.value0);
              };
              return false;
          };
      }
  };
  var eqNativeScript = {
      eq: function (x) {
          return function (y) {
              if (x instanceof ScriptPubkey && y instanceof ScriptPubkey) {
                  return Data_Eq.eq(Serialization_Hash.eqEd25519KeyHash)(x.value0)(y.value0);
              };
              if (x instanceof ScriptAll && y instanceof ScriptAll) {
                  return Data_Eq.eq(Data_Eq.eqArray(eqNativeScript))(x.value0)(y.value0);
              };
              if (x instanceof ScriptAny && y instanceof ScriptAny) {
                  return Data_Eq.eq(Data_Eq.eqArray(eqNativeScript))(x.value0)(y.value0);
              };
              if (x instanceof ScriptNOfK && y instanceof ScriptNOfK) {
                  return x.value0 === y.value0 && Data_Eq.eq(Data_Eq.eqArray(eqNativeScript))(x.value1)(y.value1);
              };
              if (x instanceof TimelockStart && y instanceof TimelockStart) {
                  return Data_Eq.eq(Serialization_Address.eqSlot)(x.value0)(y.value0);
              };
              if (x instanceof TimelockExpiry && y instanceof TimelockExpiry) {
                  return Data_Eq.eq(Serialization_Address.eqSlot)(x.value0)(y.value0);
              };
              return false;
          };
      }
  };
  var semigroupAuxiliaryData = {
      append: function (v) {
          return function (v1) {
              return {
                  metadata: Data_Semigroup.append(Data_Maybe.semigroupMaybe(Types_TransactionMetadata.semigroupGeneralTransacti))(v.metadata)(v1.metadata),
                  nativeScripts: Control_Apply.lift2(Data_Maybe.applyMaybe)(Data_Array.union(eqNativeScript))(v.nativeScripts)(v1.nativeScripts),
                  plutusScripts: Control_Apply.lift2(Data_Maybe.applyMaybe)(Data_Array.union(Types_Scripts.eqPlutusScript))(v.plutusScripts)(v1.plutusScripts)
              };
          };
      }
  };
  var eqMint = Cardano_Types_Value.eqNonAdaAsset;
  var eqMIRToStakeCredentials = {
      eq: function (x) {
          return function (y) {
              return Data_Eq.eq(Data_Map_Internal.eqMap(Serialization_Address.eqStakeCredential)(Types_Int.eqInt))(x)(y);
          };
      }
  };
  var eqMoveInstantaneousReward = {
      eq: function (x) {
          return function (y) {
              if (x instanceof ToOtherPot && y instanceof ToOtherPot) {
                  return Data_Eq.eq(Serialization_Types.eqBigNum)(x.value0.amount)(y.value0.amount) && x.value0.pot === y.value0.pot;
              };
              if (x instanceof ToStakeCreds && y instanceof ToStakeCreds) {
                  return Data_Eq.eq(eqMIRToStakeCredentials)(x.value0.amounts)(y.value0.amounts) && x.value0.pot === y.value0.pot;
              };
              return false;
          };
      }
  };
  var eqLanguage = {
      eq: function (x) {
          return function (y) {
              return true;
          };
      }
  };
  var ordLanguage = {
      compare: function (x) {
          return function (y) {
              return Data_Ordering.EQ.value;
          };
      },
      Eq0: function () {
          return eqLanguage;
      }
  };
  var eqIpv6 = {
      eq: function (x) {
          return function (y) {
              return Data_Eq.eq(Types_ByteArray.eqByteArray)(x)(y);
          };
      }
  };
  var eqIpv4 = {
      eq: function (x) {
          return function (y) {
              return Data_Eq.eq(Types_ByteArray.eqByteArray)(x)(y);
          };
      }
  };
  var eqRelay = {
      eq: function (x) {
          return function (y) {
              if (x instanceof SingleHostAddr && y instanceof SingleHostAddr) {
                  return Data_Eq.eq(Data_Maybe.eqMaybe(eqIpv4))(x.value0.ipv4)(y.value0.ipv4) && Data_Eq.eq(Data_Maybe.eqMaybe(eqIpv6))(x.value0.ipv6)(y.value0.ipv6) && Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(x.value0.port)(y.value0.port);
              };
              if (x instanceof SingleHostName && y instanceof SingleHostName) {
                  return x.value0.dnsName === y.value0.dnsName && Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(x.value0.port)(y.value0.port);
              };
              if (x instanceof MultiHostName && y instanceof MultiHostName) {
                  return x.value0.dnsName === y.value0.dnsName;
              };
              return false;
          };
      }
  };
  var eqGenesisHash = Types_ByteArray.eqByteArray;
  var eqGenesisDelegateHash = {
      eq: function (x) {
          return function (y) {
              return Data_Eq.eq(Types_ByteArray.eqByteArray)(x)(y);
          };
      }
  };
  var eqEpoch = Data_UInt.uintEqInstance;
  var eqEd25519Signature = Data_Eq.eqString;
  var eqVkeywitness = Data_Tuple.eqTuple(eqVkey)(eqEd25519Signature);
  var semigroupTransactionWitne = {
      append: function (v) {
          return function (v1) {
              return {
                  vkeys: Helpers.maybeArrayMerge(eqVkeywitness)(v.vkeys)(v1.vkeys),
                  nativeScripts: Helpers.maybeArrayMerge(eqNativeScript)(v.nativeScripts)(v1.nativeScripts),
                  bootstraps: Helpers.maybeArrayMerge(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                      reflectSymbol: function () {
                          return "vkey";
                      }
                  })(eqVkey))()({
                      reflectSymbol: function () {
                          return "signature";
                      }
                  })(eqEd25519Signature))()({
                      reflectSymbol: function () {
                          return "chainCode";
                      }
                  })(Types_ByteArray.eqByteArray))()({
                      reflectSymbol: function () {
                          return "attributes";
                      }
                  })(Types_ByteArray.eqByteArray)))(v.bootstraps)(v1.bootstraps),
                  plutusScripts: Helpers.maybeArrayMerge(Types_Scripts.eqPlutusScript)(v.plutusScripts)(v1.plutusScripts),
                  plutusData: Helpers.maybeArrayMerge(Types_PlutusData.eqPlutusData)(v.plutusData)(v1.plutusData),
                  redeemers: Helpers.maybeArrayMerge(eqRedeemer)(v.redeemers)(v1.redeemers)
              };
          };
      }
  };
  var monoidTransactionWitnessS = {
      mempty: {
          vkeys: Data_Maybe.Nothing.value,
          nativeScripts: Data_Maybe.Nothing.value,
          bootstraps: Data_Maybe.Nothing.value,
          plutusScripts: Data_Maybe.Nothing.value,
          plutusData: Data_Maybe.Nothing.value,
          redeemers: Data_Maybe.Nothing.value
      },
      Semigroup0: function () {
          return semigroupTransactionWitne;
      }
  };
  var eqCostModel = Data_Eq.eqArray(Data_UInt.uintEqInstance);
  var eqCostmdls = Data_Map_Internal.eqMap(eqLanguage)(eqCostModel);
  var eqProposedProtocolParamet = Data_Map_Internal.eqMap(eqGenesisHash)(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
      reflectSymbol: function () {
          return "treasuryGrowthRate";
      }
  })(Data_Maybe.eqMaybe(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
      reflectSymbol: function () {
          return "numerator";
      }
  })(Serialization_Types.eqBigNum))()({
      reflectSymbol: function () {
          return "denominator";
      }
  })(Serialization_Types.eqBigNum)))))()({
      reflectSymbol: function () {
          return "protocolVersion";
      }
  })(Data_Maybe.eqMaybe(Data_Eq.eqArray(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
      reflectSymbol: function () {
          return "minor";
      }
  })(Data_UInt.uintEqInstance))()({
      reflectSymbol: function () {
          return "major";
      }
  })(Data_UInt.uintEqInstance))))))()({
      reflectSymbol: function () {
          return "poolPledgeInfluence";
      }
  })(Data_Maybe.eqMaybe(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
      reflectSymbol: function () {
          return "numerator";
      }
  })(Serialization_Types.eqBigNum))()({
      reflectSymbol: function () {
          return "denominator";
      }
  })(Serialization_Types.eqBigNum)))))()({
      reflectSymbol: function () {
          return "poolDeposit";
      }
  })(Data_Maybe.eqMaybe(Cardano_Types_Value.eqCoin)))()({
      reflectSymbol: function () {
          return "nOpt";
      }
  })(Data_Maybe.eqMaybe(Data_UInt.uintEqInstance)))()({
      reflectSymbol: function () {
          return "minfeeB";
      }
  })(Data_Maybe.eqMaybe(Cardano_Types_Value.eqCoin)))()({
      reflectSymbol: function () {
          return "minfeeA";
      }
  })(Data_Maybe.eqMaybe(Cardano_Types_Value.eqCoin)))()({
      reflectSymbol: function () {
          return "minPoolCost";
      }
  })(Data_Maybe.eqMaybe(Serialization_Types.eqBigNum)))()({
      reflectSymbol: function () {
          return "maxValueSize";
      }
  })(Data_Maybe.eqMaybe(Data_UInt.uintEqInstance)))()({
      reflectSymbol: function () {
          return "maxTxSize";
      }
  })(Data_Maybe.eqMaybe(Data_UInt.uintEqInstance)))()({
      reflectSymbol: function () {
          return "maxTxExUnits";
      }
  })(Data_Maybe.eqMaybe(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
      reflectSymbol: function () {
          return "steps";
      }
  })(Data_BigInt.eqBigInt))()({
      reflectSymbol: function () {
          return "mem";
      }
  })(Data_BigInt.eqBigInt)))))()({
      reflectSymbol: function () {
          return "maxEpoch";
      }
  })(Data_Maybe.eqMaybe(eqEpoch)))()({
      reflectSymbol: function () {
          return "maxBlockHeaderSize";
      }
  })(Data_Maybe.eqMaybe(Data_UInt.uintEqInstance)))()({
      reflectSymbol: function () {
          return "maxBlockExUnits";
      }
  })(Data_Maybe.eqMaybe(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
      reflectSymbol: function () {
          return "steps";
      }
  })(Data_BigInt.eqBigInt))()({
      reflectSymbol: function () {
          return "mem";
      }
  })(Data_BigInt.eqBigInt)))))()({
      reflectSymbol: function () {
          return "maxBlockBodySize";
      }
  })(Data_Maybe.eqMaybe(Data_UInt.uintEqInstance)))()({
      reflectSymbol: function () {
          return "keyDeposit";
      }
  })(Data_Maybe.eqMaybe(Cardano_Types_Value.eqCoin)))()({
      reflectSymbol: function () {
          return "extraEntropy";
      }
  })(Data_Maybe.eqMaybe(eqNonce)))()({
      reflectSymbol: function () {
          return "expansionRate";
      }
  })(Data_Maybe.eqMaybe(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
      reflectSymbol: function () {
          return "numerator";
      }
  })(Serialization_Types.eqBigNum))()({
      reflectSymbol: function () {
          return "denominator";
      }
  })(Serialization_Types.eqBigNum)))))()({
      reflectSymbol: function () {
          return "executionCosts";
      }
  })(Data_Maybe.eqMaybe(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
      reflectSymbol: function () {
          return "stepPrice";
      }
  })(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
      reflectSymbol: function () {
          return "numerator";
      }
  })(Serialization_Types.eqBigNum))()({
      reflectSymbol: function () {
          return "denominator";
      }
  })(Serialization_Types.eqBigNum))))()({
      reflectSymbol: function () {
          return "memPrice";
      }
  })(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
      reflectSymbol: function () {
          return "numerator";
      }
  })(Serialization_Types.eqBigNum))()({
      reflectSymbol: function () {
          return "denominator";
      }
  })(Serialization_Types.eqBigNum)))))))()({
      reflectSymbol: function () {
          return "d";
      }
  })(Data_Maybe.eqMaybe(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
      reflectSymbol: function () {
          return "numerator";
      }
  })(Serialization_Types.eqBigNum))()({
      reflectSymbol: function () {
          return "denominator";
      }
  })(Serialization_Types.eqBigNum)))))()({
      reflectSymbol: function () {
          return "costModels";
      }
  })(Data_Maybe.eqMaybe(eqCostmdls)))()({
      reflectSymbol: function () {
          return "adaPerUtxoByte";
      }
  })(Data_Maybe.eqMaybe(Serialization_Types.eqBigNum))));
  var eqCertificate = {
      eq: function (x) {
          return function (y) {
              if (x instanceof StakeRegistration && y instanceof StakeRegistration) {
                  return Data_Eq.eq(Serialization_Address.eqStakeCredential)(x.value0)(y.value0);
              };
              if (x instanceof StakeDeregistration && y instanceof StakeDeregistration) {
                  return Data_Eq.eq(Serialization_Address.eqStakeCredential)(x.value0)(y.value0);
              };
              if (x instanceof StakeDelegation && y instanceof StakeDelegation) {
                  return Data_Eq.eq(Serialization_Address.eqStakeCredential)(x.value0)(y.value0) && Data_Eq.eq(Serialization_Hash.eqEd25519KeyHash)(x.value1)(y.value1);
              };
              if (x instanceof PoolRegistration && y instanceof PoolRegistration) {
                  return Data_Eq.eq(Serialization_Types.eqBigNum)(x.value0.cost)(y.value0.cost) && (Data_Eq.eq(Serialization_Types.eqBigNum)(x.value0.margin.denominator)(y.value0.margin.denominator) && Data_Eq.eq(Serialization_Types.eqBigNum)(x.value0.margin.numerator)(y.value0.margin.numerator)) && Data_Eq.eq(Serialization_Hash.eqEd25519KeyHash)(x.value0.operator)(y.value0.operator) && Data_Eq.eq(Serialization_Types.eqBigNum)(x.value0.pledge)(y.value0.pledge) && Data_Eq.eq(Data_Maybe.eqMaybe(eqPoolMetadata))(x.value0.poolMetadata)(y.value0.poolMetadata) && Data_Eq.eq(Data_Eq.eqArray(Serialization_Hash.eqEd25519KeyHash))(x.value0.poolOwners)(y.value0.poolOwners) && Data_Eq.eq(Data_Eq.eqArray(eqRelay))(x.value0.relays)(y.value0.relays) && Data_Eq.eq(Serialization_Address.eqRewardAddress)(x.value0.rewardAccount)(y.value0.rewardAccount) && Data_Eq.eq(Serialization_Types.eqVRFKeyHash)(x.value0.vrfKeyhash)(y.value0.vrfKeyhash);
              };
              if (x instanceof PoolRetirement && y instanceof PoolRetirement) {
                  return Data_Eq.eq(eqEpoch)(x.value0.epoch)(y.value0.epoch) && Data_Eq.eq(Serialization_Hash.eqEd25519KeyHash)(x.value0.poolKeyhash)(y.value0.poolKeyhash);
              };
              if (x instanceof GenesisKeyDelegation && y instanceof GenesisKeyDelegation) {
                  return Data_Eq.eq(eqGenesisDelegateHash)(x.value0.genesisDelegateHash)(y.value0.genesisDelegateHash) && Data_Eq.eq(eqGenesisHash)(x.value0.genesisHash)(y.value0.genesisHash) && Data_Eq.eq(Serialization_Types.eqVRFKeyHash)(x.value0.vrfKeyhash)(y.value0.vrfKeyhash);
              };
              if (x instanceof MoveInstantaneousRewardsCert && y instanceof MoveInstantaneousRewardsCert) {
                  return Data_Eq.eq(eqMoveInstantaneousReward)(x.value0)(y.value0);
              };
              return false;
          };
      }
  };
  var semigroupTxBody = {
      append: function (v) {
          return function (v1) {
              var lowerbound = function (v2) {
                  return function (v3) {
                      return Data_Ord.min(Data_UInt.uintOrd)(v2)(v3);
                  };
              };
              return {
                  inputs: Data_Array.union(Types_Transaction.eqTransactionInput)(v.inputs)(v1.inputs),
                  outputs: Data_Array.union(eqTransactionOutput)(v.outputs)(v1.outputs),
                  fee: Data_Semigroup.append(Cardano_Types_Value.semigroupCoin)(v.fee)(v1.fee),
                  ttl: Control_Apply.lift2(Data_Maybe.applyMaybe)(lowerbound)(v.ttl)(v1.ttl),
                  certs: Control_Apply.lift2(Data_Maybe.applyMaybe)(Data_Array.union(eqCertificate))(v.certs)(v1.certs),
                  withdrawals: Control_Apply.lift2(Data_Maybe.applyMaybe)(Helpers.appendMap(Serialization_Address.ordRewardAddress)(Cardano_Types_Value.semigroupCoin))(v.withdrawals)(v1.withdrawals),
                  update: Helpers.appendLastMaybe(v.update)(v1.update),
                  auxiliaryDataHash: Helpers.appendLastMaybe(v.auxiliaryDataHash)(v1.auxiliaryDataHash),
                  validityStartInterval: Control_Apply.lift2(Data_Maybe.applyMaybe)(lowerbound)(v.validityStartInterval)(v1.validityStartInterval),
                  mint: Data_Semigroup.append(Data_Maybe.semigroupMaybe(semigroupMint))(v.mint)(v1.mint),
                  scriptDataHash: Helpers.appendLastMaybe(v.scriptDataHash)(v1.scriptDataHash),
                  collateral: Control_Apply.lift2(Data_Maybe.applyMaybe)(Data_Array.union(Types_Transaction.eqTransactionInput))(v.collateral)(v1.collateral),
                  requiredSigners: Control_Apply.lift2(Data_Maybe.applyMaybe)(Data_Array.union(eqRequiredSigner))(v.requiredSigners)(v1.requiredSigners),
                  networkId: Helpers.appendLastMaybe(v.networkId)(v1.networkId)
              };
          };
      }
  };
  var monoidTxBody = {
      mempty: {
          inputs: Data_Monoid.mempty(Data_Monoid.monoidArray),
          outputs: Data_Monoid.mempty(Data_Monoid.monoidArray),
          fee: Data_Monoid.mempty(Cardano_Types_Value.monoidCoin),
          ttl: Data_Maybe.Nothing.value,
          certs: Data_Maybe.Nothing.value,
          withdrawals: Data_Maybe.Nothing.value,
          update: Data_Maybe.Nothing.value,
          auxiliaryDataHash: Data_Maybe.Nothing.value,
          validityStartInterval: Data_Maybe.Nothing.value,
          mint: Data_Maybe.Nothing.value,
          scriptDataHash: Data_Maybe.Nothing.value,
          collateral: Data_Maybe.Nothing.value,
          requiredSigners: Data_Maybe.Nothing.value,
          networkId: Data_Maybe.Nothing.value
      },
      Semigroup0: function () {
          return semigroupTxBody;
      }
  };
  var semigroupTransaction = {
      append: function (v) {
          return function (v1) {
              var txCheck$prime = function (dictMonoid) {
                  return Data_Monoid.guard(dictMonoid)(v1.isValid);
              };
              var txCheck = function (dictMonoid) {
                  return Data_Monoid.guard(dictMonoid)(v.isValid);
              };
              return {
                  body: Data_Semigroup.append(semigroupTxBody)(txCheck(monoidTxBody)(v.body))(txCheck$prime(monoidTxBody)(v1.body)),
                  witnessSet: Data_Semigroup.append(semigroupTransactionWitne)(txCheck(monoidTransactionWitnessS)(v.witnessSet))(txCheck$prime(monoidTransactionWitnessS)(v1.witnessSet)),
                  isValid: v.isValid && v1.isValid,
                  auxiliaryData: Data_Semigroup.append(Data_Maybe.semigroupMaybe(semigroupAuxiliaryData))(txCheck(Data_Maybe.monoidMaybe(semigroupAuxiliaryData))(v.auxiliaryData))(txCheck$prime(Data_Maybe.monoidMaybe(semigroupAuxiliaryData))(v1.auxiliaryData))
              };
          };
      }
  };
  var monoidTransaction = {
      mempty: {
          body: Data_Monoid.mempty(monoidTxBody),
          witnessSet: Data_Monoid.mempty(monoidTransactionWitnessS),
          isValid: true,
          auxiliaryData: Data_Maybe.Nothing.value
      },
      Semigroup0: function () {
          return semigroupTransaction;
      }
  };
  var eqAuxiliaryDataHash = Types_ByteArray.eqByteArray;
  var eqTxBody = Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
      reflectSymbol: function () {
          return "withdrawals";
      }
  })(Data_Maybe.eqMaybe(Data_Map_Internal.eqMap(Serialization_Address.eqRewardAddress)(Cardano_Types_Value.eqCoin))))()({
      reflectSymbol: function () {
          return "validityStartInterval";
      }
  })(Data_Maybe.eqMaybe(Serialization_Address.eqSlot)))()({
      reflectSymbol: function () {
          return "update";
      }
  })(Data_Maybe.eqMaybe(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
      reflectSymbol: function () {
          return "proposedProtocolParameterUpdates";
      }
  })(eqProposedProtocolParamet))()({
      reflectSymbol: function () {
          return "epoch";
      }
  })(eqEpoch)))))()({
      reflectSymbol: function () {
          return "ttl";
      }
  })(Data_Maybe.eqMaybe(Serialization_Address.eqSlot)))()({
      reflectSymbol: function () {
          return "scriptDataHash";
      }
  })(Data_Maybe.eqMaybe(eqScriptDataHash)))()({
      reflectSymbol: function () {
          return "requiredSigners";
      }
  })(Data_Maybe.eqMaybe(Data_Eq.eqArray(eqRequiredSigner))))()({
      reflectSymbol: function () {
          return "outputs";
      }
  })(Data_Eq.eqArray(eqTransactionOutput)))()({
      reflectSymbol: function () {
          return "networkId";
      }
  })(Data_Maybe.eqMaybe(Serialization_Address.eqNetworkId)))()({
      reflectSymbol: function () {
          return "mint";
      }
  })(Data_Maybe.eqMaybe(eqMint)))()({
      reflectSymbol: function () {
          return "inputs";
      }
  })(Data_Eq.eqArray(Types_Transaction.eqTransactionInput)))()({
      reflectSymbol: function () {
          return "fee";
      }
  })(Cardano_Types_Value.eqCoin))()({
      reflectSymbol: function () {
          return "collateral";
      }
  })(Data_Maybe.eqMaybe(Data_Eq.eqArray(Types_Transaction.eqTransactionInput))))()({
      reflectSymbol: function () {
          return "certs";
      }
  })(Data_Maybe.eqMaybe(Data_Eq.eqArray(eqCertificate))))()({
      reflectSymbol: function () {
          return "auxiliaryDataHash";
      }
  })(Data_Maybe.eqMaybe(eqAuxiliaryDataHash)));
  var decodeAesonNonce = {
      decodeAeson: function (aeson) {
          var err = new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Nonce"));
          return Control_Alt.alt(Data_Either.altEither)(Data_Functor.map(Data_Either.functorEither)(HashNonce.create)(Aeson.decodeAeson(Types_ByteArray.decodeAesonByteArray)(aeson)))(Aeson.caseAesonString(err)(function (v) {
              if (v === "neutral") {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(IdentityNonce.value);
              };
              return err;
          })(aeson));
      }
  };
  var _witnessSet = function (dictStrong) {
      return Data_Lens_Lens["lens'"](function (v) {
          return new Data_Tuple.Tuple(v.witnessSet, function (ws) {
              return {
                  body: v.body,
                  witnessSet: ws,
                  isValid: v.isValid,
                  auxiliaryData: v.auxiliaryData
              };
          });
      })(dictStrong);
  };
  var _vkeys = function (dictStrong) {
      return Data_Lens_Lens["lens'"](function (v) {
          return new Data_Tuple.Tuple(v.vkeys, function (vk) {
              return {
                  vkeys: vk,
                  nativeScripts: v.nativeScripts,
                  bootstraps: v.bootstraps,
                  plutusScripts: v.plutusScripts,
                  plutusData: v.plutusData,
                  redeemers: v.redeemers
              };
          });
      })(dictStrong);
  };
  var _scriptDataHash = function (dictStrong) {
      var $630 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $631 = Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "scriptDataHash";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
      return function ($632) {
          return $630($631($632));
      };
  };
  var _requiredSigners = function (dictStrong) {
      var $633 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $634 = Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "requiredSigners";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
      return function ($635) {
          return $633($634($635));
      };
  };
  var _redeemers = function (dictStrong) {
      return Data_Lens_Lens["lens'"](function (v) {
          return new Data_Tuple.Tuple(v.redeemers, function (red) {
              return {
                  vkeys: v.vkeys,
                  nativeScripts: v.nativeScripts,
                  bootstraps: v.bootstraps,
                  plutusScripts: v.plutusScripts,
                  plutusData: v.plutusData,
                  redeemers: red
              };
          });
      })(dictStrong);
  };
  var _plutusData = function (dictStrong) {
      return Data_Lens_Lens["lens'"](function (v) {
          return new Data_Tuple.Tuple(v.plutusData, function (pd) {
              return {
                  vkeys: v.vkeys,
                  nativeScripts: v.nativeScripts,
                  bootstraps: v.bootstraps,
                  plutusScripts: v.plutusScripts,
                  plutusData: pd,
                  redeemers: v.redeemers
              };
          });
      })(dictStrong);
  };
  var _outputs = function (dictStrong) {
      var $636 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $637 = Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "outputs";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
      return function ($638) {
          return $636($637($638));
      };
  };
  var _networkId = function (dictStrong) {
      var $639 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $640 = Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "networkId";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
      return function ($641) {
          return $639($640($641));
      };
  };
  var _mint = function (dictStrong) {
      var $642 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $643 = Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "mint";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
      return function ($644) {
          return $642($643($644));
      };
  };
  var _inputs = function (dictStrong) {
      var $645 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $646 = Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "inputs";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
      return function ($647) {
          return $645($646($647));
      };
  };
  var _fee = function (dictStrong) {
      var $648 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $649 = Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "fee";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
      return function ($650) {
          return $648($649($650));
      };
  };
  var _collateral = function (dictStrong) {
      var $651 = Data_Lens_Iso_Newtype["_Newtype"]()()(dictStrong.Profunctor0());
      var $652 = Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "collateral";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
      return function ($653) {
          return $651($652($653));
      };
  };
  var _body = function (dictStrong) {
      return Data_Lens_Lens["lens'"](function (v) {
          return new Data_Tuple.Tuple(v.body, function (bod) {
              return {
                  body: bod,
                  witnessSet: v.witnessSet,
                  isValid: v.isValid,
                  auxiliaryData: v.auxiliaryData
              };
          });
      })(dictStrong);
  };
  exports["AuxiliaryDataHash"] = AuxiliaryDataHash;
  exports["StakeRegistration"] = StakeRegistration;
  exports["StakeDeregistration"] = StakeDeregistration;
  exports["StakeDelegation"] = StakeDelegation;
  exports["PoolRegistration"] = PoolRegistration;
  exports["PoolRetirement"] = PoolRetirement;
  exports["GenesisKeyDelegation"] = GenesisKeyDelegation;
  exports["MoveInstantaneousRewardsCert"] = MoveInstantaneousRewardsCert;
  exports["CostModel"] = CostModel;
  exports["Costmdls"] = Costmdls;
  exports["Ed25519Signature"] = Ed25519Signature;
  exports["Epoch"] = Epoch;
  exports["GenesisHash"] = GenesisHash;
  exports["Ipv4"] = Ipv4;
  exports["Ipv6"] = Ipv6;
  exports["PlutusV1"] = PlutusV1;
  exports["MIRToStakeCredentials"] = MIRToStakeCredentials;
  exports["ToOtherPot"] = ToOtherPot;
  exports["ToStakeCreds"] = ToStakeCreds;
  exports["ScriptPubkey"] = ScriptPubkey;
  exports["ScriptAll"] = ScriptAll;
  exports["ScriptAny"] = ScriptAny;
  exports["ScriptNOfK"] = ScriptNOfK;
  exports["TimelockStart"] = TimelockStart;
  exports["TimelockExpiry"] = TimelockExpiry;
  exports["IdentityNonce"] = IdentityNonce;
  exports["HashNonce"] = HashNonce;
  exports["PublicKey"] = PublicKey;
  exports["SingleHostAddr"] = SingleHostAddr;
  exports["SingleHostName"] = SingleHostName;
  exports["MultiHostName"] = MultiHostName;
  exports["RequiredSigner"] = RequiredSigner;
  exports["ScriptDataHash"] = ScriptDataHash;
  exports["Transaction"] = Transaction;
  exports["TransactionWitnessSet"] = TransactionWitnessSet;
  exports["TxBody"] = TxBody;
  exports["UtxoM"] = UtxoM;
  exports["Vkey"] = Vkey;
  exports["_body"] = _body;
  exports["_collateral"] = _collateral;
  exports["_fee"] = _fee;
  exports["_inputs"] = _inputs;
  exports["_mint"] = _mint;
  exports["_networkId"] = _networkId;
  exports["_outputs"] = _outputs;
  exports["_plutusData"] = _plutusData;
  exports["_redeemers"] = _redeemers;
  exports["_requiredSigners"] = _requiredSigners;
  exports["_scriptDataHash"] = _scriptDataHash;
  exports["_vkeys"] = _vkeys;
  exports["_witnessSet"] = _witnessSet;
  exports["monoidTransaction"] = monoidTransaction;
  exports["eqTxBody"] = eqTxBody;
  exports["semigroupMint"] = semigroupMint;
  exports["ordGenesisHash"] = ordGenesisHash;
  exports["ordLanguage"] = ordLanguage;
  exports["decodeAesonNonce"] = decodeAesonNonce;
  exports["semigroupTransactionWitne"] = semigroupTransactionWitne;
  exports["monoidTransactionWitnessS"] = monoidTransactionWitnessS;
  exports["showRedeemer"] = showRedeemer;
  exports["eqTransactionOutput"] = eqTransactionOutput;
})(PS);
(function(exports) {
  /* global exports */

  exports.bigNumToString = n => n.to_str();
})(PS["Deserialization.BigNum"] = PS["Deserialization.BigNum"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Error"] = $PS["Error"] || {};
  var exports = $PS["Error"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Type_Proxy = $PS["Type.Proxy"];
  var noteE = function (e) {
      return Data_Maybe.maybe(e)(Data_Either.Right.create);
  };
  var _notImplementedError = Type_Proxy["Proxy"].value;
  exports["_notImplementedError"] = _notImplementedError;
  exports["noteE"] = noteE;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deserialization.Error"] = $PS["Deserialization.Error"] || {};
  var exports = $PS["Deserialization.Error"];
  var Data_Either = $PS["Data.Either"];
  var Data_Variant = $PS["Data.Variant"];
  var Deserialization_FromBytes = $PS["Deserialization.FromBytes"];
  var $$Error = $PS["Error"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var _fromCslRepError = Type_Proxy["Proxy"].value;
  var addErrTrace = function (v) {
      return function (v1) {
          if (v1 instanceof Data_Either.Left) {
              return new Data_Either.Left(Data_Variant.onMatch()()()({
                  fromCslRepError: function (orig) {
                      return Data_Variant.inj()({
                          reflectSymbol: function () {
                              return "fromCslRepError";
                          }
                      })(_fromCslRepError)(v + (": " + orig));
                  },
                  notImplementedError: function (orig) {
                      return Data_Variant.inj()({
                          reflectSymbol: function () {
                              return "notImplementedError";
                          }
                      })($$Error["_notImplementedError"])(v + (": " + orig));
                  },
                  fromBytesError: function (orig) {
                      return Data_Variant.inj()({
                          reflectSymbol: function () {
                              return "fromBytesError";
                          }
                      })(Deserialization_FromBytes["_fromBytesError"])(v + (": " + orig));
                  }
              })(Data_Variant["default"](v1.value0))(v1.value0));
          };
          return v1;
      };
  };
  var fromCslRepError = (function () {
      var $5 = Data_Variant.inj()({
          reflectSymbol: function () {
              return "fromCslRepError";
          }
      })(_fromCslRepError);
      return function ($6) {
          return Data_Either.Left.create($5($6));
      };
  })();
  var cslErr = function ($7) {
      return $$Error.noteE(fromCslRepError($7));
  };
  exports["_fromCslRepError"] = _fromCslRepError;
  exports["addErrTrace"] = addErrTrace;
  exports["cslErr"] = cslErr;
  exports["fromCslRepError"] = fromCslRepError;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deserialization.BigNum"] = $PS["Deserialization.BigNum"] || {};
  var exports = $PS["Deserialization.BigNum"];
  var $foreign = $PS["Deserialization.BigNum"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Show = $PS["Data.Show"];
  var Deserialization_Error = $PS["Deserialization.Error"];
  var $$Error = $PS["Error"];
  var Serialization_Types = $PS["Serialization.Types"];
  var bigNumToBigInt = function ($1) {
      return Data_BigInt.fromString($foreign.bigNumToString($1));
  };
  var bigNumToBigInt$prime = function (nm) {
      return function (bn) {
          return $$Error.noteE(Deserialization_Error.fromCslRepError(nm + (": CSL.BigNum (" + (Data_Show.show(Serialization_Types.showBigNum)(bn) + ") -> BigInt "))))(bigNumToBigInt(bn));
      };
  };
  exports["bigNumToBigInt"] = bigNumToBigInt;
  exports["bigNumToBigInt'"] = bigNumToBigInt$prime;
})(PS);
(function(exports) {
  /* global require exports BROWSER_RUNTIME */

  var lib;
  if (typeof BROWSER_RUNTIME != 'undefined' && BROWSER_RUNTIME) {
      lib = require('@emurgo/cardano-serialization-lib-browser');
  } else {
      lib = require('@emurgo/cardano-serialization-lib-nodejs');
  }

  const call = property => object => object[property]();
  const callMaybe = property => maybe => object => {
      const res = object[property]();
      return res != null ? maybe.just(res) : maybe.nothing;
  };

  // Classes like TransactionInputs are just monomorphic containers with `len`
  // and `get()` methods. This function abstracts away converting them to Array
  // of something.
  const containerExtractor = obj => {
      const res = [];

      for (let i = 0; i < obj.len(); i++) {
          res.push(obj.get(i));
      };

      return res;
  };

  // Dictionary wrappers share the same interface (with functions keys() and
  // get(k)).
  const extractDict = tuple => dict => {
      const keys = containerExtractor(dict.keys());
      const res = [];
      for (let key of keys) {
          // We assume that something that is in keys() is always present in the
          // structure as well.
          res.push(tuple(key)(dict.get(key)));
      }
      return res;
  };

  exports.getInput = call('input');
  exports.getOutput = call('output');
  exports.getTransactionHash = call('transaction_id');
  exports.getTransactionIndex = call('index');
  exports.getAddress = call('address');
  exports.getAmount = call('amount');
  exports.getCoin = call('coin');
  exports.getMultiAsset = callMaybe('multiasset');
  exports.extractMultiAsset = extractDict;
  exports.extractAssets = extractDict;
  exports.getDataHash = callMaybe('data_hash');
})(PS["Deserialization.UnspentOutput"] = PS["Deserialization.UnspentOutput"] || {});
(function(exports) {
  /* global require exports BROWSER_RUNTIME */

  var lib;
  if (typeof BROWSER_RUNTIME != 'undefined' && BROWSER_RUNTIME) {
      lib = require('@emurgo/cardano-serialization-lib-browser');
  } else {
      lib = require('@emurgo/cardano-serialization-lib-nodejs');
  }

  const setter = prop => obj => value => () =>
        obj['set_' + prop](value);

  exports.hashTransaction = body => () =>
      lib.hash_transaction(body);

  exports.newValueFromAssets = multiasset => () =>
      lib.Value.new_from_assets(multiasset);

  exports.valueSetCoin = setter('coin');

  exports.newTransactionInput = transaction_id => index => () =>
      lib.TransactionInput.new(transaction_id, index);

  exports.newTransactionInputs = () =>
      lib.TransactionInputs.new();

  exports.addTransactionInput = inputs => input => () =>
      inputs.add(input);

  exports.newTransactionOutput = address => amount => () =>
      lib.TransactionOutput.new(address, amount);

  exports.newTransactionOutputs = () =>
      lib.TransactionOutputs.new();

  exports.addTransactionOutput = outputs => output => () =>
      outputs.add(output);

  exports.newTransactionBody = inputs => outputs => fee => ttl => () =>
      lib.TransactionBody.new(inputs, outputs, fee, ttl);

  exports.setTxIsValid = tx => isValid => () =>
      tx.set_is_valid(isValid);

  exports.newTransaction = body => witness_set => auxiliary_data => () =>
      lib.Transaction.new(body, witness_set, auxiliary_data);

  exports.newTransaction_ = body => witness_set => () =>
      lib.Transaction.new(body, witness_set);     

  exports.newMultiAsset = () =>
      lib.MultiAsset.new();

  exports.insertMultiAsset = multiasset => key => value => () =>
      multiasset.insert(key, value);

  exports.newAssets = () =>
      lib.Assets.new();

  exports.insertAssets = assets => key => value => () =>
      assets.insert(key, value);

  exports.newAssetName = name => () =>
      lib.AssetName.new(name);

  exports.transactionOutputSetDataHash = setter('data_hash');

  exports.makeVkeywitness = hash => key => () =>
      lib.make_vkey_witness(hash, key);

  exports.publicKeyFromPrivateKey = private_key => () => {
      return private_key.to_public();
  };

  exports._privateKeyFromBytes = maybe => bytes => {
      try {
          return maybe.just(lib.PrivateKey.from_normal_bytes(bytes));
      } catch (_) {
          return maybe.nothing;
      }
  };

  exports.publicKeyHash = pk => pk.hash();                

  exports.toBytes = sth => sth.to_bytes();

  exports.newCostmdls = () =>
      lib.Costmdls.new();

  exports.costmdlsSetCostModel = cms => lang => cm => () =>
      cms.insert(lang, cm);

  exports.newCostModel = () =>
      lib.CostModel.new();

  exports.costModelSetCost = cm => op => cost => () =>
      cm.set(op, cost);

  exports.newPlutusV1 = () =>
      lib.Language.new_plutus_v1();

  exports.newInt32 = x => () =>
      lib.Int.new_i32(x);

  exports._hashScriptData = rs => cms => ds => () =>
      lib.hash_script_data(rs, cms, ds);

  exports.newRedeemers = () =>
      lib.Redeemers.new();

  exports.addRedeemer = rs => r => () =>
      rs.add(r);

  exports.newScriptDataHashFromBytes = bytes => () =>
      lib.ScriptDataHash.from_bytes(bytes);

  exports.setTxBodyScriptDataHash = setter('script_data_hash');

  exports.setTxBodyMint = setter('mint');

  exports.newMint = () =>
      lib.Mint.new();

  exports._bigIntToInt = maybeFfiHelper => bigInt => {
      try {
          const str = bigInt.to_str();
          if (str[0] == '-') {
              return maybeFfiHelper.just(
                  lib.Int.new_negative(lib.BigNum.from_str(str.slice(1)))
              );
          } else {
              return maybeFfiHelper.just(
                  lib.Int.new(lib.BigNum.from_str(str))
              );
          }
      } catch (_) {
          return Maybe.nothing;
      }
  };

  exports.newMintAssets = lib.MintAssets.new;

  exports.insertMintAssets = mint => scriptHash => mintAssets => () =>
      mint.insert(scriptHash, mintAssets);

  exports.insertMintAsset = mintAssets => assetName => int => () =>
      mintAssets.insert(assetName, int);

  exports.networkIdTestnet = () =>
      lib.NetworkId.testnet();

  exports.networkIdMainnet = () =>
      lib.NetworkId.mainnet();

  exports.setTxBodyCerts = setter('certs');

  exports.newCertificates = () =>
      lib.Certificates.new();

  exports.newStakeRegistrationCertificate = stakeCredential => () =>
      lib.Certificate.new_stake_registration(lib.StakeRegistration.new(stakeCredential));

  exports.newStakeDeregistrationCertificate = stakeCredential => () =>
      lib.Certificate.new_stake_deregistration(lib.StakeDeregistration.new(stakeCredential));

  exports.newStakeDelegationCertificate = stakeCredential => ed25519KeyHash => () =>
      lib.Certificate.new_stake_delegation(lib.StakeDelegation.new(stakeCredential, ed25519KeyHash));

  exports.newPoolRegistrationCertificate = operator => vrfKeyhash => pledge =>
      cost => margin => reward_account => poolOwners => relays => poolMetadata =>
      () => lib.Certificate.new_pool_registration(
          lib.PoolRegistration.new(
              lib.PoolParams.new(
                  operator, vrfKeyhash, pledge, cost, margin, reward_account,
                  poolOwners, relays, poolMetadata)));

  exports.newUnitInterval = numerator => denominator => () =>
      lib.UnitInterval.new(numerator, denominator);

  exports.newPoolRetirementCertificate = poolKeyHash => epoch => () =>
      lib.Certificate.new_pool_retirement(
          lib.PoolRetirement.new(
              poolKeyHash, epoch));

  exports.newGenesisKeyDelegationCertificate =
      genesisHash => genesisDelegateHash => vrfKeyhash => () =>
      lib.Certificate.new_genesis_key_delegation(
          lib.GenesisKeyDelegation.new(genesisHash, genesisDelegateHash, vrfKeyhash));

  exports.addCert = certificates => certificate => () =>
      certificates.add(certificate);

  exports.setTxBodyCollateral = setter('collateral');

  exports.setTxBodyNetworkId = setter('network_id');

  exports.transactionBodySetRequiredSigners = containerHelper => body =>
      keyHashes => () =>
      body.set_required_signers(
          containerHelper.pack(lib.Ed25519KeyHashes, keyHashes));

  exports.transactionBodySetValidityStartInterval = setter('validity_start_interval');

  exports.transactionBodySetAuxiliaryDataHash = txBody => hashBytes => () =>
      txBody.set_auxiliary_data_hash(lib.AuxiliaryDataHash.from_bytes(hashBytes));

  exports.convertPoolOwners = containerHelper => keyHashes => () =>
      containerHelper.pack(lib.Ed25519KeyHashes, keyHashes);

  exports.packRelays = containerHelper => relays =>
      containerHelper.pack(lib.Relays, relays);

  exports.newIpv4 = data => () => lib.Ipv4.new(data);

  exports.newIpv6 = data => () => lib.Ipv6.new(data);

  exports.newSingleHostAddr = port => ipv4 => ipv6 => () =>
      lib.Relay.new_single_host_addr(
          lib.SingleHostAddr.new(port, ipv4, ipv6)
      );

  exports.newSingleHostName = port => dnsName => () =>
      lib.Relay.new_single_host_name(
          lib.SingleHostName.new(port, lib.DNSRecordAorAAAA.new(dnsName)));

  exports.newMultiHostName = dnsName => () =>
      lib.Relay.new_multi_host_name(
          lib.MultiHostName.new(
              lib.DNSRecordSRV.new(dnsName)));

  exports.newPoolMetadata = url => hash => () =>
      lib.PoolMetadata.new(lib.URL.new(url), lib.PoolMetadataHash.from_bytes(hash));

  exports.newGenesisHash = bytes => () =>
      lib.GenesisHash.from_bytes(bytes);

  exports.newGenesisDelegateHash = bytes => () =>
      lib.GenesisDelegateHash.from_bytes(bytes);

  exports.newMoveInstantaneousRewardToOtherPot = pot => amount => () =>
      lib.MoveInstantaneousReward.new_to_other_pot(pot, amount);

  exports.newMoveInstantaneousRewardToStakeCreds = pot => amounts => () =>
      lib.MoveInstantaneousReward.new_to_stake_creds(pot, amounts);

  exports.newMIRToStakeCredentials = containerHelper => entries => () =>
      containerHelper.packMap(lib.MIRToStakeCredentials, entries);

  exports.newMoveInstantaneousRewardsCertificate = mir => () =>
      lib.Certificate.new_move_instantaneous_rewards_cert(
          lib.MoveInstantaneousRewardsCert.new(mir)
      );

  exports.newWithdrawals = containerHelper => entries => () =>
      containerHelper.packMap(lib.Withdrawals, entries);

  exports.setTxBodyWithdrawals = setter('withdrawals');

  exports.setTxBodyUpdate = setter('update');

  exports.newUpdate = ppUpdates => epoch => () =>
      lib.Update.new(ppUpdates, epoch);

  exports.ppuSetMinfeeA = setter('minfee_a');

  exports.ppuSetMinfeeB = setter('minfee_b');

  exports.ppuSetMaxBlockBodySize = setter('max_block_body_size');

  exports.ppuSetMaxTxSize = setter('max_tx_size');

  exports.ppuSetMaxBlockHeaderSize = setter('max_block_header_size');

  exports.ppuSetKeyDeposit = setter('key_deposit');

  exports.ppuSetPoolDeposit = setter('pool_deposit');

  exports.ppuSetMaxEpoch = setter('max_epoch');

  exports.ppuSetNOpt = setter('n_opt');

  exports.ppuSetPoolPledgeInfluence = setter('pool_pledge_influence');

  exports.ppuSetExpansionRate = setter('expansion_rate');

  exports.ppuSetTreasuryGrowthRate = setter('treasury_growth_rate');

  exports.ppuSetD = setter('d');

  exports.ppuSetExtraEntropyIdentity = ppu => () =>
      ppu.set_extra_entropy(lib.Nonce.new_identity());

  exports.ppuSetExtraEntropyFromHash = ppu => bytes => () =>
      ppu.set_extra_entropy(lib.Nonce.new_from_hash(bytes));

  exports.newProtocolVersion = major => minor => () =>
      lib.ProtocolVersion.new(major, minor);

  exports.ppuSetProtocolVersion = containerHelper => ppu => versions => () =>
      ppu.set_protocol_version(
          containerHelper.pack(lib.ProtocolVersions, versions)
      );

  exports.ppuSetMinPoolCost = setter('min_pool_cost');

  exports.ppuSetAdaPerUtxoByte = setter('ada_per_utxo_byte');

  exports.ppuSetCostModels = setter('cost_models');

  exports.newExUnitPrices = mem_price => step_price => () =>
      lib.ExUnitPrices.new(mem_price, step_price);

  exports.ppuSetExecutionCosts = setter('execution_costs');

  exports.ppuSetMaxTxExUnits = setter('max_tx_ex_units');

  exports.ppuSetMaxBlockExUnits = setter('max_block_ex_units');

  exports.ppuSetMaxValueSize = setter('max_value_size');

  exports.newProtocolParamUpdate = () =>
      lib.ProtocolParamUpdate.new();

  exports.newProposedProtocolParameterUpdates = containerHelper => kvs => () =>
      containerHelper.packMap(lib.ProposedProtocolParameterUpdates, kvs);
})(PS["Serialization"] = PS["Serialization"] || {});
(function(exports) {
  /* global require exports BROWSER_RUNTIME */

  var lib;
  if (typeof BROWSER_RUNTIME != 'undefined' && BROWSER_RUNTIME) {
      lib = require('@emurgo/cardano-serialization-lib-browser');
  } else {
      lib = require('@emurgo/cardano-serialization-lib-nodejs');
  }

  const setter = prop => obj => value => () =>
        obj['set_' + prop](value);

  exports.newAuxiliaryData = () =>
      lib.AuxiliaryData.new();                          

  exports.setAuxiliaryDataNativeScripts = setter('native_scripts');

  exports.setAuxiliaryDataPlutusScripts = setter('plutus_scripts');

  exports.setAuxiliaryDataGeneralTransactionMetadata = setter('metadata');

  exports.newGeneralTransactionMetadata = containerHelper => entries => () =>
      containerHelper.packMap(lib.GeneralTransactionMetadata, entries);

  exports.newMetadataMap = containerHelper => entries => () =>
      lib.TransactionMetadatum.new_map(
          containerHelper.packMap(lib.MetadataMap, entries));

  exports.newMetadataList = containerHelper => entries => () =>
      lib.TransactionMetadatum.new_list(
          containerHelper.pack(lib.MetadataList, entries));

  exports.newMetadataInt = int => () =>
      lib.TransactionMetadatum.new_int(int);

  exports.newMetadataBytes = bytes => () =>
      lib.TransactionMetadatum.new_bytes(bytes);

  exports.newMetadataText = text => () =>
      lib.TransactionMetadatum.new_text(text);
})(PS["Serialization.AuxiliaryData"] = PS["Serialization.AuxiliaryData"] || {});
(function(exports) {
  /* global require exports BROWSER_RUNTIME */

  var lib;
  if (typeof BROWSER_RUNTIME != 'undefined' && BROWSER_RUNTIME) {
      lib = require('@emurgo/cardano-serialization-lib-browser');
  } else {
      lib = require('@emurgo/cardano-serialization-lib-nodejs');
  }

  const mkScript = prop => arg => lib.NativeScript[prop](arg);

  exports.mkScriptPubkey = keyHash => lib.ScriptPubkey.new(keyHash);
  exports.nativeScript_new_script_pubkey = mkScript('new_script_pubkey');
  exports.nativeScript_new_script_all = mkScript('new_script_all');
  exports.nativeScript_new_script_any = mkScript('new_script_any');
  exports.nativeScript_new_script_n_of_k = mkScript('new_script_n_of_k');
  exports.nativeScript_new_timelock_start = mkScript('new_timelock_start');
  exports.nativeScript_new_timelock_expiry = mkScript('new_timelock_expiry');
  exports._packNativeScripts = helper => nss => helper.pack(lib.NativeScripts, nss);
  exports.mkScriptAll = nss => lib.ScriptAll.new(nss);
  exports.mkScriptAny = nss => lib.ScriptAny.new(nss);
  exports.mkScriptNOfK = n => nss => lib.ScriptNOfK.new(n, nss);
  exports.mkTimelockExpiry = n => lib.TimelockExpiry.new(n);
  exports.mkTimelockStart = n => lib.TimelockStart.new(n);
})(PS["Serialization.NativeScript"] = PS["Serialization.NativeScript"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Serialization.NativeScript"] = $PS["Serialization.NativeScript"] || {};
  var exports = $PS["Serialization.NativeScript"];
  var $foreign = $PS["Serialization.NativeScript"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_UInt = $PS["Data.UInt"];
  var FfiHelpers = $PS["FfiHelpers"];                
  var packNativeScripts = $foreign["_packNativeScripts"](FfiHelpers.containerHelper);
  var convertTimelockStart = function (v) {
      return $foreign.nativeScript_new_timelock_start($foreign.mkTimelockStart(Data_UInt.toInt(v)));
  };
  var convertTimelockExpiry = function (v) {
      return $foreign.nativeScript_new_timelock_expiry($foreign.mkTimelockExpiry(Data_UInt.toInt(v)));
  };
  var convertScriptPubkey = function (hash) {
      return $foreign.nativeScript_new_script_pubkey($foreign.mkScriptPubkey(hash));
  };
  var convertScriptNOfK = function (n) {
      return function (nss) {
          return Data_Functor.map(Data_Maybe.functorMaybe)((function () {
              var $13 = $foreign.mkScriptNOfK(n);
              return function ($14) {
                  return $foreign.nativeScript_new_script_n_of_k($13(packNativeScripts($14)));
              };
          })())(Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableArray)(nss)(convertNativeScript));
      };
  };
  var convertScriptAny = function (nss) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function ($15) {
          return $foreign.nativeScript_new_script_any($foreign.mkScriptAny(packNativeScripts($15)));
      })(Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableArray)(nss)(convertNativeScript));
  };
  var convertScriptAll = function (nss) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function ($16) {
          return $foreign.nativeScript_new_script_all($foreign.mkScriptAll(packNativeScripts($16)));
      })(Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableArray)(nss)(convertNativeScript));
  };
  var convertNativeScript = function (v) {
      if (v instanceof Cardano_Types_Transaction.ScriptPubkey) {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(convertScriptPubkey(v.value0));
      };
      if (v instanceof Cardano_Types_Transaction.ScriptAll) {
          return convertScriptAll(v.value0);
      };
      if (v instanceof Cardano_Types_Transaction.ScriptAny) {
          return convertScriptAny(v.value0);
      };
      if (v instanceof Cardano_Types_Transaction.ScriptNOfK) {
          return convertScriptNOfK(v.value0)(v.value1);
      };
      if (v instanceof Cardano_Types_Transaction.TimelockStart) {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(convertTimelockStart(v.value0));
      };
      if (v instanceof Cardano_Types_Transaction.TimelockExpiry) {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(convertTimelockExpiry(v.value0));
      };
      throw new Error("Failed pattern match at Serialization.NativeScript (line 41, column 23 - line 47, column 61): " + [ v.constructor.name ]);
  };
  var convertNativeScripts = (function () {
      var $17 = Data_Functor.map(Data_Maybe.functorMaybe)(packNativeScripts);
      var $18 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(convertNativeScript);
      return function ($19) {
          return $17($18($19));
      };
  })();
  exports["convertNativeScripts"] = convertNativeScripts;
})(PS);
(function(exports) {
  /* global require exports BROWSER_RUNTIME */

  var lib;
  if (typeof BROWSER_RUNTIME != 'undefined' && BROWSER_RUNTIME) {
      lib = require('@emurgo/cardano-serialization-lib-browser');
  } else {
      lib = require('@emurgo/cardano-serialization-lib-nodejs');
  }

  exports.newTransactionWitnessSet = () =>
      lib.TransactionWitnessSet.new();

  exports.newEd25519Signature = bech32 => () =>
      lib.Ed25519Signature.from_bech32(bech32);

  exports.newPublicKey = bech32 => () =>
      lib.PublicKey.from_bech32(bech32);

  exports.newVkeyFromPublicKey = public_key => () =>
      lib.Vkey.new(public_key);

  exports.newVkeywitnesses = () =>
      lib.Vkeywitnesses.new();

  exports.newVkeywitness = vkey => signature => () =>
      lib.Vkeywitness.new(vkey, signature);

  exports.addVkeywitness = witnesses => witness => () =>
      witnesses.add(witness);

  exports.newPlutusScript = bytes => () =>
      lib.PlutusScript.new(bytes);

  exports.newPlutusScripts = () =>
      lib.PlutusScripts.new();

  exports.addPlutusScript = scripts => script => () =>
      scripts.add(script);

  exports.transactionWitnessSetSetVkeys = ws => vkeys => () =>
      ws.set_vkeys(vkeys);

  exports.txWitnessSetSetPlutusScripts = ws => scripts => () =>
      ws.set_plutus_scripts(scripts);

  exports.transactionWitnessSetSetNativeScripts = ws => scripts => () =>
      ws.set_native_scripts(scripts);

  exports._wsSetBootstraps = helper => ws => bootstraps => () =>
      ws.set_bootstraps(helper.pack(lib.BootstrapWitnesses, bootstraps));

  exports.newBootstrapWitness = vkey => signature => chain_code => attributes => () => {
      lib.BootstrapWitness.new(vkey, signature, chain_code, attributes);
  };

  exports._wsSetPlutusData = helper => ws => plutus_data => () =>
      ws.set_plutus_data(helper.pack(lib.PlutusList, plutus_data));

  exports.newRedeemer = tag => index => data => ex_units => () =>
      lib.Redeemer.new(tag, index, data, ex_units);

  exports._newRedeemerTag = tag => () =>
      lib.RedeemerTag['new_' + tag]();

  exports.newExUnits = mem => steps =>
      lib.ExUnits.new(mem, steps);

  exports._wsSetRedeemers = helper => ws => redeemers => () =>
      ws.set_redeemers(helper.pack(lib.Redeemers, redeemers));

  exports._mkRedeemers = helper => redeemers =>
      helper.pack(lib.Redeemers, redeemers);

  exports._wsSetPlutusScripts = helper => ws => scripts => () =>
      ws.set_plutus_scripts(helper.pack(lib.PlutusScripts, scripts));
})(PS["Serialization.WitnessSet"] = PS["Serialization.WitnessSet"] || {});
(function(exports) {
  /* global require exports BROWSER_RUNTIME */

  var lib;
  if (typeof BROWSER_RUNTIME != 'undefined' && BROWSER_RUNTIME) {
      lib = require('@emurgo/cardano-serialization-lib-browser');
  } else {
      lib = require('@emurgo/cardano-serialization-lib-nodejs');
  }

  exports._mkPlutusData_bytes = bytes => lib.PlutusData.new_bytes(bytes);
  exports._mkPlutusData_list = list => lib.PlutusData.new_list(list);
  exports._mkPlutusData_map = list => lib.PlutusData.new_map(list);
  exports._mkPlutusData_integer = int => lib.PlutusData.new_integer(int);
  exports._mkPlutusData_constr = constr => lib.PlutusData.new_constr_plutus_data(constr);

  exports._packPlutusList = containerHelper => elems => containerHelper.pack(lib.PlutusList, elems);
  exports._mkConstrPlutusData = n => list => lib.ConstrPlutusData.new(n, list);

  exports._bigIntFromString = maybe => str => {
      try {
          return maybe.just(lib.BigInt.from_str(str));
      } catch (_) {
          return maybe.nothing;
      }
  };

  exports._packMap = first => second => kvs => {
      const res = lib.PlutusMap.new();
      for (let kv of kvs) {
          res.insert(first(kv), second(kv));
      }
      return res;
  };
})(PS["Serialization.PlutusData"] = PS["Serialization.PlutusData"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Serialization.PlutusData"] = $PS["Serialization.PlutusData"] || {};
  var exports = $PS["Serialization.PlutusData"];
  var $foreign = $PS["Serialization.PlutusData"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var FfiHelpers = $PS["FfiHelpers"];
  var Serialization_BigNum = $PS["Serialization.BigNum"];
  var Types_PlutusData = $PS["Types.PlutusData"];                
  var convertBigInt = function (n) {
      return $foreign["_bigIntFromString"](FfiHelpers.maybeFfiHelper)(Data_BigInt.toString(n));
  };
  var convertPlutusInteger = function (n) {
      return Data_Functor.map(Data_Maybe.functorMaybe)($foreign["_mkPlutusData_integer"])(convertBigInt(n));
  };
  var convertPlutusMap = function (mp) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableArray)(mp)(function (v) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(convertPlutusData(v.value0))(function (k$prime) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(convertPlutusData(v.value1))(function (v$prime) {
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Data_Tuple.Tuple(k$prime, v$prime));
              });
          });
      }))(function (entries) {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)($foreign["_mkPlutusData_map"]($foreign["_packMap"](Data_Tuple.fst)(Data_Tuple.snd)(entries)));
      });
  };
  var convertPlutusList = function (x) {
      return Data_Functor.map(Data_Maybe.functorMaybe)((function () {
          var $12 = $foreign["_packPlutusList"](FfiHelpers.containerHelper);
          return function ($13) {
              return $foreign["_mkPlutusData_list"]($12($13));
          };
      })())(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(convertPlutusData)(x));
  };
  var convertPlutusData = function (v) {
      if (v instanceof Types_PlutusData.Constr) {
          return convertConstr(v.value0)(v.value1);
      };
      if (v instanceof Types_PlutusData["Map"]) {
          return convertPlutusMap(v.value0);
      };
      if (v instanceof Types_PlutusData.List) {
          return convertPlutusList(v.value0);
      };
      if (v instanceof Types_PlutusData.Integer) {
          return convertPlutusInteger(v.value0);
      };
      if (v instanceof Types_PlutusData.Bytes) {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)($foreign["_mkPlutusData_bytes"](v.value0));
      };
      throw new Error("Failed pattern match at Serialization.PlutusData (line 33, column 21 - line 38, column 44): " + [ v.constructor.name ]);
  };
  var convertConstr = function (alt) {
      return function (list) {
          return Data_Functor.map(Data_Maybe.functorMaybe)($foreign["_mkPlutusData_constr"])(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)($foreign["_mkConstrPlutusData"])(Serialization_BigNum.bigNumFromBigInt(alt)))(Data_Functor.map(Data_Maybe.functorMaybe)($foreign["_packPlutusList"](FfiHelpers.containerHelper))(Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableArray)(list)(convertPlutusData))));
      };
  };
  var packPlutusList = (function () {
      var $14 = Data_Functor.map(Data_Maybe.functorMaybe)($foreign["_packPlutusList"](FfiHelpers.containerHelper));
      var $15 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(convertPlutusData);
      return function ($16) {
          return $14($15($16));
      };
  })();
  exports["convertPlutusData"] = convertPlutusData;
  exports["packPlutusList"] = packPlutusList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Serialization.WitnessSet"] = $PS["Serialization.WitnessSet"] || {};
  var exports = $PS["Serialization.WitnessSet"];
  var $foreign = $PS["Serialization.WitnessSet"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Effect = $PS["Effect"];
  var Effect_Exception = $PS["Effect.Exception"];
  var FfiHelpers = $PS["FfiHelpers"];
  var Serialization_BigNum = $PS["Serialization.BigNum"];
  var Serialization_NativeScript = $PS["Serialization.NativeScript"];
  var Serialization_PlutusData = $PS["Serialization.PlutusData"];
  var Types_RedeemerTag = $PS["Types.RedeemerTag"];                
  var setWitness = function (f) {
      return function (ws) {
          var $30 = f(FfiHelpers.containerHelper)(ws);
          return function ($31) {
              return $30(Data_Array.singleton($31));
          };
      };
  };
  var setRedeemer = function (r) {
      return function (ws) {
          return setWitness($foreign["_wsSetRedeemers"])(ws)(r);
      };
  };
  var setPlutusScript = function (ps) {
      return function (ws) {
          return setWitness($foreign["_wsSetPlutusScripts"])(ws)(ps);
      };
  };
  var setPlutusData = function (pd) {
      return function (ws) {
          return setWitness($foreign["_wsSetPlutusData"])(ws)(pd);
      };
  };                                                                                      
  var convertVkey = function (v) {
      return Control_Bind.bind(Effect.bindEffect)($foreign.newPublicKey(v))($foreign.newVkeyFromPublicKey);
  };
  var convertRedeemerTag = function ($32) {
      return $foreign["_newRedeemerTag"]((function (v) {
          if (v instanceof Types_RedeemerTag.Spend) {
              return "spend";
          };
          if (v instanceof Types_RedeemerTag.Mint) {
              return "mint";
          };
          if (v instanceof Types_RedeemerTag.Cert) {
              return "cert";
          };
          if (v instanceof Types_RedeemerTag.Reward) {
              return "reward";
          };
          throw new Error("Failed pattern match at Serialization.WitnessSet (line 111, column 42 - line 115, column 25): " + [ v.constructor.name ]);
      })($32));
  };   
  var convertPlutusScript = function (v) {
      return $foreign.newPlutusScript(v);
  };
  var convertPlutusDataEffect = function (pd) {
      return Data_Maybe.maybe(Effect_Exception["throw"]("Failed to convert PlutusData"))(Control_Applicative.pure(Effect.applicativeEffect))(Serialization_PlutusData.convertPlutusData(pd));
  };
  var convertExUnits = function (v) {
      return Data_Maybe.maybe(Effect_Exception["throw"]("Failed to construct ExUnits"))(Control_Applicative.pure(Effect.applicativeEffect))(Control_Bind.bind(Data_Maybe.bindMaybe)(Serialization_BigNum.bigNumFromBigInt(v.mem))(function (mem$prime) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Serialization_BigNum.bigNumFromBigInt(v.steps))(function (steps$prime) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)($foreign.newExUnits(mem$prime)(steps$prime));
          });
      }));
  };
  var convertRedeemer = function (v) {
      return function __do() {
          var tag$prime = convertRedeemerTag(v.tag)();
          var index$prime = Data_Maybe.maybe(Effect_Exception["throw"]("Failed to convert redeemer index"))(Control_Applicative.pure(Effect.applicativeEffect))(Serialization_BigNum.bigNumFromBigInt(v.index))();
          var data$prime = convertPlutusDataEffect(v.data)();
          var exUnits$prime = convertExUnits(v.exUnits)();
          return $foreign.newRedeemer(tag$prime)(index$prime)(data$prime)(exUnits$prime)();
      };
  };
  var convertRedeemers = function (redeemers) {
      return Data_Functor.map(Effect.functorEffect)($foreign["_mkRedeemers"](FfiHelpers.containerHelper))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(convertRedeemer)(redeemers));
  };
  var convertEd25519Signature = function (v) {
      return $foreign.newEd25519Signature(v);
  };
  var convertVkeywitness = function (v) {
      return function __do() {
          var vkey$prime = convertVkey(v.value0)();
          var signature$prime = convertEd25519Signature(v.value1)();
          return $foreign.newVkeywitness(vkey$prime)(signature$prime)();
      };
  };
  var convertVkeywitnesses = function (arr) {
      return function __do() {
          var witnesses = $foreign.newVkeywitnesses();
          Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(Control_Bind.composeKleisli(Effect.bindEffect)(convertVkeywitness)($foreign.addVkeywitness(witnesses)))(arr)();
          return witnesses;
      };
  };
  var convertBootstrap = function (v) {
      return function __do() {
          var vkey$prime = convertVkey(v.vkey)();
          var signature$prime = convertEd25519Signature(v.signature)();
          return $foreign.newBootstrapWitness(vkey$prime)(signature$prime)(v.chainCode)(v.attributes)();
      };
  };
  var convertWitnessSet = function (v) {
      return function __do() {
          var ws = $foreign.newTransactionWitnessSet();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.vkeys)(Control_Bind.composeKleisli(Effect.bindEffect)(convertVkeywitnesses)($foreign.transactionWitnessSetSetVkeys(ws)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.nativeScripts)((function () {
              var $35 = Data_Maybe.maybe(Effect_Exception["throw"]("Failed to convert NativeScripts"))($foreign.transactionWitnessSetSetNativeScripts(ws));
              return function ($36) {
                  return $35(Serialization_NativeScript.convertNativeScripts($36));
              };
          })())();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.bootstraps)(Control_Bind.composeKleisli(Effect.bindEffect)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(convertBootstrap))($foreign["_wsSetBootstraps"](FfiHelpers.containerHelper)(ws)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.plutusScripts)(function (ps) {
              return function __do() {
                  var scripts = $foreign.newPlutusScripts();
                  Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(ps)(Control_Bind.composeKleisli(Effect.bindEffect)(convertPlutusScript)($foreign.addPlutusScript(scripts)))();
                  return $foreign.txWitnessSetSetPlutusScripts(ws)(scripts)();
              };
          })();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.plutusData)(Control_Bind.composeKleisli(Effect.bindEffect)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(convertPlutusDataEffect))($foreign["_wsSetPlutusData"](FfiHelpers.containerHelper)(ws)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.redeemers)(Control_Bind.composeKleisli(Effect.bindEffect)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(convertRedeemer))($foreign["_wsSetRedeemers"](FfiHelpers.containerHelper)(ws)))();
          return ws;
      };
  };
  exports["setPlutusData"] = setPlutusData;
  exports["setRedeemer"] = setRedeemer;
  exports["setPlutusScript"] = setPlutusScript;
  exports["convertWitnessSet"] = convertWitnessSet;
  exports["convertRedeemers"] = convertRedeemers;
  exports["convertRedeemer"] = convertRedeemer;
  exports["convertExUnits"] = convertExUnits;
  exports["convertPlutusScript"] = convertPlutusScript;
  exports["newPlutusScripts"] = $foreign.newPlutusScripts;
  exports["addPlutusScript"] = $foreign.addPlutusScript;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Serialization.AuxiliaryData"] = $PS["Serialization.AuxiliaryData"] || {};
  var exports = $PS["Serialization.AuxiliaryData"];
  var $foreign = $PS["Serialization.AuxiliaryData"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Effect = $PS["Effect"];
  var FfiHelpers = $PS["FfiHelpers"];
  var Helpers = $PS["Helpers"];
  var Serialization_BigNum = $PS["Serialization.BigNum"];
  var Serialization_NativeScript = $PS["Serialization.NativeScript"];
  var Serialization_WitnessSet = $PS["Serialization.WitnessSet"];
  var Types_TransactionMetadata = $PS["Types.TransactionMetadata"];                
  var convertTransactionMetadatum = function (v) {
      if (v instanceof Types_TransactionMetadata.MetadataMap) {
          return Control_Bind.bindFlipped(Effect.bindEffect)($foreign.newMetadataMap(FfiHelpers.containerHelper))(Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableArray)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(v.value0))(function (v1) {
              return Control_Apply.apply(Effect.applyEffect)(Data_Functor.map(Effect.functorEffect)(Data_Tuple.Tuple.create)(convertTransactionMetadatum(v1.value0)))(convertTransactionMetadatum(v1.value1));
          }));
      };
      if (v instanceof Types_TransactionMetadata.MetadataList) {
          return Control_Bind.bindFlipped(Effect.bindEffect)($foreign.newMetadataList(FfiHelpers.containerHelper))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(convertTransactionMetadatum)(v.value0));
      };
      if (v instanceof Types_TransactionMetadata.Int) {
          return $foreign.newMetadataInt(v.value0);
      };
      if (v instanceof Types_TransactionMetadata.Bytes) {
          return $foreign.newMetadataBytes(v.value0);
      };
      if (v instanceof Types_TransactionMetadata.Text) {
          return $foreign.newMetadataText(v.value0);
      };
      throw new Error("Failed pattern match at Serialization.AuxiliaryData (line 117, column 31 - line 126, column 38): " + [ v.constructor.name ]);
  };
  var convertGeneralTransactionMetadata = function (v) {
      return Control_Bind.bindFlipped(Effect.bindEffect)($foreign.newGeneralTransactionMetadata(FfiHelpers.containerHelper))(Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableArray)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(v))(function (v1) {
          return function __do() {
              var label = Helpers.fromJustEff("convertGeneralTransactionMetadata: failing to convert MetadataumLabel")(Serialization_BigNum.bigNumFromBigInt(v1.value0))();
              var datum = convertTransactionMetadatum(v1.value1)();
              return new Data_Tuple.Tuple(label, datum);
          };
      }));
  };
  var convertAuxiliaryData = function (v) {
      return function __do() {
          var ad = $foreign.newAuxiliaryData();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.metadata)(Control_Bind.composeKleisli(Effect.bindEffect)(convertGeneralTransactionMetadata)($foreign.setAuxiliaryDataGeneralTransactionMetadata(ad)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.nativeScripts)(Control_Bind.composeKleisli(Effect.bindEffect)((function () {
              var $22 = Helpers.fromJustEff("convertAuxiliaryData: failed to convert NativeScripts");
              return function ($23) {
                  return $22(Serialization_NativeScript.convertNativeScripts($23));
              };
          })())($foreign.setAuxiliaryDataNativeScripts(ad)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.plutusScripts)(function (ps) {
              return function __do() {
                  var scripts = Serialization_WitnessSet.newPlutusScripts();
                  Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(ps)(Control_Bind.composeKleisli(Effect.bindEffect)(Serialization_WitnessSet.convertPlutusScript)(Serialization_WitnessSet.addPlutusScript(scripts)))();
                  return $foreign.setAuxiliaryDataPlutusScripts(ad)(scripts)();
              };
          })();
          return ad;
      };
  };
  exports["convertAuxiliaryData"] = convertAuxiliaryData;
})(PS);
(function(exports) {
  /* global require exports BROWSER_RUNTIME */
  var lib;
  if (typeof BROWSER_RUNTIME != 'undefined' && BROWSER_RUNTIME) {
      lib = require('@emurgo/cardano-serialization-lib-browser');
  } else {
      lib = require('@emurgo/cardano-serialization-lib-nodejs');
  }

  exports._BigInt_from_str = helper => str => {
      try {
          return helper.just(lib.BigInt.from_str(str));
      } catch (_) {
          return helper.nothing;
      }
  };
})(PS["Serialization.BigInt"] = PS["Serialization.BigInt"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Serialization.BigInt"] = $PS["Serialization.BigInt"] || {};
  var exports = $PS["Serialization.BigInt"];
  var $foreign = $PS["Serialization.BigInt"];
  var Data_BigInt = $PS["Data.BigInt"];
  var FfiHelpers = $PS["FfiHelpers"];                
  var convertBigInt = (function () {
      var $0 = $foreign["_BigInt_from_str"](FfiHelpers.maybeFfiHelper);
      return function ($1) {
          return $0(Data_BigInt.toString($1));
      };
  })();
  exports["convertBigInt"] = convertBigInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Serialization"] = $PS["Serialization"] || {};
  var exports = $PS["Serialization"];
  var $foreign = $PS["Serialization"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Cardano_Types_Value = $PS["Cardano.Types.Value"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_UInt = $PS["Data.UInt"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Deserialization_FromBytes = $PS["Deserialization.FromBytes"];
  var Effect = $PS["Effect"];
  var FfiHelpers = $PS["FfiHelpers"];
  var Helpers = $PS["Helpers"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Serialization_AuxiliaryData = $PS["Serialization.AuxiliaryData"];
  var Serialization_BigInt = $PS["Serialization.BigInt"];
  var Serialization_BigNum = $PS["Serialization.BigNum"];
  var Serialization_Hash = $PS["Serialization.Hash"];
  var Serialization_PlutusData = $PS["Serialization.PlutusData"];
  var Serialization_WitnessSet = $PS["Serialization.WitnessSet"];
  var Types_TokenName = $PS["Types.TokenName"];
  var Untagged_Union = $PS["Untagged.Union"];                                           
  var privateKeyFromBytes = $foreign["_privateKeyFromBytes"](FfiHelpers.maybeFfiHelper);
  var convertWithdrawals = function (mp) {
      return Control_Bind.bindFlipped(Effect.bindEffect)($foreign.newWithdrawals(FfiHelpers.containerHelper))(Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableArray)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(mp))(function (v) {
          return Data_Functor.map(Effect.functorEffect)(Data_Tuple.Tuple.create(v.value0))(Helpers.fromJustEff("convertWithdrawals: Failed to convert BigNum")(Serialization_BigNum.bigNumFromBigInt(v.value1)));
      }));
  };
  var convertValue = function (val) {
      var m = Cardano_Types_Value["getNonAdaAsset'"](val);
      var lovelace = Cardano_Types_Value["valueToCoin'"](val);
      return function __do() {
          var multiasset = $foreign.newMultiAsset();
          Data_FoldableWithIndex.forWithIndex_(Effect.applicativeEffect)(Data_Map_Internal.foldableWithIndexMap)(m)(function (scriptHashBytes$prime) {
              return function (values) {
                  var mScripthash = Serialization_Hash.scriptHashFromBytes(Data_Newtype.wrap()(Cardano_Types_Value.getCurrencySymbol(scriptHashBytes$prime)));
                  return function __do() {
                      var scripthash = Helpers.fromJustEff("scriptHashFromBytes failed while converting value")(mScripthash)();
                      var assets = $foreign.newAssets();
                      Data_FoldableWithIndex.forWithIndex_(Effect.applicativeEffect)(Data_Map_Internal.foldableWithIndexMap)(values)(function (tokenName$prime) {
                          return function (bigIntValue) {
                              var tokenName = Types_TokenName.getTokenName(tokenName$prime);
                              return function __do() {
                                  var assetName = $foreign.newAssetName(tokenName)();
                                  var value = Helpers.fromJustEff("convertValue: number must not be negative")(Serialization_BigNum.bigNumFromBigInt(bigIntValue))();
                                  return $foreign.insertAssets(assets)(assetName)(value)();
                              };
                          };
                      })();
                      return $foreign.insertMultiAsset(multiasset)(scripthash)(assets)();
                  };
              };
          })();
          var value = $foreign.newValueFromAssets(multiasset)();
          Control_Bind.bindFlipped(Effect.bindEffect)($foreign.valueSetCoin(value))(Helpers.fromJustEff("convertValue: coin value must not be negative")(Serialization_BigNum.bigNumFromBigInt(lovelace)))();
          return value;
      };
  };
  var convertTxOutput = function (v) {
      return function __do() {
          var value = convertValue(v.amount)();
          var txo = $foreign.newTransactionOutput(v.address)(value)();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.unwrap())(v.dataHash))(function (bytes) {
              return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Deserialization_FromBytes.fromBytes(Deserialization_FromBytes.fromBytesDataHash)(bytes))($foreign.transactionOutputSetDataHash(txo));
          })();
          return txo;
      };
  };
  var convertTxOutputs = function (arrOutputs) {
      return function __do() {
          var outputs = $foreign.newTransactionOutputs();
          Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(Control_Bind.composeKleisli(Effect.bindEffect)(convertTxOutput)($foreign.addTransactionOutput(outputs)))(arrOutputs)();
          return outputs;
      };
  };
  var convertTxInput = function (v) {
      return function __do() {
          var tx_hash = Deserialization_FromBytes.fromBytesEffect(Deserialization_FromBytes.fromBytesTransactionHash)(Data_Newtype.unwrap()(v.transactionId))();
          return $foreign.newTransactionInput(tx_hash)(v.index)();
      };
  };
  var convertTxInputs = function (arrInputs) {
      return function __do() {
          var inputs = $foreign.newTransactionInputs();
          Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(Control_Bind.composeKleisli(Effect.bindEffect)(convertTxInput)($foreign.addTransactionInput(inputs)))(arrInputs)();
          return inputs;
      };
  };
  var convertRelays = function (relays) {
      return Data_Functor.map(Effect.functorEffect)($foreign.packRelays(FfiHelpers.containerHelper))(Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableArray)(relays)(function (relay) {
          if (relay instanceof Cardano_Types_Transaction.SingleHostAddr) {
              return function __do() {
                  var ipv4$prime = Data_Functor.map(Effect.functorEffect)(Untagged_Union.maybeToUor)(Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.unwrap())(relay.value0.ipv4))($foreign.newIpv4))();
                  var ipv6$prime = Data_Functor.map(Effect.functorEffect)(Untagged_Union.maybeToUor)(Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.unwrap())(relay.value0.ipv6))($foreign.newIpv6))();
                  return $foreign.newSingleHostAddr(Untagged_Union.maybeToUor(relay.value0.port))(ipv4$prime)(ipv6$prime)();
              };
          };
          if (relay instanceof Cardano_Types_Transaction.SingleHostName) {
              return $foreign.newSingleHostName(Untagged_Union.maybeToUor(relay.value0.port))(relay.value0.dnsName);
          };
          if (relay instanceof Cardano_Types_Transaction.MultiHostName) {
              return $foreign.newMultiHostName(relay.value0.dnsName);
          };
          throw new Error("Failed pattern match at Serialization (line 678, column 55 - line 686, column 31): " + [ relay.constructor.name ]);
      }));
  };
  var convertPoolMetadata = function (v) {
      return $foreign.newPoolMetadata(v.url)(v.hash);
  };
  var convertNetworkId = function (v) {
      if (v instanceof Serialization_Address.TestnetId) {
          return $foreign.networkIdTestnet;
      };
      if (v instanceof Serialization_Address.MainnetId) {
          return $foreign.networkIdMainnet;
      };
      throw new Error("Failed pattern match at Serialization (line 689, column 20 - line 691, column 34): " + [ v.constructor.name ]);
  };
  var convertMint = function (v) {
      return function __do() {
          var mint = $foreign.newMint();
          Data_FoldableWithIndex.forWithIndex_(Effect.applicativeEffect)(Data_Map_Internal.foldableWithIndexMap)(v)(function (scriptHashBytes$prime) {
              return function (values) {
                  var mScripthash = Serialization_Hash.scriptHashFromBytes(Data_Newtype.wrap()(Cardano_Types_Value.getCurrencySymbol(scriptHashBytes$prime)));
                  return function __do() {
                      var scripthash = Helpers.fromJustEff("scriptHashFromBytes failed while converting value")(mScripthash)();
                      var assets = $foreign.newMintAssets();
                      Data_FoldableWithIndex.forWithIndex_(Effect.applicativeEffect)(Data_Map_Internal.foldableWithIndexMap)(values)(function (tokenName$prime) {
                          return function (bigIntValue) {
                              var tokenName = Types_TokenName.getTokenName(tokenName$prime);
                              return function __do() {
                                  var assetName = $foreign.newAssetName(tokenName)();
                                  var bigInt = Helpers.fromJustEff("convertMint: failed to convert BigInt")(Serialization_BigInt.convertBigInt(bigIntValue))();
                                  var $$int = Helpers.fromJustEff("converMint: numeric overflow or underflow")($foreign["_bigIntToInt"](FfiHelpers.maybeFfiHelper)(bigInt))();
                                  return $foreign.insertMintAsset(assets)(assetName)($$int)();
                              };
                          };
                      })();
                      return $foreign.insertMintAssets(mint)(scripthash)(assets)();
                  };
              };
          })();
          return mint;
      };
  };
  var convertMIRToStakeCredentials = function (v) {
      return $foreign.newMIRToStakeCredentials(FfiHelpers.containerHelper)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(v));
  };
  var convertMoveInstantaneousReward = function (v) {
      if (v instanceof Cardano_Types_Transaction.ToOtherPot) {
          return $foreign.newMoveInstantaneousRewardToOtherPot(v.value0.pot)(v.value0.amount);
      };
      if (v instanceof Cardano_Types_Transaction.ToStakeCreds) {
          return Control_Bind.bind(Effect.bindEffect)(convertMIRToStakeCredentials(v.value0.amounts))($foreign.newMoveInstantaneousRewardToStakeCreds(v.value0.pot));
      };
      throw new Error("Failed pattern match at Serialization (line 663, column 1 - line 664, column 65): " + [ v.constructor.name ]);
  };
  var convertCostmdls = function (v) {
      return function __do() {
          var costs = Data_Functor.map(Effect.functorEffect)(Data_Newtype.unwrap())(Helpers.fromJustEff("`PlutusV1` not found in `Costmdls`")(Data_Map_Internal.lookup(Cardano_Types_Transaction.ordLanguage)(Cardano_Types_Transaction.PlutusV1.value)(v)))();
          var costModel = $foreign.newCostModel();
          Data_FoldableWithIndex.forWithIndex_(Effect.applicativeEffect)(Data_FoldableWithIndex.foldableWithIndexArray)(costs)(function (operation) {
              return function (cost) {
                  return Control_Bind.bindFlipped(Effect.bindEffect)($foreign.costModelSetCost(costModel)(operation))($foreign.newInt32(Data_UInt.toInt(cost)));
              };
          })();
          var costmdls = $foreign.newCostmdls();
          var plutusV1 = $foreign.newPlutusV1();
          $foreign.costmdlsSetCostModel(costmdls)(plutusV1)(costModel)();
          return costmdls;
      };
  };
  var convertProtocolParamUpdate = function (v) {
      var mkUnitInterval = function (x) {
          return $foreign.newUnitInterval(x.numerator)(x.denominator);
      };
      var convertExUnitPrices = function (v1) {
          return Control_Bind.join(Effect.bindEffect)(Control_Apply.apply(Effect.applyEffect)(Data_Functor.map(Effect.functorEffect)($foreign.newExUnitPrices)(mkUnitInterval(v1.memPrice)))(mkUnitInterval(v1.stepPrice)));
      };
      return function __do() {
          var ppu = $foreign.newProtocolParamUpdate();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.minfeeA)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)($foreign.ppuSetMinfeeA(ppu))((function () {
              var $116 = Helpers.fromJustEff("convertProtocolParamUpdate: min_fee_a must not be negative");
              var $117 = Data_Newtype.unwrap();
              return function ($118) {
                  return $116(Serialization_BigNum.bigNumFromBigInt($117($118)));
              };
          })()))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.minfeeB)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)($foreign.ppuSetMinfeeB(ppu))((function () {
              var $119 = Helpers.fromJustEff("convertProtocolParamUpdate: min_fee_b must not be negative");
              var $120 = Data_Newtype.unwrap();
              return function ($121) {
                  return $119(Serialization_BigNum.bigNumFromBigInt($120($121)));
              };
          })()))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.maxBlockBodySize)((function () {
              var $122 = $foreign.ppuSetMaxBlockBodySize(ppu);
              return function ($123) {
                  return $122(Data_UInt.toInt($123));
              };
          })())();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.maxTxSize)((function () {
              var $124 = $foreign.ppuSetMaxTxSize(ppu);
              return function ($125) {
                  return $124(Data_UInt.toInt($125));
              };
          })())();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.maxBlockHeaderSize)((function () {
              var $126 = $foreign.ppuSetMaxBlockHeaderSize(ppu);
              return function ($127) {
                  return $126(Data_UInt.toInt($127));
              };
          })())();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.keyDeposit)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)($foreign.ppuSetKeyDeposit(ppu))((function () {
              var $128 = Helpers.fromJustEff("convertProtocolParamUpdate: key_deposit must not be negative");
              var $129 = Data_Newtype.unwrap();
              return function ($130) {
                  return $128(Serialization_BigNum.bigNumFromBigInt($129($130)));
              };
          })()))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.poolDeposit)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)($foreign.ppuSetPoolDeposit(ppu))((function () {
              var $131 = Helpers.fromJustEff("convertProtocolParamUpdate: pool_deposit must not be negative");
              var $132 = Data_Newtype.unwrap();
              return function ($133) {
                  return $131(Serialization_BigNum.bigNumFromBigInt($132($133)));
              };
          })()))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.maxEpoch)((function () {
              var $134 = $foreign.ppuSetMaxEpoch(ppu);
              var $135 = Data_Newtype.unwrap();
              return function ($136) {
                  return $134(Data_UInt.toInt($135($136)));
              };
          })())();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.nOpt)((function () {
              var $137 = $foreign.ppuSetNOpt(ppu);
              return function ($138) {
                  return $137(Data_UInt.toInt($138));
              };
          })())();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.poolPledgeInfluence)(Control_Bind.composeKleisli(Effect.bindEffect)(mkUnitInterval)($foreign.ppuSetPoolPledgeInfluence(ppu)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.expansionRate)(Control_Bind.composeKleisli(Effect.bindEffect)(mkUnitInterval)($foreign.ppuSetExpansionRate(ppu)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.treasuryGrowthRate)(Control_Bind.composeKleisli(Effect.bindEffect)(mkUnitInterval)($foreign.ppuSetTreasuryGrowthRate(ppu)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.d)(Control_Bind.composeKleisli(Effect.bindEffect)(mkUnitInterval)($foreign.ppuSetD(ppu)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.extraEntropy)(function (v1) {
              if (v1 instanceof Cardano_Types_Transaction.IdentityNonce) {
                  return $foreign.ppuSetExtraEntropyIdentity(ppu);
              };
              if (v1 instanceof Cardano_Types_Transaction.HashNonce) {
                  return $foreign.ppuSetExtraEntropyFromHash(ppu)(v1.value0);
              };
              throw new Error("Failed pattern match at Serialization (line 568, column 23 - line 570, column 62): " + [ v1.constructor.name ]);
          })();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.protocolVersion)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)($foreign.ppuSetProtocolVersion(FfiHelpers.containerHelper)(ppu))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(function (pv) {
              return $foreign.newProtocolVersion(Data_UInt.toInt(pv.major))(Data_UInt.toInt(pv.minor));
          })))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.minPoolCost)($foreign.ppuSetMinPoolCost(ppu))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.adaPerUtxoByte)($foreign.ppuSetAdaPerUtxoByte(ppu))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.costModels)(Control_Bind.composeKleisli(Effect.bindEffect)(convertCostmdls)($foreign.ppuSetCostModels(ppu)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.executionCosts)(Control_Bind.composeKleisli(Effect.bindEffect)(convertExUnitPrices)($foreign.ppuSetExecutionCosts(ppu)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.maxTxExUnits)(Control_Bind.composeKleisli(Effect.bindEffect)(Serialization_WitnessSet.convertExUnits)($foreign.ppuSetMaxTxExUnits(ppu)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.maxBlockExUnits)(Control_Bind.composeKleisli(Effect.bindEffect)(Serialization_WitnessSet.convertExUnits)($foreign.ppuSetMaxBlockExUnits(ppu)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.maxValueSize)((function () {
              var $139 = $foreign.ppuSetMaxValueSize(ppu);
              return function ($140) {
                  return $139(Data_UInt.toInt($140));
              };
          })())();
          return ppu;
      };
  };
  var convertProposedProtocolParameterUpdates = function (ppus) {
      return Control_Bind.bindFlipped(Effect.bindEffect)($foreign.newProposedProtocolParameterUpdates(FfiHelpers.containerHelper))(Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableArray)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(Data_Newtype.unwrap()(ppus)))(function (v) {
          return Control_Apply.apply(Effect.applyEffect)(Data_Functor.map(Effect.functorEffect)(Data_Tuple.Tuple.create)($foreign.newGenesisHash(Data_Newtype.unwrap()(v.value0))))(convertProtocolParamUpdate(v.value1));
      }));
  };
  var convertUpdate = function (v) {
      return function __do() {
          var ppUpdates = convertProposedProtocolParameterUpdates(v.proposedProtocolParameterUpdates)();
          return $foreign.newUpdate(ppUpdates)(Data_UInt.toInt(Data_Newtype.unwrap()(v.epoch)))();
      };
  };
  var hashScriptData = function (rs) {
      return function (cms) {
          return function (ps) {
              return function __do() {
                  var plist = Helpers.fromJustEff("failed to convert datums")(Serialization_PlutusData.packPlutusList(ps))();
                  var rs$prime = $foreign.newRedeemers();
                  var cms$prime = convertCostmdls(cms)();
                  Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(Control_Bind.composeKleisliFlipped(Effect.bindEffect)($foreign.addRedeemer(rs$prime))(Serialization_WitnessSet.convertRedeemer))(rs)();
                  return $foreign["_hashScriptData"](rs$prime)(cms$prime)(plist)();
              };
          };
      };
  };
  var convertCert = function (v) {
      if (v instanceof Cardano_Types_Transaction.StakeRegistration) {
          return $foreign.newStakeRegistrationCertificate(v.value0);
      };
      if (v instanceof Cardano_Types_Transaction.StakeDeregistration) {
          return $foreign.newStakeDeregistrationCertificate(v.value0);
      };
      if (v instanceof Cardano_Types_Transaction.StakeDelegation) {
          return $foreign.newStakeDelegationCertificate(v.value0)(v.value1);
      };
      if (v instanceof Cardano_Types_Transaction.PoolRegistration) {
          return function __do() {
              var margin$prime = $foreign.newUnitInterval(v.value0.margin.numerator)(v.value0.margin.denominator)();
              var poolOwners$prime = $foreign.convertPoolOwners(FfiHelpers.containerHelper)(v.value0.poolOwners)();
              var relays$prime = convertRelays(v.value0.relays)();
              var poolMetadata$prime = Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableMaybe)(v.value0.poolMetadata)(convertPoolMetadata)();
              return $foreign.newPoolRegistrationCertificate(v.value0.operator)(v.value0.vrfKeyhash)(v.value0.pledge)(v.value0.cost)(margin$prime)(v.value0.rewardAccount)(poolOwners$prime)(relays$prime)(Untagged_Union.maybeToUor(poolMetadata$prime))();
          };
      };
      if (v instanceof Cardano_Types_Transaction.PoolRetirement) {
          return $foreign.newPoolRetirementCertificate(v.value0.poolKeyhash)(Data_UInt.toInt(Data_Newtype.unwrap()(v.value0.epoch)));
      };
      if (v instanceof Cardano_Types_Transaction.GenesisKeyDelegation) {
          return Control_Bind.join(Effect.bindEffect)(Control_Apply.apply(Effect.applyEffect)(Control_Apply.apply(Effect.applyEffect)(Data_Functor.map(Effect.functorEffect)($foreign.newGenesisKeyDelegationCertificate)($foreign.newGenesisHash(v.value0.genesisHash)))($foreign.newGenesisDelegateHash(v.value0.genesisDelegateHash)))(Control_Applicative.pure(Effect.applicativeEffect)(v.value0.vrfKeyhash)));
      };
      if (v instanceof Cardano_Types_Transaction.MoveInstantaneousRewardsCert) {
          return Control_Bind.bindFlipped(Effect.bindEffect)($foreign.newMoveInstantaneousRewardsCertificate)(convertMoveInstantaneousReward(v.value0));
      };
      throw new Error("Failed pattern match at Serialization (line 615, column 15 - line 656, column 41): " + [ v.constructor.name ]);
  };
  var convertCerts = function (certs) {
      return function __do() {
          var certificates = $foreign.newCertificates();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(certs)(Control_Bind.composeKleisli(Effect.bindEffect)(convertCert)($foreign.addCert(certificates)))();
          return certificates;
      };
  };
  var convertTxBody = function (v) {
      return function __do() {
          var inputs = convertTxInputs(v.inputs)();
          var outputs = convertTxOutputs(v.outputs)();
          var fee = Helpers.fromJustEff("Failed to convert fee")(Serialization_BigNum.bigNumFromBigInt(Data_Newtype.unwrap()(v.fee)))();
          var ttl = Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(v.ttl)((function () {
              var $141 = Data_Newtype.unwrap();
              return function ($142) {
                  return Data_UInt.toInt($141($142));
              };
          })());
          var txBody = $foreign.newTransactionBody(inputs)(outputs)(fee)(Untagged_Union.maybeToUor(ttl))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.validityStartInterval)((function () {
              var $143 = $foreign.transactionBodySetValidityStartInterval(txBody);
              var $144 = Data_Newtype.unwrap();
              return function ($145) {
                  return $143(Data_UInt.toInt($144($145)));
              };
          })())();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.requiredSigners)((function () {
              var $146 = $foreign.transactionBodySetRequiredSigners(FfiHelpers.containerHelper)(txBody);
              var $147 = Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.unwrap());
              return function ($148) {
                  return $146($147($148));
              };
          })())();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.auxiliaryDataHash)((function () {
              var $149 = $foreign.transactionBodySetAuxiliaryDataHash(txBody);
              var $150 = Data_Newtype.unwrap();
              return function ($151) {
                  return $149($150($151));
              };
          })())();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.networkId)(Control_Bind.composeKleisli(Effect.bindEffect)(convertNetworkId)($foreign.setTxBodyNetworkId(txBody)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.scriptDataHash)(Control_Bind.composeKleisli(Effect.bindEffect)((function () {
              var $152 = Data_Newtype.wrap();
              var $153 = Data_Newtype.unwrap();
              return function ($154) {
                  return $foreign.newScriptDataHashFromBytes($152($153($154)));
              };
          })())($foreign.setTxBodyScriptDataHash(txBody)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.withdrawals)(Control_Bind.composeKleisli(Effect.bindEffect)(convertWithdrawals)($foreign.setTxBodyWithdrawals(txBody)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.mint)(Control_Bind.composeKleisli(Effect.bindEffect)(convertMint)($foreign.setTxBodyMint(txBody)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.certs)(Control_Bind.composeKleisli(Effect.bindEffect)(convertCerts)($foreign.setTxBodyCerts(txBody)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.collateral)(Control_Bind.composeKleisli(Effect.bindEffect)(convertTxInputs)($foreign.setTxBodyCollateral(txBody)))();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.update)(Control_Bind.composeKleisli(Effect.bindEffect)(convertUpdate)($foreign.setTxBodyUpdate(txBody)))();
          return txBody;
      };
  };
  var convertTransaction = function (v) {
      return function __do() {
          var txBody = convertTxBody(v.body)();
          var ws = Serialization_WitnessSet.convertWitnessSet(v.witnessSet)();
          var mbAuxiliaryData = Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableMaybe)(v.auxiliaryData)(Serialization_AuxiliaryData.convertAuxiliaryData)();
          var tx = (function () {
              if (mbAuxiliaryData instanceof Data_Maybe.Nothing) {
                  return $foreign.newTransaction_(txBody)(ws)();
              };
              if (mbAuxiliaryData instanceof Data_Maybe.Just) {
                  return $foreign.newTransaction(txBody)(ws)(mbAuxiliaryData.value0)();
              };
              throw new Error("Failed pattern match at Serialization (line 491, column 11 - line 493, column 45): " + [ mbAuxiliaryData.constructor.name ]);
          })();
          $foreign.setTxIsValid(tx)(v.isValid)();
          return tx;
      };
  };
  exports["convertTransaction"] = convertTransaction;
  exports["convertTxBody"] = convertTxBody;
  exports["hashScriptData"] = hashScriptData;
  exports["privateKeyFromBytes"] = privateKeyFromBytes;
  exports["toBytes"] = $foreign.toBytes;
  exports["hashTransaction"] = $foreign.hashTransaction;
  exports["publicKeyHash"] = $foreign.publicKeyHash;
  exports["publicKeyFromPrivateKey"] = $foreign.publicKeyFromPrivateKey;
  exports["makeVkeywitness"] = $foreign.makeVkeywitness;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deserialization.UnspentOutput"] = $PS["Deserialization.UnspentOutput"] || {};
  var exports = $PS["Deserialization.UnspentOutput"];
  var $foreign = $PS["Deserialization.UnspentOutput"];
  var Cardano_Types_Value = $PS["Cardano.Types.Value"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Bitraversable = $PS["Data.Bitraversable"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_UInt = $PS["Data.UInt"];
  var Deserialization_BigNum = $PS["Deserialization.BigNum"];
  var FfiHelpers = $PS["FfiHelpers"];
  var Serialization = $PS["Serialization"];
  var Serialization_Hash = $PS["Serialization.Hash"];
  var Types_TokenName = $PS["Types.TokenName"];
  var Types_Transaction = $PS["Types.Transaction"];
  var Untagged_Union = $PS["Untagged.Union"];                                                                             
  var convertValue = function (value) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Deserialization_BigNum.bigNumToBigInt($foreign.getCoin(value)))(function (coin) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableMaybe)($foreign.getMultiAsset(FfiHelpers.maybeFfiHelper)(value))(function (multiasset) {
              var multiasset$prime = Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)($foreign.extractAssets(Data_Tuple.Tuple.create)))($foreign.extractMultiAsset(Data_Tuple.Tuple.create)(multiasset));
              return Control_Bind.bind(Data_Maybe.bindMaybe)((function () {
                  var $2 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map_Internal.fromFoldable(Cardano_Types_Value.ordCurrencySymbol)(Data_Foldable.foldableArray));
                  var $3 = (function () {
                      var $5 = Data_Functor.map(Data_Maybe.functorMaybe);
                      var $6 = Data_Functor.map(Data_Functor.functorArray);
                      return function ($7) {
                          return $5($6($7));
                      };
                  })()(Data_Functor.map(Data_Tuple.functorTuple)(Data_Map_Internal.fromFoldable(Types_TokenName.ordTokenName)(Data_Foldable.foldableArray)));
                  return function ($4) {
                      return $2($3($4));
                  };
              })()(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Bitraversable.bitraverse(Data_Bitraversable.bitraversableTuple)(Data_Maybe.applicativeMaybe)((function () {
                  var $8 = Data_Newtype.unwrap();
                  return function ($9) {
                      return Cardano_Types_Value.mkCurrencySymbol($8(Serialization_Hash.scriptHashToBytes($9)));
                  };
              })())(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Bitraversable.ltraverse(Data_Bitraversable.bitraversableTuple)(Data_Maybe.applicativeMaybe)(function ($10) {
                  return Types_TokenName.mkTokenName(Types_TokenName.assetNameName($10));
              }))))(multiasset$prime)))(function (v) {
                  return Data_Traversable.traverse(Data_Map_Internal.traversableMap)(Data_Maybe.applicativeMaybe)(Data_Traversable.traverse(Data_Map_Internal.traversableMap)(Data_Maybe.applicativeMaybe)(Deserialization_BigNum.bigNumToBigInt))(v);
              });
          }))(function (multiasset) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Cardano_Types_Value.mkValue(coin)(Cardano_Types_Value.mkNonAdaAsset(Data_Maybe.fromMaybe(Data_Map_Internal.empty)(multiasset))));
          });
      });
  };
  var convertOutput = function (output) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(convertValue($foreign.getAmount(output)))(function (amount) {
          var dataHash = Data_Functor.mapFlipped(Data_Maybe.functorMaybe)($foreign.getDataHash(FfiHelpers.maybeFfiHelper)(output))((function () {
              var $11 = Untagged_Union.asOneOf();
              return function ($12) {
                  return Types_Transaction.DataHash(Serialization.toBytes($11($12)));
              };
          })());
          var address = $foreign.getAddress(output);
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
              address: address,
              amount: amount,
              dataHash: dataHash
          });
      });
  };
  var convertInput = function (input) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_UInt["fromInt'"]($foreign.getTransactionIndex(input)))(function (index) {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
              transactionId: Serialization.toBytes(Untagged_Union.asOneOf()($foreign.getTransactionHash(input))),
              index: index
          });
      });
  };
  var convertUnspentOutput = function (tuo) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(convertInput($foreign.getInput(tuo)))(function (input) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(convertOutput($foreign.getOutput(tuo)))(function (output) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                  input: input,
                  output: output
              });
          });
      });
  };
  exports["convertUnspentOutput"] = convertUnspentOutput;
  exports["convertInput"] = convertInput;
  exports["convertOutput"] = convertOutput;
})(PS);
(function(exports) {
  /* global require exports BROWSER_RUNTIME */

  var lib;
  if (typeof BROWSER_RUNTIME != 'undefined' && BROWSER_RUNTIME) {
      lib = require('@emurgo/cardano-serialization-lib-browser');
  } else {
      lib = require('@emurgo/cardano-serialization-lib-nodejs');
  }

  const call = property => object => object[property]();

  const callMaybe = property => maybe => object => {
      const res = object[property]();
      return res != null ? maybe.just(res) : maybe.nothing;
  };

  // Classes like TransactionInputs are just monomorphic containers with `len`
  // and `get()` methods. This function abstracts away converting them to Array
  // of something.
  const containerExtractor = obj => {
      const res = [];

      for (let i = 0; i < obj.len(); i++) {
          res.push(obj.get(i));
      };

      return res;
  };

  exports.getVkeywitnesses = callMaybe('vkeys');
  exports.extractWitnesses = containerExtractor;
  exports.getVkey = call('vkey');
  exports.getSignature = call('signature');
  exports.vkeyPublicKey = call('public_key');
  exports.publicKeyToBech32 = call('to_bech32');
  exports.signatureToBech32 = call('to_bech32');
  exports.getNativeScripts = callMaybe('native_scripts');
  exports.extractNativeScripts = containerExtractor;     
  exports.getBootstraps = callMaybe('bootstraps');
  exports.extractBootstraps = containerExtractor;
  exports.getBootstrapVkey = call('vkey');
  exports.getBootstrapSignature = call('signature');
  exports.getBootstrapChainCode = call('chain_code');
  exports.getBootstrapAttributes = call('attributes');
  exports.getPlutusScripts = callMaybe('plutus_scripts');
  exports.extractPlutusScripts = containerExtractor;
  exports.plutusScriptBytes = call('bytes');
  exports.getWitnessSetPlutusData = callMaybe('plutus_data');
  exports.extractPlutusData = containerExtractor;
  exports.getRedeemers = callMaybe('redeemers');
  exports.getRedeemerTag = call('tag');
  exports.getRedeemerIndex = call('index');
  exports.extractRedeemers = containerExtractor;
  exports.getRedeemerTagKind = call('kind');
  exports.getRedeemerPlutusData = call('data');
  exports.getExUnits = call('ex_units');
  exports.getExUnitsMem = call('mem');
  exports.getExUnitsSteps = call('steps');
})(PS["Deserialization.WitnessSet"] = PS["Deserialization.WitnessSet"] || {});
(function(exports) {
  /* global require exports BROWSER_RUNTIME */

  var lib;
  if (typeof BROWSER_RUNTIME != 'undefined' && BROWSER_RUNTIME) {
      lib = require('@emurgo/cardano-serialization-lib-browser');
  } else {
      lib = require('@emurgo/cardano-serialization-lib-nodejs');
  }

  const getNativeScriptAs = prop => maybe => ns => {
      const res = ns[prop]();
      return res == null ? maybe.nothing : maybe.just(res);
  };

  const call = property => object => object[property]();

  exports.getScriptPubkey = getNativeScriptAs('as_script_pubkey');
  exports.getScriptAll = getNativeScriptAs('as_script_all');
  exports.getScriptAny = getNativeScriptAs('as_script_any');
  exports.getScriptNOfK = getNativeScriptAs('as_script_n_of_k');
  exports.getTimelockStart = getNativeScriptAs('as_timelock_start');
  exports.getTimelockExpiry = getNativeScriptAs('as_timelock_expiry');
  exports.scriptPubkey_addr_keyhash = call('addr_keyhash');
  exports.scriptAllScripts = helper => helper.unpackFromProperty('native_scripts');
  exports.scriptAnyScripts = helper => helper.unpackFromProperty('native_scripts');
  exports.scriptNOfKScripts = helper => helper.unpackFromProperty('native_scripts');
  exports.scriptNOfK_n = call('n');
  exports.timelockStart_slot = call('slot');
  exports.timelockExpiry_slot = call('slot');
})(PS["Deserialization.NativeScript"] = PS["Deserialization.NativeScript"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deserialization.NativeScript"] = $PS["Deserialization.NativeScript"] || {};
  var exports = $PS["Deserialization.NativeScript"];
  var $foreign = $PS["Deserialization.NativeScript"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_UInt = $PS["Data.UInt"];
  var FfiHelpers = $PS["FfiHelpers"];
  var Serialization_Address = $PS["Serialization.Address"];                
  var convertTimelockStart = function (ns) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function ($0) {
          return Cardano_Types_Transaction.TimelockStart.create(Serialization_Address.Slot(Data_UInt.fromInt($foreign.timelockStart_slot($0))));
      })($foreign.getTimelockStart(FfiHelpers.maybeFfiHelper)(ns));
  };
  var convertTimelockExpiry = function (ns) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function ($1) {
          return Cardano_Types_Transaction.TimelockExpiry.create(Serialization_Address.Slot(Data_UInt.fromInt($foreign.timelockExpiry_slot($1))));
      })($foreign.getTimelockExpiry(FfiHelpers.maybeFfiHelper)(ns));
  };
  var convertScriptPubKey = function (ns) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function ($2) {
          return Cardano_Types_Transaction.ScriptPubkey.create($foreign.scriptPubkey_addr_keyhash($2));
      })($foreign.getScriptPubkey(FfiHelpers.maybeFfiHelper)(ns));
  };
  var convertScriptNOfK = function (ns) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)($foreign.getScriptNOfK(FfiHelpers.maybeFfiHelper)(ns))(function (scriptNOfK) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(convertNativeScript)($foreign.scriptNOfKScripts(FfiHelpers.containerHelper)(scriptNOfK)))(function (res) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Cardano_Types_Transaction.ScriptNOfK($foreign.scriptNOfK_n(scriptNOfK), res));
          });
      });
  };
  var convertScriptAny = function (ns) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)($foreign.getScriptAny(FfiHelpers.maybeFfiHelper)(ns))(function (scriptAny) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Cardano_Types_Transaction.ScriptAny.create)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(convertNativeScript)($foreign.scriptAnyScripts(FfiHelpers.containerHelper)(scriptAny)));
      });
  };
  var convertScriptAll = function (ns) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)($foreign.getScriptAll(FfiHelpers.maybeFfiHelper)(ns))(function (scriptAll) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Cardano_Types_Transaction.ScriptAll.create)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(convertNativeScript)($foreign.scriptAllScripts(FfiHelpers.containerHelper)(scriptAll)));
      });
  };
  var convertNativeScript = function (ns) {
      return Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(convertScriptPubKey(ns))(convertScriptAll(ns)))(convertScriptAny(ns)))(convertScriptNOfK(ns)))(convertTimelockStart(ns)))(convertTimelockExpiry(ns));
  };
  exports["convertNativeScript"] = convertNativeScript;
})(PS);
(function(exports) {
  /* global require exports BROWSER_RUNTIME */
  var lib;
  if (typeof BROWSER_RUNTIME != 'undefined' && BROWSER_RUNTIME) {
      lib = require('@emurgo/cardano-serialization-lib-browser');
  } else {
      lib = require('@emurgo/cardano-serialization-lib-nodejs');
  }

  const plutusDataAs = what => helper => data => {
      const res = data['as_' + what]();
      return res == null ? helper.nothing : helper.just(res);
  };

  // :: MaybeFfiHelper -> PlutusData -> PlutusList
  exports._PlutusData_constr = plutusDataAs('constr_plutus_data');
  // :: MaybeFfiHelper -> PlutusData -> PlutusMap
  exports._PlutusData_map = plutusDataAs('map');
  // :: MaybeFfiHelper -> PlutusData -> Maybe (Array PlutusData)
  exports._PlutusData_list = plutusDataAs('list');
  // :: MaybeFfiHelper -> PlutusData -> Maybe BigInt
  exports._PlutusData_integer = plutusDataAs('integer');
  // :: MaybeFfiHelper -> PlutusData -> Maybe ByteArray
  exports._PlutusData_bytes = plutusDataAs('bytes');
  exports._unpackPlutusList = containerHelper => containerHelper.unpack;
  exports._ConstrPlutusData_alternative = x => x.alternative();
  exports._ConstrPlutusData_data = x => x.data();

  exports._unpackPlutusMap = containerHelper => tuple => plutusMap => {
      const keys = containerHelper.unpack(plutusMap.keys());
      const res = [];
      for (let key of keys) {
          // Assuming that `PlutusMap.get()` never fails on elements from result of its `.keys()` call.
          res.push(tuple(key)(plutusMap.get(key)));
      }
      return res;
  };
})(PS["Deserialization.PlutusData"] = PS["Deserialization.PlutusData"] || {});
(function(exports) {
  /* global exports */

  exports._BigInt_to_str = x => x.to_str();
})(PS["Deserialization.BigInt"] = PS["Deserialization.BigInt"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deserialization.BigInt"] = $PS["Deserialization.BigInt"] || {};
  var exports = $PS["Deserialization.BigInt"];
  var $foreign = $PS["Deserialization.BigInt"];
  var Data_BigInt = $PS["Data.BigInt"];                
  var convertBigInt = function ($0) {
      return Data_BigInt.fromString($foreign["_BigInt_to_str"]($0));
  };
  exports["convertBigInt"] = convertBigInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deserialization.PlutusData"] = $PS["Deserialization.PlutusData"] || {};
  var exports = $PS["Deserialization.PlutusData"];
  var $foreign = $PS["Deserialization.PlutusData"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Deserialization_BigInt = $PS["Deserialization.BigInt"];
  var Deserialization_BigNum = $PS["Deserialization.BigNum"];
  var FfiHelpers = $PS["FfiHelpers"];
  var Types_PlutusData = $PS["Types.PlutusData"];                
  var convertPlutusInteger = function (pd) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(Types_PlutusData.Integer.create)(Control_Bind.bind(Data_Maybe.bindMaybe)($foreign["_PlutusData_integer"](FfiHelpers.maybeFfiHelper)(pd))(Deserialization_BigInt.convertBigInt));
  };
  var convertPlutusBytes = function (pd) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(Types_PlutusData.Bytes.create)($foreign["_PlutusData_bytes"](FfiHelpers.maybeFfiHelper)(pd));
  };
  var convertPlutusMap = function (pd) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)($foreign["_PlutusData_map"](FfiHelpers.maybeFfiHelper)(pd))((function () {
          var $4 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(function (v) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(convertPlutusData(v.value0))(function (k$prime) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(convertPlutusData(v.value1))(function (v$prime) {
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Data_Tuple.Tuple(k$prime, v$prime));
                  });
              });
          });
          var $5 = $foreign["_unpackPlutusMap"](FfiHelpers.containerHelper)(Data_Tuple.Tuple.create);
          return function ($6) {
              return $4($5($6));
          };
      })()))(function (entries) {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Types_PlutusData["Map"](entries));
      });
  };
  var convertPlutusList = function (pd) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(Types_PlutusData.List.create)(Control_Bind.bind(Data_Maybe.bindMaybe)($foreign["_PlutusData_list"](FfiHelpers.maybeFfiHelper)(pd))((function () {
          var $7 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(convertPlutusData);
          var $8 = $foreign["_unpackPlutusList"](FfiHelpers.containerHelper);
          return function ($9) {
              return $7($8($9));
          };
      })()));
  };
  var convertPlutusData = function (pd) {
      return Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(Control_Alt.alt(Data_Maybe.altMaybe)(convertPlutusConstr(pd))(convertPlutusMap(pd)))(convertPlutusList(pd)))(convertPlutusInteger(pd)))(convertPlutusBytes(pd));
  };
  var convertPlutusConstr = function (pd) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)($foreign["_PlutusData_constr"](FfiHelpers.maybeFfiHelper)(pd))(function (constr) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(convertPlutusData)($foreign["_unpackPlutusList"](FfiHelpers.containerHelper)($foreign["_ConstrPlutusData_data"](constr))))(function (data$prime) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Deserialization_BigNum.bigNumToBigInt($foreign["_ConstrPlutusData_alternative"](constr)))(function (alt) {
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Types_PlutusData.Constr(alt, data$prime));
              });
          });
      });
  };
  exports["convertPlutusData"] = convertPlutusData;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deserialization.WitnessSet"] = $PS["Deserialization.WitnessSet"] || {};
  var exports = $PS["Deserialization.WitnessSet"];
  var $foreign = $PS["Deserialization.WitnessSet"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Deserialization_BigNum = $PS["Deserialization.BigNum"];
  var Deserialization_NativeScript = $PS["Deserialization.NativeScript"];
  var Deserialization_PlutusData = $PS["Deserialization.PlutusData"];
  var FfiHelpers = $PS["FfiHelpers"];
  var Types_RedeemerTag = $PS["Types.RedeemerTag"];
  var Types_Scripts = $PS["Types.Scripts"];                                                 
  var convertVkey = function ($2) {
      return Cardano_Types_Transaction.Vkey(Cardano_Types_Transaction.PublicKey($foreign.publicKeyToBech32($foreign.vkeyPublicKey($2))));
  };
  var convertSignature = function ($3) {
      return Cardano_Types_Transaction.Ed25519Signature($foreign.signatureToBech32($3));
  };
  var convertVkeyWitness = function (witness) {
      var vkey = $foreign.getVkey(witness);
      var signature = convertSignature($foreign.getSignature(witness));
      var publicKey = convertVkey(vkey);
      return new Data_Tuple.Tuple(publicKey, signature);
  };
  var convertVkeyWitnesses = (function () {
      var $4 = Data_Functor.map(Data_Functor.functorArray)(convertVkeyWitness);
      return function ($5) {
          return $4($foreign.extractWitnesses($5));
      };
  })();
  var convertRedeemerTag = function (tag) {
      var v = $foreign.getRedeemerTagKind(tag);
      if (v === 0) {
          return new Data_Maybe.Just(Types_RedeemerTag.Spend.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just(Types_RedeemerTag.Mint.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(Types_RedeemerTag.Cert.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(Types_RedeemerTag.Reward.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var convertPlutusScripts = (function () {
      var $6 = Data_Functor.map(Data_Functor.functorArray)(function ($8) {
          return Types_Scripts.PlutusScript($foreign.plutusScriptBytes($8));
      });
      return function ($7) {
          return $6($foreign.extractPlutusScripts($7));
      };
  })();
  var convertPlutusList = (function () {
      var $9 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Deserialization_PlutusData.convertPlutusData);
      return function ($10) {
          return $9($foreign.extractPlutusData($10));
      };
  })();
  var convertNativeScripts = function (nativeScripts) {
      return Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableArray)($foreign.extractNativeScripts(nativeScripts))(Deserialization_NativeScript.convertNativeScript);
  };
  var convertExUnits = function (eu) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Deserialization_BigNum.bigNumToBigInt($foreign.getExUnitsMem(eu)))(function (mem) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Deserialization_BigNum.bigNumToBigInt($foreign.getExUnitsSteps(eu)))(function (steps) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                  mem: mem,
                  steps: steps
              });
          });
      });
  };
  var convertRedeemer = function (redeemer) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(convertRedeemerTag($foreign.getRedeemerTag(redeemer)))(function (tag) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Deserialization_BigNum.bigNumToBigInt($foreign.getRedeemerIndex(redeemer)))(function (index) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(convertExUnits($foreign.getExUnits(redeemer)))(function (exUnits) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Deserialization_PlutusData.convertPlutusData($foreign.getRedeemerPlutusData(redeemer)))(function (data_) {
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                          tag: tag,
                          index: index,
                          data: data_,
                          exUnits: exUnits
                      });
                  });
              });
          });
      });
  };
  var convertRedeemers = (function () {
      var $11 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(convertRedeemer);
      return function ($12) {
          return $11($foreign.extractRedeemers($12));
      };
  })();
  var convertBootstraps = (function () {
      var $13 = Data_Functor.map(Data_Functor.functorArray)(function (bootstrap) {
          return {
              vkey: convertVkey($foreign.getBootstrapVkey(bootstrap)),
              signature: convertSignature($foreign.getBootstrapSignature(bootstrap)),
              chainCode: $foreign.getBootstrapChainCode(bootstrap),
              attributes: $foreign.getBootstrapAttributes(bootstrap)
          };
      });
      return function ($14) {
          return $13($foreign.extractBootstraps($14));
      };
  })();
  var convertWitnessSet = function (ws) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableMaybe)($foreign.getNativeScripts(FfiHelpers.maybeFfiHelper)(ws))(convertNativeScripts))(function (nativeScripts) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableMaybe)($foreign.getRedeemers(FfiHelpers.maybeFfiHelper)(ws))(convertRedeemers))(function (redeemers) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Traversable["for"](Data_Maybe.applicativeMaybe)(Data_Traversable.traversableMaybe)($foreign.getWitnessSetPlutusData(FfiHelpers.maybeFfiHelper)(ws))(convertPlutusList))(function (plutusData) {
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                      vkeys: Data_Functor.mapFlipped(Data_Maybe.functorMaybe)($foreign.getVkeywitnesses(FfiHelpers.maybeFfiHelper)(ws))(convertVkeyWitnesses),
                      nativeScripts: nativeScripts,
                      bootstraps: Data_Functor.mapFlipped(Data_Maybe.functorMaybe)($foreign.getBootstraps(FfiHelpers.maybeFfiHelper)(ws))(convertBootstraps),
                      plutusScripts: Data_Functor.mapFlipped(Data_Maybe.functorMaybe)($foreign.getPlutusScripts(FfiHelpers.maybeFfiHelper)(ws))(convertPlutusScripts),
                      plutusData: plutusData,
                      redeemers: redeemers
                  });
              });
          });
      });
  };
  exports["convertNativeScripts"] = convertNativeScripts;
  exports["convertPlutusScripts"] = convertPlutusScripts;
  exports["convertVkeyWitness"] = convertVkeyWitness;
  exports["convertWitnessSet"] = convertWitnessSet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Deserialization.Transaction"] = $PS["Deserialization.Transaction"] || {};
  var exports = $PS["Deserialization.Transaction"];
  var $foreign = $PS["Deserialization.Transaction"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Cardano_Types_Value = $PS["Cardano.Types.Value"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Bitraversable = $PS["Data.Bitraversable"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_UInt = $PS["Data.UInt"];
  var Data_Variant = $PS["Data.Variant"];
  var Deserialization_BigNum = $PS["Deserialization.BigNum"];
  var Deserialization_Error = $PS["Deserialization.Error"];
  var Deserialization_UnspentOutput = $PS["Deserialization.UnspentOutput"];
  var Deserialization_WitnessSet = $PS["Deserialization.WitnessSet"];
  var FfiHelpers = $PS["FfiHelpers"];
  var Serialization = $PS["Serialization"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Types_Int = $PS["Types.Int"];
  var Types_TokenName = $PS["Types.TokenName"];
  var Types_TransactionMetadata = $PS["Types.TransactionMetadata"];
  var Untagged_Union = $PS["Untagged.Union"];
  var cslNumberToUInt = function (nm) {
      return function (nb) {
          return Deserialization_Error.cslErr(nm + (": Number (" + (Data_Show.show(Data_Show.showNumber)(nb) + ") -> UInt")))(Data_UInt["fromNumber'"](nb));
      };
  };
  var cslIntToUInt = function (nm) {
      return function (nb) {
          return Deserialization_Error.cslErr(nm + (": Int (" + (Data_Show.show(Data_Show.showInt)(nb) + ") -> UInt")))(Data_UInt["fromInt'"](nb));
      };
  };
  var convertScriptDataHash = (function () {
      var $29 = Untagged_Union.asOneOf();
      return function ($30) {
          return Cardano_Types_Transaction.ScriptDataHash(Serialization.toBytes($29($30)));
      };
  })();
  var convertProtocolVersions = function (nm) {
      return function (cslPV) {
          return Data_Traversable["for"](Data_Either.applicativeEither)(Data_Traversable.traversableArray)($foreign["_unpackProtocolVersions"](FfiHelpers.containerHelper)(cslPV))(function (v) {
              return Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(function (v1) {
                  return function (v2) {
                      return {
                          major: v1,
                          minor: v2
                      };
                  };
              })(cslNumberToUInt(nm + " major")(v.major)))(cslNumberToUInt(nm + " minor")(v.minor));
          });
      };
  };
  var convertPoolRetirement = function (poolKeyhash) {
      return function (epochInt) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Functor.map(Data_Either.functorEither)(Data_Newtype.wrap())(cslIntToUInt("PoolRetirement.epoch")(epochInt)))(function (epoch) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(new Cardano_Types_Transaction.PoolRetirement({
                  poolKeyhash: poolKeyhash,
                  epoch: epoch
              }));
          });
      };
  };
  var convertNonce = $foreign["_convertNonce"]({
      hashNonce: Cardano_Types_Transaction.HashNonce.create,
      identityNonce: Cardano_Types_Transaction.IdentityNonce.value
  });
  var convertMint = function (mint) {
      var convAssetName = Data_Bifunctor.bimap(Data_Bifunctor.bifunctorTuple)(Types_TokenName.tokenNameFromAssetName)(Types_Int.toBigInt);
      return Data_Map_Internal.fromFoldable(Cardano_Types_Value.ordCurrencySymbol)(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorTuple)(Cardano_Types_Value.scriptHashAsCurrencySymbol))(Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)((function () {
          var $31 = Data_Map_Internal.fromFoldable(Types_TokenName.ordTokenName)(Data_Foldable.foldableArray);
          var $32 = Data_Functor.map(Data_Functor.functorArray)(convAssetName);
          var $33 = $foreign["_unpackMintAssets"](FfiHelpers.containerHelper);
          return function ($34) {
              return $31($32($33($34)));
          };
      })()))($foreign["_unpackMint"](FfiHelpers.containerHelper)(mint))));
  };
  var convertMetadataMap = function (convert) {
      var $35 = Data_Functor.map(Data_Either.functorEither)((function () {
          var $39 = Data_Map_Internal.fromFoldable(Types_TransactionMetadata.ordTransactionMetadatum)(Data_Foldable.foldableArray);
          return function ($40) {
              return Types_TransactionMetadata.MetadataMap.create($39($40));
          };
      })());
      var $36 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Data_Bitraversable.bitraverse(Data_Bitraversable.bitraversableTuple)(Data_Either.applicativeEither)(convert("convertMetadataMap key"))(convert("convertMetadataMap value")));
      var $37 = $foreign["_unpackMetadataMap"](FfiHelpers.containerHelper);
      return function ($38) {
          return $35($36($37($38)));
      };
  };
  var convertMetadataList = function (convert) {
      var $41 = Data_Functor.map(Data_Either.functorEither)(Types_TransactionMetadata.MetadataList.create);
      var $42 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(convert("convertMetadataList"));
      var $43 = $foreign["_unpackMetadataList"](FfiHelpers.containerHelper);
      return function ($44) {
          return $41($42($43($44)));
      };
  };
  var convertMetadatum = function (err) {
      var stringToInt = function (s) {
          var $45 = Deserialization_Error.cslErr(err + (": string (" + (s + ") -> bigint")));
          var $46 = Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(Types_Int.fromBigInt)(Data_BigInt.fromString);
          return function ($47) {
              return $45($46($47));
          };
      };
      return Control_Lazy.fix(Control_Lazy.lazyFn)(function (v) {
          var $48 = Deserialization_Error.addErrTrace(err);
          var $49 = $foreign["_convertMetadatum"]({
              error: Deserialization_Error.fromCslRepError,
              from_bytes: (function () {
                  var $51 = Control_Applicative.pure(Data_Either.applicativeEither);
                  return function ($52) {
                      return $51(Types_TransactionMetadata.Bytes.create($52));
                  };
              })(),
              from_int: (function () {
                  var $53 = Data_Functor.map(Data_Either.functorEither)(Types_TransactionMetadata.Int.create);
                  var $54 = stringToInt("Metadatum Int");
                  return function ($55) {
                      return $53($54($55));
                  };
              })(),
              from_text: (function () {
                  var $56 = Control_Applicative.pure(Data_Either.applicativeEither);
                  return function ($57) {
                      return $56(Types_TransactionMetadata.Text.create($57));
                  };
              })(),
              from_map: convertMetadataMap(convertMetadatum),
              from_list: convertMetadataList(convertMetadatum)
          });
          return function ($50) {
              return $48($49($50));
          };
      });
  };
  var convertMIRToStakeCredentials = (function () {
      var $58 = Data_Map_Internal.fromFoldable(Serialization_Address.ordStakeCredential)(Data_Foldable.foldableArray);
      var $59 = $foreign.unpackMIRToStakeCredentials_(FfiHelpers.containerHelper);
      return function ($60) {
          return Cardano_Types_Transaction.MIRToStakeCredentials($58($59($60)));
      };
  })();
  var convertLanguage = function (err) {
      return $foreign["_convertLanguage"](FfiHelpers.errorHelper((function () {
          var $61 = Data_Variant.inj()({
              reflectSymbol: function () {
                  return "fromCslRepError";
              }
          })(Deserialization_Error["_fromCslRepError"]);
          return function ($62) {
              return $61((function (e) {
                  return err + (": " + e);
              })($62));
          };
      })()))({
          plutusV1: Cardano_Types_Transaction.PlutusV1.value
      });
  };
  var convertIpv6 = (function () {
      var $63 = Control_Applicative.pure(Data_Either.applicativeEither);
      return function ($64) {
          return $63(Cardano_Types_Transaction.Ipv6($foreign.convertIpv6_($64)));
      };
  })();
  var convertIpv4 = (function () {
      var $65 = Control_Applicative.pure(Data_Either.applicativeEither);
      return function ($66) {
          return $65(Cardano_Types_Transaction.Ipv4($foreign.convertIpv4_($66)));
      };
  })();
  var convertRelay = function (relay) {
      return Deserialization_Error.addErrTrace("Relay")($foreign.convertRelay_({
          asSingleHostAddr: $foreign.convertSingleHostAddr_(FfiHelpers.maybeFfiHelper)(function (mbPort) {
              return function (mbIpv4) {
                  return function (mbIpv6) {
                      return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable["for"](Data_Either.applicativeEither)(Data_Traversable.traversableMaybe)(mbIpv4)(convertIpv4))(function (ipv4) {
                          return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable["for"](Data_Either.applicativeEither)(Data_Traversable.traversableMaybe)(mbIpv6)(convertIpv6))(function (ipv6) {
                              return Control_Applicative.pure(Data_Either.applicativeEither)(new Cardano_Types_Transaction.SingleHostAddr({
                                  port: mbPort,
                                  ipv4: ipv4,
                                  ipv6: ipv6
                              }));
                          });
                      });
                  };
              };
          }),
          asSingleHostName: $foreign.convertSingleHostName_(FfiHelpers.maybeFfiHelper)(function (port) {
              return function (mbHost) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(new Cardano_Types_Transaction.SingleHostName({
                      port: port,
                      dnsName: mbHost
                  }));
              };
          }),
          asMultiHostName: (function () {
              var $67 = Control_Applicative.pure(Data_Either.applicativeEither);
              return function ($68) {
                  return $67(Cardano_Types_Transaction.MultiHostName.create((function (v) {
                      return {
                          dnsName: v
                      };
                  })($foreign.convertMultiHostName_($68))));
              };
          })()
      })(relay));
  };
  var convertPoolRegistration = function (params) {
      return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(convertRelay)($foreign.poolParamsRelays(FfiHelpers.containerHelper)(params)))(function (relays) {
          return Control_Applicative.pure(Data_Either.applicativeEither)(new Cardano_Types_Transaction.PoolRegistration({
              operator: $foreign.poolParamsOperator(params),
              vrfKeyhash: $foreign.poolParamsVrfKeyhash(params),
              pledge: $foreign.poolParamsPledge(params),
              cost: $foreign.poolParamsCost(params),
              margin: $foreign["_unpackUnitInterval"]($foreign.poolParamsMargin(params)),
              rewardAccount: $foreign.poolParamsRewardAccount(params),
              poolOwners: $foreign.poolParamsPoolOwners(FfiHelpers.containerHelper)(params),
              relays: relays,
              poolMetadata: Data_Functor.mapFlipped(Data_Maybe.functorMaybe)($foreign.poolParamsPoolMetadata(FfiHelpers.maybeFfiHelper)(params))($foreign.convertPoolMetadata_(function (url) {
                  return function (hash) {
                      return {
                          url: url,
                          hash: hash
                      };
                  };
              }))
          }));
      });
  };
  var convertGeneralTransactionMetadata = (function () {
      var $69 = Data_Functor.map(Data_Either.functorEither)((function () {
          var $73 = Data_Newtype.wrap();
          var $74 = Data_Map_Internal.fromFoldable(Types_TransactionMetadata.ordTransactionMetadatumLa)(Data_Foldable.foldableArray);
          return function ($75) {
              return $73($74($75));
          };
      })());
      var $70 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Data_Bitraversable.bitraverse(Data_Bitraversable.bitraversableTuple)(Data_Either.applicativeEither)((function () {
          var $76 = Data_Functor.map(Data_Either.functorEither)(Types_TransactionMetadata.TransactionMetadatumLabel);
          var $77 = Deserialization_BigNum["bigNumToBigInt'"]("MetadatumLabel: ");
          return function ($78) {
              return $76($77($78));
          };
      })())(convertMetadatum("GeneralTransactionMetadata: ")));
      var $71 = $foreign["_unpackMetadatums"](FfiHelpers.containerHelper);
      return function ($72) {
          return $69($70($71($72)));
      };
  })();
  var convertExUnits = function (nm) {
      return function (cslExunits) {
          var v = $foreign["_unpackExUnits"](cslExunits);
          return Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(function (v1) {
              return function (v2) {
                  return {
                      mem: v1,
                      steps: v2
                  };
              };
          })(Deserialization_BigNum["bigNumToBigInt'"](nm + " mem")(v.mem)))(Deserialization_BigNum["bigNumToBigInt'"](nm + " steps")(v.steps));
      };
  };
  var convertExUnitPrices = function (cslEUP) {
      var v = $foreign["_unpackExUnitsPrices"](cslEUP);
      return {
          memPrice: $foreign["_unpackUnitInterval"](v.memPrice),
          stepPrice: $foreign["_unpackUnitInterval"](v.stepPrice)
      };
  };
  var convertCostModel = function (err) {
      var stringToUInt = function (s) {
          return Deserialization_Error.cslErr(err + (": string (" + (s + ") -> uint")))(Data_UInt.fromString(s));
      };
      var $79 = Data_Functor.map(Data_Either.functorEither)(Cardano_Types_Transaction.CostModel);
      var $80 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(stringToUInt);
      return function ($81) {
          return $79($80($foreign["_unpackCostModel"]($81)));
      };
  };
  var convertCostModels = function (nm) {
      return function (cslCostMdls) {
          var mdls = $foreign["_unpackCostModels"](FfiHelpers.containerHelper)(cslCostMdls);
          return Data_Functor.map(Data_Either.functorEither)((function () {
              var $82 = Data_Map_Internal.fromFoldable(Cardano_Types_Transaction.ordLanguage)(Data_Foldable.foldableArray);
              return function ($83) {
                  return Cardano_Types_Transaction.Costmdls($82($83));
              };
          })())(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Data_Bitraversable.bitraverse(Data_Bitraversable.bitraversableTuple)(Data_Either.applicativeEither)(convertLanguage(nm))(convertCostModel(nm)))(mdls));
      };
  };
  var convertProtocolParamUpdate = function (cslPpu) {
      var ppu = $foreign["_unpackProtocolParamUpdate"](FfiHelpers.maybeFfiHelper)(cslPpu);
      var lbl = Data_Semigroup.append(Data_Semigroup.semigroupString)("ProtocolParamUpdate.");
      return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)((function () {
          var $84 = Data_Functor.map(Data_Either.functorEither)(Cardano_Types_Value.Coin);
          var $85 = Deserialization_BigNum["bigNumToBigInt'"](lbl("minfeeA"));
          return function ($86) {
              return $84($85($86));
          };
      })())(ppu.minfeeA))(function (minfeeA) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)((function () {
              var $87 = Data_Functor.map(Data_Either.functorEither)(Cardano_Types_Value.Coin);
              var $88 = Deserialization_BigNum["bigNumToBigInt'"](lbl("minfeeB"));
              return function ($89) {
                  return $87($88($89));
              };
          })())(ppu.minfeeB))(function (minfeeB) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(cslNumberToUInt(lbl("maxBlockBodySize")))(ppu.maxBlockBodySize))(function (maxBlockBodySize) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(cslNumberToUInt(lbl("maxTxSize")))(ppu.maxTxSize))(function (maxTxSize) {
                      return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(cslNumberToUInt(lbl("maxBlockHeaderSize")))(ppu.maxBlockHeaderSize))(function (maxBlockHeaderSize) {
                          return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)((function () {
                              var $90 = Data_Functor.map(Data_Either.functorEither)(Cardano_Types_Value.Coin);
                              var $91 = Deserialization_BigNum["bigNumToBigInt'"](lbl("keyDeposit"));
                              return function ($92) {
                                  return $90($91($92));
                              };
                          })())(ppu.keyDeposit))(function (keyDeposit) {
                              return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)((function () {
                                  var $93 = Data_Functor.map(Data_Either.functorEither)(Cardano_Types_Value.Coin);
                                  var $94 = Deserialization_BigNum["bigNumToBigInt'"](lbl("poolDeposit"));
                                  return function ($95) {
                                      return $93($94($95));
                                  };
                              })())(ppu.poolDeposit))(function (poolDeposit) {
                                  return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)((function () {
                                      var $96 = Data_Functor.map(Data_Either.functorEither)(Cardano_Types_Transaction.Epoch);
                                      var $97 = cslNumberToUInt(lbl("maxEpoch"));
                                      return function ($98) {
                                          return $96($97($98));
                                      };
                                  })())(ppu.maxEpoch))(function (maxEpoch) {
                                      return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(cslNumberToUInt(lbl("nOpt")))(ppu.nOpt))(function (nOpt) {
                                          return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(convertProtocolVersions(lbl("protocolVersion")))(ppu.protocolVersion))(function (protocolVersion) {
                                              return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(convertCostModels(lbl("costModels")))(ppu.costModels))(function (costModels) {
                                                  return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(convertExUnits(lbl("maxTxExUnits")))(ppu.maxTxExUnits))(function (maxTxExUnits) {
                                                      return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(convertExUnits(lbl("maxBlockExUnits")))(ppu.maxBlockExUnits))(function (maxBlockExUnits) {
                                                          return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(cslNumberToUInt(lbl("maxValueSize")))(ppu.maxValueSize))(function (maxValueSize) {
                                                              return Control_Applicative.pure(Data_Either.applicativeEither)({
                                                                  minfeeA: minfeeA,
                                                                  minfeeB: minfeeB,
                                                                  maxBlockBodySize: maxBlockBodySize,
                                                                  maxTxSize: maxTxSize,
                                                                  maxBlockHeaderSize: maxBlockHeaderSize,
                                                                  keyDeposit: keyDeposit,
                                                                  poolDeposit: poolDeposit,
                                                                  maxEpoch: maxEpoch,
                                                                  nOpt: nOpt,
                                                                  poolPledgeInfluence: Data_Functor.map(Data_Maybe.functorMaybe)($foreign["_unpackUnitInterval"])(ppu.poolPledgeInfluence),
                                                                  expansionRate: Data_Functor.map(Data_Maybe.functorMaybe)($foreign["_unpackUnitInterval"])(ppu.expansionRate),
                                                                  treasuryGrowthRate: Data_Functor.map(Data_Maybe.functorMaybe)($foreign["_unpackUnitInterval"])(ppu.treasuryGrowthRate),
                                                                  d: Data_Functor.map(Data_Maybe.functorMaybe)($foreign["_unpackUnitInterval"])(ppu.d),
                                                                  extraEntropy: Data_Functor.map(Data_Maybe.functorMaybe)(convertNonce)(ppu.extraEntropy),
                                                                  protocolVersion: protocolVersion,
                                                                  minPoolCost: ppu.minPoolCost,
                                                                  adaPerUtxoByte: ppu.adaPerUtxoByte,
                                                                  costModels: costModels,
                                                                  executionCosts: Data_Functor.map(Data_Maybe.functorMaybe)(convertExUnitPrices)(ppu.executionCosts),
                                                                  maxTxExUnits: maxTxExUnits,
                                                                  maxBlockExUnits: maxBlockExUnits,
                                                                  maxValueSize: maxValueSize
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      });
  };
  var convertUpdate = function (u) {
      var v = $foreign["_unpackUpdate"](FfiHelpers.containerHelper)(u);
      return Control_Bind.bind(Data_Either.bindEither)(Data_Functor.map(Data_Either.functorEither)(Cardano_Types_Transaction.Epoch)(cslNumberToUInt("convertUpdate: epoch")(v.epoch)))(function (epoch) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Data_Bitraversable.bitraverse(Data_Bitraversable.bitraversableTuple)(Data_Either.applicativeEither)((function () {
              var $99 = Control_Applicative.pure(Data_Either.applicativeEither);
              var $100 = Untagged_Union.asOneOf();
              return function ($101) {
                  return $99(Cardano_Types_Transaction.GenesisHash(Serialization.toBytes($100($101))));
              };
          })())(convertProtocolParamUpdate))(v.paramUpdates))(function (ppus) {
              return Control_Applicative.pure(Data_Either.applicativeEither)({
                  epoch: epoch,
                  proposedProtocolParameterUpdates: Data_Map_Internal.fromFoldable(Cardano_Types_Transaction.ordGenesisHash)(Data_Foldable.foldableArray)(ppus)
              });
          });
      });
  };
  var convertCertificate = (function () {
      var certConvHelper = {
          stakeDeregistration: (function () {
              var $102 = Control_Applicative.pure(Data_Either.applicativeEither);
              return function ($103) {
                  return $102(Cardano_Types_Transaction.StakeDeregistration.create($103));
              };
          })(),
          stakeRegistration: (function () {
              var $104 = Control_Applicative.pure(Data_Either.applicativeEither);
              return function ($105) {
                  return $104(Cardano_Types_Transaction.StakeRegistration.create($105));
              };
          })(),
          stakeDelegation: function (sc) {
              var $106 = Control_Applicative.pure(Data_Either.applicativeEither);
              var $107 = Cardano_Types_Transaction.StakeDelegation.create(sc);
              return function ($108) {
                  return $106($107($108));
              };
          },
          poolRegistration: convertPoolRegistration,
          poolRetirement: convertPoolRetirement,
          genesisKeyDelegation: function (genesisHash) {
              return function (genesisDelegateHash) {
                  return function (vrfKeyhash) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)(new Cardano_Types_Transaction.GenesisKeyDelegation({
                          genesisHash: Serialization.toBytes(Untagged_Union.asOneOf()(genesisHash)),
                          genesisDelegateHash: Serialization.toBytes(Untagged_Union.asOneOf()(genesisDelegateHash)),
                          vrfKeyhash: vrfKeyhash
                      }));
                  };
              };
          },
          moveInstantaneousRewardsToOtherPotCert: function (pot) {
              return function (amount) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(new Cardano_Types_Transaction.MoveInstantaneousRewardsCert(new Cardano_Types_Transaction.ToOtherPot({
                      pot: pot,
                      amount: amount
                  })));
              };
          },
          moveInstantaneousRewardsToStakeCreds: function (pot) {
              return function (amounts) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(new Cardano_Types_Transaction.MoveInstantaneousRewardsCert(new Cardano_Types_Transaction.ToStakeCreds({
                      pot: pot,
                      amounts: convertMIRToStakeCredentials(amounts)
                  })));
              };
          }
      };
      return $foreign["_convertCert"](certConvHelper);
  })();
  var convertTxBody = function (txBody) {
      var intToSlot = function (x) {
          return Deserialization_Error.cslErr("validityStartInterval UInt.fromInt': " + Data_Show.show(Data_Show.showInt)(x))(Data_Functor.map(Data_Maybe.functorMaybe)(Serialization_Address.Slot)(Data_UInt["fromInt'"](x)));
      };
      return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)((function () {
          var $109 = Deserialization_Error.cslErr("TransactionInput");
          return function ($110) {
              return $109(Deserialization_UnspentOutput.convertInput($110));
          };
      })())($foreign["_txBodyInputs"](FfiHelpers.containerHelper)(txBody)))(function (inputs) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)((function () {
              var $111 = Deserialization_Error.cslErr("TransactionOutput");
              return function ($112) {
                  return $111(Deserialization_UnspentOutput.convertOutput($112));
              };
          })())($foreign["_txBodyOutputs"](FfiHelpers.containerHelper)(txBody)))(function (outputs) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Functor.map(Data_Either.functorEither)(Cardano_Types_Value.Coin)(Deserialization_BigNum["bigNumToBigInt'"]("Tx fee")($foreign["_txBodyFee"](txBody))))(function (fee) {
                  var ws = Data_Functor.map(Data_Maybe.functorMaybe)($foreign["_unpackWithdrawals"](FfiHelpers.containerHelper))($foreign["_txBodyWithdrawals"](FfiHelpers.maybeFfiHelper)(txBody));
                  var networkId = $foreign["_txBodyNetworkId"](Serialization_Address.TestnetId.value)(Serialization_Address.MainnetId.value)(FfiHelpers.maybeFfiHelper)(txBody);
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Functor.map(Data_Either.functorEither)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map_Internal.fromFoldable(Serialization_Address.ordRewardAddress)(Data_Foldable.foldableArray)))(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(Data_Either.applicativeEither)((function () {
                      var $113 = Data_Functor.map(Data_Either.functorEither)(Cardano_Types_Value.Coin);
                      var $114 = Deserialization_BigNum["bigNumToBigInt'"]("txbody withdrawals");
                      return function ($115) {
                          return $113($114($115));
                      };
                  })())))(ws)))(function (v) {
                      return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(convertUpdate)($foreign["_txBodyUpdate"](FfiHelpers.maybeFfiHelper)(txBody)))(function (update) {
                          return Control_Bind.bind(Data_Either.bindEither)(Deserialization_Error.addErrTrace("Tx body certificates")(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(convertCertificate))($foreign["_txBodyCerts"](FfiHelpers.containerHelper)(FfiHelpers.maybeFfiHelper)(txBody))))(function (certs) {
                              return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(intToSlot)($foreign["_txBodyValidityStartInterval"](FfiHelpers.maybeFfiHelper)(txBody)))(function (validityStartInterval) {
                                  return Control_Applicative.pure(Data_Either.applicativeEither)({
                                      inputs: inputs,
                                      outputs: outputs,
                                      fee: fee,
                                      ttl: Control_Bind.bindFlipped(Data_Maybe.bindMaybe)((function () {
                                          var $116 = Data_Functor.map(Data_Maybe.functorMaybe)(Serialization_Address.Slot);
                                          return function ($117) {
                                              return $116(Data_UInt["fromNumber'"]($117));
                                          };
                                      })())($foreign["_txBodyTtl"](FfiHelpers.maybeFfiHelper)(txBody)),
                                      certs: certs,
                                      withdrawals: v,
                                      update: update,
                                      auxiliaryDataHash: Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                                          var $118 = Untagged_Union.asOneOf();
                                          return function ($119) {
                                              return Cardano_Types_Transaction.AuxiliaryDataHash(Serialization.toBytes($118($119)));
                                          };
                                      })())($foreign["_txBodyAuxiliaryDataHash"](FfiHelpers.maybeFfiHelper)(txBody)),
                                      validityStartInterval: validityStartInterval,
                                      mint: Data_Functor.map(Data_Maybe.functorMaybe)(convertMint)($foreign["_txBodyMultiAssets"](FfiHelpers.maybeFfiHelper)(txBody)),
                                      scriptDataHash: Data_Functor.map(Data_Maybe.functorMaybe)(convertScriptDataHash)($foreign["_txBodyScriptDataHash"](FfiHelpers.maybeFfiHelper)(txBody)),
                                      collateral: Control_Bind.bind(Data_Maybe.bindMaybe)($foreign["_txBodyCollateral"](FfiHelpers.containerHelper)(FfiHelpers.maybeFfiHelper)(txBody))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Deserialization_UnspentOutput.convertInput)),
                                      requiredSigners: Data_Functor.map(Data_Maybe.functorMaybe)(Data_Functor.map(Data_Functor.functorArray)(Cardano_Types_Transaction.RequiredSigner))($foreign["_txBodyRequiredSigners"](FfiHelpers.containerHelper)(FfiHelpers.maybeFfiHelper)(txBody)),
                                      networkId: networkId
                                  });
                              });
                          });
                      });
                  });
              });
          });
      });
  };
  var convertAuxiliaryData = function (ad) {
      return Deserialization_Error.addErrTrace("convertAuxiliaryData")(Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(convertGeneralTransactionMetadata)($foreign["_adGeneralMetadata"](FfiHelpers.maybeFfiHelper)(ad)))(function (metadata) {
          return Control_Applicative.pure(Data_Either.applicativeEither)({
              metadata: metadata,
              nativeScripts: Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Deserialization_WitnessSet.convertNativeScripts)($foreign["_adNativeScripts"](FfiHelpers.maybeFfiHelper)(ad)),
              plutusScripts: Data_Functor.map(Data_Maybe.functorMaybe)(Deserialization_WitnessSet.convertPlutusScripts)($foreign["_adPlutusScripts"](FfiHelpers.maybeFfiHelper)(ad))
          });
      }));
  };
  var convertTransaction = function (tx) {
      return Deserialization_Error.addErrTrace("convertTransaction")(Control_Bind.bind(Data_Either.bindEither)(Deserialization_Error.cslErr("convertWitnessSet")(Deserialization_WitnessSet.convertWitnessSet($foreign["_txWitnessSet"](tx))))(function (witnessSet) {
          return Control_Bind.bind(Data_Either.bindEither)(convertTxBody($foreign["_txBody"](tx)))(function (body) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(convertAuxiliaryData)($foreign["_txAuxiliaryData"](FfiHelpers.maybeFfiHelper)(tx)))(function (auxiliaryData) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)({
                      body: body,
                      witnessSet: witnessSet,
                      isValid: $foreign["_txIsValid"](tx),
                      auxiliaryData: auxiliaryData
                  });
              });
          });
      }));
  };
  exports["convertTransaction"] = convertTransaction;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var modify_ = function (f) {
      return function (s) {
          return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
      };
  };
  exports["modify_"] = modify_;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
})(PS);
(function(exports) {
  /* global require exports WebSocket BROWSER_RUNTIME */

  const ReconnectingWebSocket = require('reconnecting-websocket');

  var OurWebSocket;
  if (typeof BROWSER_RUNTIME == 'undefined' || !BROWSER_RUNTIME) {
    OurWebSocket = require("ws");
  } else {
    OurWebSocket = WebSocket;
  }

  class NoPerMessageDeflateWebSocket extends OurWebSocket {
    constructor (url, protocols, options) {
      options = options || {};
      options.perMessageDeflate = false;
      super(url, protocols, options);
    }
  };

  // _mkWebsocket :: (String -> Effect Unit) -> String -> Effect WebSocket
  exports._mkWebSocket = logger => url => () => {
    logger("Starting websocket attempt")();
    var ws;
    if (typeof BROWSER_RUNTIME != 'undefined' && BROWSER_RUNTIME) {
      ws = new ReconnectingWebSocket.default(url);
    } else {
      ws = new ReconnectingWebSocket(url, [], {
        WebSocket: NoPerMessageDeflateWebSocket
      });
    }
    logger("new websocket")();
    return ws;
  };

  // _onWsConnect :: WebSocket -> (Unit -> Effect Unit) -> Effect Unit
  exports._onWsConnect = ws => fn => () => {
    ws.addEventListener('open', fn);
  };

  // _onWsError
  //   :: WebSocket
  //   -> (String -> Effect Unit) -- logger
  //   -> (String -> Effect Unit) -- handler
  //   -> Effect Unit
  exports._onWsError = ws => logger => fn => () => {
    ws.addEventListener('error', function func(event) {
      const str = event.toString();
      logger(`error: ${str}`)();
      fn(str)();
    });
  };

  // _onWsMessage
  //   :: WebSocket
  //   -> (String -> Effect Unit) -- logger
  //   -> (String -> Effect Unit) -- handler
  //   -> Effect Unit
  exports._onWsMessage = ws => logger => fn => () => {
    ws.addEventListener('message', function func(event) {
      const str = event.data;
      logger(`message: ${str}`)();
      fn(str)();
    });
  };

  // _wsSend :: WebSocket -> (String -> Effect Unit) -> String -> Effect Unit
  exports._wsSend = ws => logger => str => () => {
    logger(`sending: ${str}`)();
    ws.send(str);
  };                                        

  // Every 30 seconds if we haven't heard from the server, sever the connection.
  // heartbeat
  //   :: WebSocket
  //   -> (String -> Effect Unit)
  //   -> Int
  //   -> Effect Unit
  //   -> ImplicitUnsafeEffect Int
  const heartbeat = ws => logger => id => onError => {
    console.log("websocket heartbeat fired")();
    ws.ping();
    if (id !== null) {
      clearTimeout(id);
    }
    const cancelId = setTimeout(() => {
      ws.terminate();
      onError();
    }, 30000);
    return cancelId;
  };

  // _wsWatch
  //   :: WebSocket
  //   -> (String -> Effect Unit)
  //   -> Effect Unit
  //   -> Effect Unit
  exports._wsWatch = ws => logger => onError => () => {
    let counter = null;
    let heartbeatAndCount = () => {
      counter = heartbeat(ws, logger, counter, onError);
    };

    ws.addEventListener('open', heartbeatAndCount);
    ws.addEventListener('ping', heartbeatAndCount);
    ws.addEventListener('pong', heartbeatAndCount);
    ws.addEventListener('close', () => clearTimeout(counter));
  };
})(PS["JsWebSocket"] = PS["JsWebSocket"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["JsWebSocket"] = $PS["JsWebSocket"] || {};
  var exports = $PS["JsWebSocket"];
  var $foreign = $PS["JsWebSocket"];
  exports["_mkWebSocket"] = $foreign["_mkWebSocket"];
  exports["_onWsConnect"] = $foreign["_onWsConnect"];
  exports["_onWsError"] = $foreign["_onWsError"];
  exports["_onWsMessage"] = $foreign["_onWsMessage"];
  exports["_wsSend"] = $foreign["_wsSend"];
  exports["_wsWatch"] = $foreign["_wsWatch"];
})(PS);
(function(exports) {
  /* global require exports */

  const uniqid = require("uniqid");

  // _uniqueId :: String -> Effect String
  exports.uniqueId = str => () => uniqid(str);
})(PS["QueryM.UniqueId"] = PS["QueryM.UniqueId"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["QueryM.UniqueId"] = $PS["QueryM.UniqueId"] || {};
  var exports = $PS["QueryM.UniqueId"];
  var $foreign = $PS["QueryM.UniqueId"];
  exports["uniqueId"] = $foreign.uniqueId;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["QueryM.JsonWsp"] = $PS["QueryM.JsonWsp"] || {};
  var exports = $PS["QueryM.JsonWsp"];
  var Aeson = $PS["Aeson"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Either = $PS["Data.Either"];
  var Data_Traversable = $PS["Data.Traversable"];
  var QueryM_UniqueId = $PS["QueryM.UniqueId"];
  var Record = $PS["Record"];
  var parseMirror = Aeson.caseAesonString(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("expected string")))(Control_Applicative.pure(Data_Either.applicativeEither));
  var mkJsonWspRequest = function (service) {
      return function (method) {
          return function __do() {
              var id = QueryM_UniqueId.uniqueId(method.methodname + "-")();
              return Record.merge()()({
                  mirror: id
              })(Record.merge()()(service)(method));
          };
      };
  };
  var mkCallType = function (dictEncodeAeson) {
      return function (service) {
          return function (v) {
              return function (v1) {
                  return function (i) {
                      return function __do() {
                          var req = mkJsonWspRequest(service)({
                              methodname: v.methodname,
                              args: v.args(i)
                          })();
                          return {
                              body: Aeson.encodeAeson(dictEncodeAeson)(req),
                              id: req.mirror
                          };
                      };
                  };
              };
          };
      };
  };
  var buildRequest = function (v) {
      return v;
  };
  var aesonObject = Aeson.caseAesonObject(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("expected object")));
  var parseJsonWspResponse = function (dictDecodeAeson) {
      return aesonObject(function (o) {
          return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonString)(o)("type"))(function (typeField) {
              return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonString)(o)("version"))(function (version) {
                  return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonString)(o)("servicename"))(function (servicename) {
                      return Control_Bind.bind(Data_Either.bindEither)(Aeson.getFieldOptional(Aeson.decodeAesonString)(o)("methodname"))(function (methodname) {
                          return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bindFlipped(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(Aeson.decodeAeson(dictDecodeAeson)))(Aeson.getFieldOptional(Aeson.decodeAesonAeson)(o)("result")))(function (result) {
                              return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bindFlipped(Data_Either.bindEither)(Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Data_Either.applicativeEither)(Aeson.decodeAeson(Aeson.decodeAesonAeson)))(Aeson.getFieldOptional(Aeson.decodeAesonAeson)(o)("fault")))(function (fault) {
                                  return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bindFlipped(Data_Either.bindEither)(parseMirror)(Aeson.getField(Aeson.decodeAesonAeson)(o)("reflection")))(function (reflection) {
                                      return Control_Applicative.pure(Data_Either.applicativeEither)({
                                          type: typeField,
                                          version: version,
                                          servicename: servicename,
                                          methodname: methodname,
                                          result: result,
                                          fault: fault,
                                          reflection: reflection
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      });
  };
  var parseJsonWspResponseId = aesonObject(function (o) {
      return Control_Bind.bindFlipped(Data_Either.bindEither)(parseMirror)(Aeson.getField(Aeson.decodeAesonAeson)(o)("reflection"));
  });
  exports["mkCallType"] = mkCallType;
  exports["buildRequest"] = buildRequest;
  exports["parseJsonWspResponse"] = parseJsonWspResponse;
  exports["parseJsonWspResponseId"] = parseJsonWspResponseId;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Types.Datum"] = $PS["Types.Datum"] || {};
  var exports = $PS["Types.Datum"];
  var Aeson_Decode = $PS["Aeson.Decode"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Types_PlutusData = $PS["Types.PlutusData"];                  
  var Datum = function (x) {
      return x;
  };
  var genericDatum_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showDatum = {
      show: Data_Show_Generic.genericShow(genericDatum_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_PlutusData.showPlutusData))({
          reflectSymbol: function () {
              return "Datum";
          }
      }))
  };
  var decodeAesonDatum = {
      decodeAeson: Control_Lazy.defer(Control_Lazy.lazyFn)(Data_Function["const"](Aeson_Decode.decode(Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Data_Either.functorEither))(Datum)(Aeson_Decode.value(Types_PlutusData.decodeAesonPlutusData)))))
  };
  exports["decodeAesonDatum"] = decodeAesonDatum;
  exports["showDatum"] = showDatum;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["QueryM.DatumCacheWsp"] = $PS["QueryM.DatumCacheWsp"] || {};
  var exports = $PS["QueryM.DatumCacheWsp"];
  var Aeson = $PS["Aeson"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var QueryM_JsonWsp = $PS["QueryM.JsonWsp"];
  var Type_Proxy = $PS["Type.Proxy"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_Datum = $PS["Types.Datum"];
  var Types_Transaction = $PS["Types.Transaction"];
  var GetDatumsByHashesR = function (x) {
      return x;
  };
  var GetDatumByHashR = function (x) {
      return x;
  };
  var GetDatumByHash = (function () {
      function GetDatumByHash() {

      };
      GetDatumByHash.value = new GetDatumByHash();
      return GetDatumByHash;
  })();
  var GetDatumsByHashes = (function () {
      function GetDatumsByHashes() {

      };
      GetDatumsByHashes.value = new GetDatumsByHashes();
      return GetDatumsByHashes;
  })();
  var decodeAesonGetDatumsByHas = {
      decodeAeson: function (r) {
          var decodeDatum = Aeson.caseAesonObject(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("expected object")))(function (o) {
              return Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(Data_Tuple.Tuple.create)(Data_Functor.map(Data_Either.functorEither)(Data_Newtype.wrap())(Aeson.getField(Types_ByteArray.decodeAesonByteArray)(o)("hash"))))(Control_Bind.bindFlipped(Data_Either.bindEither)(Aeson.decodeAeson(Types_Datum.decodeAesonDatum))(Aeson.getField(Aeson.decodeAesonAeson)(o)("value")));
          });
          var decodeDatumArray = Aeson.caseAesonArray(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("expected array")))((function () {
              var $17 = Data_Functor.map(Data_Either.functorEither)(Data_Map_Internal.fromFoldable(Types_Transaction.ordDataHash)(Data_Foldable.foldableArray));
              var $18 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(decodeDatum);
              return function ($19) {
                  return $17($18($19));
              };
          })());
          return Control_Bind.bindFlipped(Data_Either.bindEither)((function () {
              var $20 = Data_Functor.map(Data_Either.functorEither)(GetDatumsByHashesR);
              return function ($21) {
                  return $20(decodeDatumArray($21));
              };
          })())(Aeson.getNestedAeson(r)([ "DatumsFound", "value" ]));
      }
  };
  var decodeAesonGetDatumByHash = {
      decodeAeson: function (r) {
          return Data_Functor.map(Data_Either.functorEither)(GetDatumByHashR)((function () {
              var datumNotFound = Data_Functor.voidRight(Data_Either.functorEither)(Data_Maybe.Nothing.value)(Aeson.getNestedAeson(r)([ "DatumNotFound" ]));
              var datumFound = Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(Control_Bind.bindFlipped(Data_Either.bindEither)(Aeson.decodeAeson(Types_Datum.decodeAesonDatum))(Aeson.getNestedAeson(r)([ "DatumFound", "value" ])));
              return Control_Alt.alt(Data_Either.altEither)(datumFound)(datumNotFound);
          })());
      }
  };
  var datumCacheMethodToString = function (v) {
      if (v instanceof GetDatumByHash) {
          return "GetDatumByHash";
      };
      if (v instanceof GetDatumsByHashes) {
          return "GetDatumsByHashes";
      };
      throw new Error("Failed pattern match at QueryM.DatumCacheWsp (line 119, column 28 - line 121, column 43): " + [ v.constructor.name ]);
  };
  var mkDatumCacheCallType = function (dictEncodeAeson) {
      return function (method) {
          return function (args) {
              return QueryM_JsonWsp.mkCallType(dictEncodeAeson)({
                  type: "jsonwsp/request",
                  version: "1.0",
                  servicename: "ogmios"
              })({
                  methodname: datumCacheMethodToString(method),
                  args: args
              })(Type_Proxy["Proxy"].value);
          };
      };
  };
  var getDatumByHashCall = mkDatumCacheCallType(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "hash";
      }
  })())())(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "version";
      }
  })())({
      reflectSymbol: function () {
          return "type";
      }
  })())({
      reflectSymbol: function () {
          return "servicename";
      }
  })())({
      reflectSymbol: function () {
          return "mirror";
      }
  })())({
      reflectSymbol: function () {
          return "methodname";
      }
  })())({
      reflectSymbol: function () {
          return "args";
      }
  })())())(GetDatumByHash.value)((function () {
      var $22 = Data_Newtype.unwrap();
      return function ($23) {
          return (function (v) {
              return {
                  hash: v
              };
          })(Types_ByteArray.byteArrayToHex($22($23)));
      };
  })());
  exports["getDatumByHashCall"] = getDatumByHashCall;
  exports["decodeAesonGetDatumByHash"] = decodeAesonGetDatumByHash;
  exports["decodeAesonGetDatumsByHas"] = decodeAesonGetDatumsByHas;
})(PS);
(function(exports) {
  "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $54 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($54) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = {
      succ: defaultSucc(charToEnum)($foreign.toCharCode),
      pred: defaultPred(charToEnum)($foreign.toCharCode),
      Ord0: function () {
          return Data_Ord.ordChar;
      }
  };
  var boundedEnumChar = {
      cardinality: $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0,
      toEnum: charToEnum,
      fromEnum: $foreign.toCharCode,
      Bounded0: function () {
          return Data_Bounded.boundedChar;
      },
      Enum1: function () {
          return enumChar;
      }
  };
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS);
(function(exports) {
  "use strict";

  exports.singleton = function (c) {
    return c;
  };

  exports.length = function (s) {
    return s.length;
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };

  exports.splitAt = function (i) {
    return function (s) {
      return { before: s.substring(0, i), after: s.substring(i) };
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  var Data_Maybe = $PS["Data.Maybe"];                                                                  
  var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["indexOf"] = indexOf;
  exports["singleton"] = $foreign.singleton;
  exports["length"] = $foreign.length;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
  exports["splitAt"] = $foreign.splitAt;
})(PS);
(function(exports) {
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
  var exports = $PS["Data.String.Unsafe"];
  var $foreign = $PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.String.CodePoints"] = $PS["Data.String.CodePoints"] || {};
  var exports = $PS["Data.String.CodePoints"];
  var $foreign = $PS["Data.String.CodePoints"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  };
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var indexOf = function (p) {
      return function (s) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
              return length(Data_String_CodeUnits.take(i)(s));
          })(Data_String_CodeUnits.indexOf(p)(s));
      };
  };
  var fromCharCode = (function () {
      var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
      return function ($54) {
          return Data_String_CodeUnits.singleton($53($54));
      };
  })();
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };                                                                          
  var singleton = $foreign["_singleton"](singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign["_take"](takeFallback);
  var splitAt = function (i) {
      return function (s) {
          var before = take(i)(s);
          return {
              before: before,
              after: Data_String_CodeUnits.drop(Data_String_CodeUnits.length(before))(s)
          };
      };
  };
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  exports["uncons"] = uncons;
  exports["indexOf"] = indexOf;
  exports["splitAt"] = splitAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Ratio"] = $PS["Data.Ratio"] || {};
  var exports = $PS["Data.Ratio"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semiring = $PS["Data.Semiring"];        
  var Ratio = (function () {
      function Ratio(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Ratio.create = function (value0) {
          return function (value1) {
              return new Ratio(value0, value1);
          };
      };
      return Ratio;
  })();
  var reduce = function (dictOrd) {
      return function (dictEuclideanRing) {
          return function (n) {
              return function (d) {
                  var g = Data_EuclideanRing.gcd(dictOrd.Eq0())(dictEuclideanRing)(n)(d);
                  var d$prime = Data_EuclideanRing.div(dictEuclideanRing)(d)(g);
                  return new Ratio(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(Data_EuclideanRing.div(dictEuclideanRing)(n)(g))(Data_Ord.signum(dictOrd)((dictEuclideanRing.CommutativeRing0()).Ring0())(d$prime)), Data_Ord.abs(dictOrd)((dictEuclideanRing.CommutativeRing0()).Ring0())(d$prime));
              };
          };
      };
  };
  var numerator = function (v) {
      return v.value0;
  };
  var denominator = function (v) {
      return v.value1;
  };
  exports["reduce"] = reduce;
  exports["numerator"] = numerator;
  exports["denominator"] = denominator;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Types.Rational"] = $PS["Types.Rational"] || {};
  var exports = $PS["Types.Rational"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ratio = $PS["Data.Ratio"];
  var Data_Semiring = $PS["Data.Semiring"];                                                       
  var rationalComponentBigInt = {
      reduce: function (n) {
          return function (d) {
              if (Data_Eq.eq(Data_BigInt.eqBigInt)(d)(Data_Semiring.zero(Data_BigInt.semiringBigInt))) {
                  return Data_Maybe.Nothing.value;
              };
              if (Data_Boolean.otherwise) {
                  return new Data_Maybe.Just(Data_Ratio.reduce(Data_BigInt.ordBigInt)(Data_BigInt.euclideanRingBigInt)(n)(d));
              };
              throw new Error("Failed pattern match at Types.Rational (line 126, column 1 - line 129, column 48): " + [ n.constructor.name, d.constructor.name ]);
          };
      }
  };                                                                                                                    
  var reduce = function (dict) {
      return dict.reduce;
  };
  var numerator = function (v) {
      return Data_Ratio.numerator(v);
  };
  var denominator = function (v) {
      return Data_Ratio.denominator(v);
  };
  exports["reduce"] = reduce;
  exports["numerator"] = numerator;
  exports["denominator"] = denominator;
  exports["rationalComponentBigInt"] = rationalComponentBigInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["QueryM.Ogmios"] = $PS["QueryM.Ogmios"] || {};
  var exports = $PS["QueryM.Ogmios"];
  var Aeson = $PS["Aeson"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Cardano_Types_Value = $PS["Cardano.Types.Value"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_UInt = $PS["Data.UInt"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Helpers = $PS["Helpers"];
  var QueryM_JsonWsp = $PS["QueryM.JsonWsp"];
  var Serialization_BigNum = $PS["Serialization.BigNum"];
  var Type_Proxy = $PS["Type.Proxy"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_CborBytes = $PS["Types.CborBytes"];
  var Types_Rational = $PS["Types.Rational"];
  var Types_TokenName = $PS["Types.TokenName"];
  var Untagged_TypeCheck = $PS["Untagged.TypeCheck"];
  var Untagged_Union = $PS["Untagged.Union"];
  var PParamRational = function (x) {
      return x;
  };
  var UtxoQR = function (x) {
      return x;
  };
  var Assets = function (x) {
      return x;
  };
  var CtChainOrigin = (function () {
      function CtChainOrigin(value0) {
          this.value0 = value0;
      };
      CtChainOrigin.create = function (value0) {
          return new CtChainOrigin(value0);
      };
      return CtChainOrigin;
  })();
  var CtChainPoint = (function () {
      function CtChainPoint(value0) {
          this.value0 = value0;
      };
      CtChainPoint.create = function (value0) {
          return new CtChainPoint(value0);
      };
      return CtChainPoint;
  })();
  var showAbsSlot = {
      show: function (v) {
          return Helpers.showWithParens(Data_BigInt.showBigInt)("AbsSlot")(v);
      }
  };
  var hasRuntimeTypeChainOrigin = Untagged_TypeCheck.hasRuntimeTypeString;    
  var decodeAesonTxEvaluationR = {
      decodeAeson: function (v) {
          return new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("DecodeAeson TxEvaluationR is not implemented"));
      }
  };
  var decodeAesonSystemStart = Aeson.decodeAesonString;
  var decodeAesonSlotLength = Aeson.decodeAesonBigInt;
  var decodeAesonSafeZone = Aeson.decodeAesonBigInt;
  var decodeAesonRelativeTime = Aeson.decodeAesonBigInt;
  var decodeAesonPParamRational = {
      decodeAeson: (function () {
          var err = new Data_Argonaut_Decode_Error.TypeMismatch("PParamRaional");
          return Aeson.caseAesonString(new Data_Either.Left(err))(function (string) {
              var v = Data_String_Common.split("/")(string);
              if (v.length === 2) {
                  return Data_Either.note(err)(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_BigInt.fromString(v[0]))(function (numerator) {
                      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_BigInt.fromString(v[1]))(function (denominator) {
                          return Data_Functor.map(Data_Maybe.functorMaybe)(PParamRational)(Types_Rational.reduce(Types_Rational.rationalComponentBigInt)(numerator)(denominator));
                      });
                  }));
              };
              return new Data_Either.Left(err);
          });
      })()
  };
  var decodeAesonOgmiosBlockHea = Aeson.decodeAesonString;
  var decodeAesonEpochLength = Aeson.decodeAesonBigInt;
  var decodeAesonEpoch = Aeson.decodeAesonBigInt;
  var decodeAesonCurrentEpoch = Aeson.decodeAesonBigInt;
  var decodeAesonChainOrigin = Aeson.decodeAesonString;
  var decodeAesonAssets = {
      decodeAeson: function (j) {
          var assetStrError = function (str) {
              return function (t) {
                  return function (v) {
                      return new Data_Argonaut_Decode_Error.TypeMismatch("In " + (str + (": Expected hex-encoded " + (t + (", got: " + v)))));
                  };
              };
          };
          var decodeAsset = function (assetStr) {
              return function (quantity) {
                  var v = (function () {
                      var v1 = Data_String_CodePoints.indexOf(".")(assetStr);
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return new Data_Tuple.Tuple(assetStr, "");
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          var v2 = Data_String_CodePoints.splitAt(v1.value0)(assetStr);
                          var tn = Data_Maybe.fromMaybe("")(Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(Data_String_CodePoints.uncons(v2.after))(function (v3) {
                              return v3.tail;
                          }));
                          return new Data_Tuple.Tuple(v2.before, tn);
                      };
                      throw new Error("Failed pattern match at QueryM.Ogmios (line 1110, column 31 - line 1117, column 27): " + [ v1.constructor.name ]);
                  })();
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(assetStrError(assetStr)("CurrencySymbol")(v.value0))(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Cardano_Types_Value.mkCurrencySymbol)(Types_ByteArray.hexToByteArray(v.value0))))(function (currSymb) {
                      return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(assetStrError(assetStr)("TokenName")(v.value1))(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Types_TokenName.mkTokenName)(Types_ByteArray.hexToByteArray(v.value1))))(function (tokenName) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(new Data_Tuple.Tuple(currSymb, Data_Map_Internal.singleton(tokenName)(quantity)));
                      });
                  });
              };
          };
          return Control_Bind.bind(Data_Either.bindEither)(Data_Functor.map(Data_Either.functorEither)(Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray))(Aeson.decodeAeson(Aeson.decodeAesonObject(Aeson.decodeAesonBigInt))(j)))(function (v) {
              return Data_Functor.map(Data_Either.functorEither)((function () {
                  var $265 = Data_Map_Internal.fromFoldableWith(Cardano_Types_Value.ordCurrencySymbol)(Data_Foldable.foldableArray)(Data_Map_Internal.unionWith(Types_TokenName.ordTokenName)(Data_Semiring.add(Data_BigInt.semiringBigInt)));
                  return function ($266) {
                      return Assets($265($266));
                  };
              })())(Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.uncurry(decodeAsset))(v)));
          });
      }
  };
  var decodeAesonAbsSlot = Aeson.decodeAesonBigInt;
  var decodeAesonChainTipQR = {
      decodeAeson: function (j) {
          return Control_Bind.bind(Data_Either.bindEither)(Aeson.decodeAeson(Aeson["decodeAeson|+|"]()(decodeAesonChainOrigin)(Aeson.decodeAesonRecord(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(decodeAesonOgmiosBlockHea))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(decodeAesonAbsSlot))(Aeson.gDecodeAesonRowNil)({
              reflectSymbol: function () {
                  return "slot";
              }
          })()())({
              reflectSymbol: function () {
                  return "hash";
              }
          })()())()))(j))(function (v) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Either.either(CtChainOrigin.create)(CtChainPoint.create)(Untagged_Union.toEither1(hasRuntimeTypeChainOrigin)(v)));
          });
      }
  };
  var rationalToSubcoin = function (v) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Serialization_BigNum.bigNumFromBigInt(Types_Rational.numerator(v)))(function (numerator) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Serialization_BigNum.bigNumFromBigInt(Types_Rational.denominator(v)))(function (denominator) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                  numerator: numerator,
                  denominator: denominator
              });
          });
      });
  };
  var parseValue = function (outer) {
      return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonObject(Aeson.decodeAesonAeson))(outer)("value"))(function (o) {
          return Control_Bind.bind(Data_Either.bindEither)(Control_Alt.alt(Data_Either.altEither)(Aeson.getField(Aeson.decodeAesonBigInt)(o)("coins"))(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Expected 'coins' to be an Int or a BigInt"))))(function (coins) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Functor.map(Data_Either.functorEither)(Data_Maybe.fromMaybe(Data_Map_Internal.empty))(Aeson.getFieldOptional(decodeAesonAssets)(o)("assets")))(function (v) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(Cardano_Types_Value.mkValue(Data_Newtype.wrap()(coins))(Data_Newtype.wrap()(v)));
              });
          });
      });
  };
  var mkOgmiosCallType = function (dictEncodeAeson) {
      return QueryM_JsonWsp.mkCallType(dictEncodeAeson)({
          type: "jsonwsp/request",
          version: "1.0",
          servicename: "ogmios"
      });
  };                            
  var queryEraSummariesCall = mkOgmiosCallType(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "query";
      }
  })())())(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "version";
      }
  })())({
      reflectSymbol: function () {
          return "type";
      }
  })())({
      reflectSymbol: function () {
          return "servicename";
      }
  })())({
      reflectSymbol: function () {
          return "mirror";
      }
  })())({
      reflectSymbol: function () {
          return "methodname";
      }
  })())({
      reflectSymbol: function () {
          return "args";
      }
  })())())({
      methodname: "Query",
      args: Data_Function["const"]({
          query: "eraSummaries"
      })
  })(Type_Proxy["Proxy"].value);
  var queryProtocolParametersCall = mkOgmiosCallType(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "query";
      }
  })())())(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "version";
      }
  })())({
      reflectSymbol: function () {
          return "type";
      }
  })())({
      reflectSymbol: function () {
          return "servicename";
      }
  })())({
      reflectSymbol: function () {
          return "mirror";
      }
  })())({
      reflectSymbol: function () {
          return "methodname";
      }
  })())({
      reflectSymbol: function () {
          return "args";
      }
  })())())({
      methodname: "Query",
      args: Data_Function["const"]({
          query: "currentProtocolParameters"
      })
  })(Type_Proxy["Proxy"].value);
  var querySystemStartCall = mkOgmiosCallType(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "query";
      }
  })())())(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "version";
      }
  })())({
      reflectSymbol: function () {
          return "type";
      }
  })())({
      reflectSymbol: function () {
          return "servicename";
      }
  })())({
      reflectSymbol: function () {
          return "mirror";
      }
  })())({
      reflectSymbol: function () {
          return "methodname";
      }
  })())({
      reflectSymbol: function () {
          return "args";
      }
  })())())({
      methodname: "Query",
      args: Data_Function["const"]({
          query: "systemStart"
      })
  })(Type_Proxy["Proxy"].value);
  var queryUtxosAtCall = mkOgmiosCallType(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonArray(Aeson.encodeAesonString))(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "utxo";
      }
  })())())(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "query";
      }
  })())())(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "version";
      }
  })())({
      reflectSymbol: function () {
          return "type";
      }
  })())({
      reflectSymbol: function () {
          return "servicename";
      }
  })())({
      reflectSymbol: function () {
          return "mirror";
      }
  })())({
      reflectSymbol: function () {
          return "methodname";
      }
  })())({
      reflectSymbol: function () {
          return "args";
      }
  })())())({
      methodname: "Query",
      args: function ($267) {
          return (function (v) {
              return {
                  query: v
              };
          })((function (v) {
              return {
                  utxo: v
              };
          })(Data_Array.singleton($267)));
      }
  })(Type_Proxy["Proxy"].value);
  var submitTxCall = mkOgmiosCallType(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "submit";
      }
  })())())(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
      reflectSymbol: function () {
          return "version";
      }
  })())({
      reflectSymbol: function () {
          return "type";
      }
  })())({
      reflectSymbol: function () {
          return "servicename";
      }
  })())({
      reflectSymbol: function () {
          return "mirror";
      }
  })())({
      reflectSymbol: function () {
          return "methodname";
      }
  })())({
      reflectSymbol: function () {
          return "args";
      }
  })())())({
      methodname: "SubmitTx",
      args: function ($268) {
          return (function (v) {
              return {
                  submit: v
              };
          })(Types_CborBytes.cborBytesToHex($268));
      }
  })(Type_Proxy["Proxy"].value);
  var convertCostModel = function (model) {
      return Data_Newtype.wrap()([ model["addInteger-cpu-arguments-intercept"], model["addInteger-cpu-arguments-slope"], model["addInteger-memory-arguments-intercept"], model["addInteger-memory-arguments-slope"], model["appendByteString-cpu-arguments-intercept"], model["appendByteString-cpu-arguments-slope"], model["appendByteString-memory-arguments-intercept"], model["appendByteString-memory-arguments-slope"], model["appendString-cpu-arguments-intercept"], model["appendString-cpu-arguments-slope"], model["appendString-memory-arguments-intercept"], model["appendString-memory-arguments-slope"], model["bData-cpu-arguments"], model["bData-memory-arguments"], model["blake2b-cpu-arguments-intercept"], model["blake2b-cpu-arguments-slope"], model["blake2b-memory-arguments"], model["cekApplyCost-exBudgetCPU"], model["cekApplyCost-exBudgetMemory"], model["cekBuiltinCost-exBudgetCPU"], model["cekBuiltinCost-exBudgetMemory"], model["cekConstCost-exBudgetCPU"], model["cekConstCost-exBudgetMemory"], model["cekDelayCost-exBudgetCPU"], model["cekDelayCost-exBudgetMemory"], model["cekForceCost-exBudgetCPU"], model["cekForceCost-exBudgetMemory"], model["cekLamCost-exBudgetCPU"], model["cekLamCost-exBudgetMemory"], model["cekStartupCost-exBudgetCPU"], model["cekStartupCost-exBudgetMemory"], model["cekVarCost-exBudgetCPU"], model["cekVarCost-exBudgetMemory"], model["chooseData-cpu-arguments"], model["chooseData-memory-arguments"], model["chooseList-cpu-arguments"], model["chooseList-memory-arguments"], model["chooseUnit-cpu-arguments"], model["chooseUnit-memory-arguments"], model["consByteString-cpu-arguments-intercept"], model["consByteString-cpu-arguments-slope"], model["consByteString-memory-arguments-intercept"], model["consByteString-memory-arguments-slope"], model["constrData-cpu-arguments"], model["constrData-memory-arguments"], model["decodeUtf8-cpu-arguments-intercept"], model["decodeUtf8-cpu-arguments-slope"], model["decodeUtf8-memory-arguments-intercept"], model["decodeUtf8-memory-arguments-slope"], model["divideInteger-cpu-arguments-constant"], model["divideInteger-cpu-arguments-model-arguments-intercept"], model["divideInteger-cpu-arguments-model-arguments-slope"], model["divideInteger-memory-arguments-intercept"], model["divideInteger-memory-arguments-minimum"], model["divideInteger-memory-arguments-slope"], model["encodeUtf8-cpu-arguments-intercept"], model["encodeUtf8-cpu-arguments-slope"], model["encodeUtf8-memory-arguments-intercept"], model["encodeUtf8-memory-arguments-slope"], model["equalsByteString-cpu-arguments-constant"], model["equalsByteString-cpu-arguments-intercept"], model["equalsByteString-cpu-arguments-slope"], model["equalsByteString-memory-arguments"], model["equalsData-cpu-arguments-intercept"], model["equalsData-cpu-arguments-slope"], model["equalsData-memory-arguments"], model["equalsInteger-cpu-arguments-intercept"], model["equalsInteger-cpu-arguments-slope"], model["equalsInteger-memory-arguments"], model["equalsString-cpu-arguments-constant"], model["equalsString-cpu-arguments-intercept"], model["equalsString-cpu-arguments-slope"], model["equalsString-memory-arguments"], model["fstPair-cpu-arguments"], model["fstPair-memory-arguments"], model["headList-cpu-arguments"], model["headList-memory-arguments"], model["iData-cpu-arguments"], model["iData-memory-arguments"], model["ifThenElse-cpu-arguments"], model["ifThenElse-memory-arguments"], model["indexByteString-cpu-arguments"], model["indexByteString-memory-arguments"], model["lengthOfByteString-cpu-arguments"], model["lengthOfByteString-memory-arguments"], model["lessThanByteString-cpu-arguments-intercept"], model["lessThanByteString-cpu-arguments-slope"], model["lessThanByteString-memory-arguments"], model["lessThanEqualsByteString-cpu-arguments-intercept"], model["lessThanEqualsByteString-cpu-arguments-slope"], model["lessThanEqualsByteString-memory-arguments"], model["lessThanEqualsInteger-cpu-arguments-intercept"], model["lessThanEqualsInteger-cpu-arguments-slope"], model["lessThanEqualsInteger-memory-arguments"], model["lessThanInteger-cpu-arguments-intercept"], model["lessThanInteger-cpu-arguments-slope"], model["lessThanInteger-memory-arguments"], model["listData-cpu-arguments"], model["listData-memory-arguments"], model["mapData-cpu-arguments"], model["mapData-memory-arguments"], model["mkCons-cpu-arguments"], model["mkCons-memory-arguments"], model["mkNilData-cpu-arguments"], model["mkNilData-memory-arguments"], model["mkNilPairData-cpu-arguments"], model["mkNilPairData-memory-arguments"], model["mkPairData-cpu-arguments"], model["mkPairData-memory-arguments"], model["modInteger-cpu-arguments-constant"], model["modInteger-cpu-arguments-model-arguments-intercept"], model["modInteger-cpu-arguments-model-arguments-slope"], model["modInteger-memory-arguments-intercept"], model["modInteger-memory-arguments-minimum"], model["modInteger-memory-arguments-slope"], model["multiplyInteger-cpu-arguments-intercept"], model["multiplyInteger-cpu-arguments-slope"], model["multiplyInteger-memory-arguments-intercept"], model["multiplyInteger-memory-arguments-slope"], model["nullList-cpu-arguments"], model["nullList-memory-arguments"], model["quotientInteger-cpu-arguments-constant"], model["quotientInteger-cpu-arguments-model-arguments-intercept"], model["quotientInteger-cpu-arguments-model-arguments-slope"], model["quotientInteger-memory-arguments-intercept"], model["quotientInteger-memory-arguments-minimum"], model["quotientInteger-memory-arguments-slope"], model["remainderInteger-cpu-arguments-constant"], model["remainderInteger-cpu-arguments-model-arguments-intercept"], model["remainderInteger-cpu-arguments-model-arguments-slope"], model["remainderInteger-memory-arguments-intercept"], model["remainderInteger-memory-arguments-minimum"], model["remainderInteger-memory-arguments-slope"], model["sha2_256-cpu-arguments-intercept"], model["sha2_256-cpu-arguments-slope"], model["sha2_256-memory-arguments"], model["sha3_256-cpu-arguments-intercept"], model["sha3_256-cpu-arguments-slope"], model["sha3_256-memory-arguments"], model["sliceByteString-cpu-arguments-intercept"], model["sliceByteString-cpu-arguments-slope"], model["sliceByteString-memory-arguments-intercept"], model["sliceByteString-memory-arguments-slope"], model["sndPair-cpu-arguments"], model["sndPair-memory-arguments"], model["subtractInteger-cpu-arguments-intercept"], model["subtractInteger-cpu-arguments-slope"], model["subtractInteger-memory-arguments-intercept"], model["subtractInteger-memory-arguments-slope"], model["tailList-cpu-arguments"], model["tailList-memory-arguments"], model["trace-cpu-arguments"], model["trace-memory-arguments"], model["unBData-cpu-arguments"], model["unBData-memory-arguments"], model["unConstrData-cpu-arguments"], model["unConstrData-memory-arguments"], model["unIData-cpu-arguments"], model["unIData-memory-arguments"], model["unListData-cpu-arguments"], model["unListData-memory-arguments"], model["unMapData-cpu-arguments"], model["unMapData-memory-arguments"], model["verifySignature-cpu-arguments-intercept"], model["verifySignature-cpu-arguments-slope"], model["verifySignature-memory-arguments"] ]);
  };
  var decodeAesonProtocolParame = {
      decodeAeson: function (aeson) {
          var decodePrices = function (ps) {
              return Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("ExUnitPrices"))(Control_Bind.bind(Data_Maybe.bindMaybe)(rationalToSubcoin(ps.prices.memory))(function (memPrice) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(rationalToSubcoin(ps.prices.steps))(function (stepPrice) {
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Data_Maybe.Just({
                          memPrice: memPrice,
                          stepPrice: stepPrice
                      }));
                  });
              }));
          };
          var decodeExUnits = function (v) {
              return {
                  mem: v.memory,
                  steps: v.steps
              };
          };
          return Control_Bind.bind(Data_Either.bindEither)(Aeson.decodeAeson(Aeson.decodeAesonRecord(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonBigInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonFieldMaybe(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonRecord(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonRecord(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonRowNil)({
              reflectSymbol: function () {
                  return "verifySignature-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "verifySignature-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "verifySignature-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "unMapData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "unMapData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "unListData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "unListData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "unIData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "unIData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "unConstrData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "unConstrData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "unBData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "unBData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "trace-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "trace-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "tailList-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "tailList-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "subtractInteger-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "subtractInteger-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "subtractInteger-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "subtractInteger-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "sndPair-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "sndPair-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "sliceByteString-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "sliceByteString-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "sliceByteString-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "sliceByteString-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "sha3_256-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "sha3_256-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "sha3_256-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "sha2_256-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "sha2_256-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "sha2_256-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "remainderInteger-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "remainderInteger-memory-arguments-minimum";
              }
          })()())({
              reflectSymbol: function () {
                  return "remainderInteger-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "remainderInteger-cpu-arguments-model-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "remainderInteger-cpu-arguments-model-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "remainderInteger-cpu-arguments-constant";
              }
          })()())({
              reflectSymbol: function () {
                  return "quotientInteger-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "quotientInteger-memory-arguments-minimum";
              }
          })()())({
              reflectSymbol: function () {
                  return "quotientInteger-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "quotientInteger-cpu-arguments-model-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "quotientInteger-cpu-arguments-model-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "quotientInteger-cpu-arguments-constant";
              }
          })()())({
              reflectSymbol: function () {
                  return "nullList-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "nullList-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "multiplyInteger-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "multiplyInteger-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "multiplyInteger-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "multiplyInteger-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "modInteger-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "modInteger-memory-arguments-minimum";
              }
          })()())({
              reflectSymbol: function () {
                  return "modInteger-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "modInteger-cpu-arguments-model-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "modInteger-cpu-arguments-model-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "modInteger-cpu-arguments-constant";
              }
          })()())({
              reflectSymbol: function () {
                  return "mkPairData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "mkPairData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "mkNilPairData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "mkNilPairData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "mkNilData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "mkNilData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "mkCons-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "mkCons-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "mapData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "mapData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "listData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "listData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanInteger-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanInteger-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanInteger-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanEqualsInteger-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanEqualsInteger-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanEqualsInteger-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanEqualsByteString-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanEqualsByteString-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanEqualsByteString-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanByteString-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanByteString-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "lessThanByteString-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "lengthOfByteString-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "lengthOfByteString-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "indexByteString-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "indexByteString-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "ifThenElse-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "ifThenElse-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "iData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "iData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "headList-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "headList-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "fstPair-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "fstPair-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsString-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsString-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsString-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsString-cpu-arguments-constant";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsInteger-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsInteger-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsInteger-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsData-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsData-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsByteString-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsByteString-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsByteString-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "equalsByteString-cpu-arguments-constant";
              }
          })()())({
              reflectSymbol: function () {
                  return "encodeUtf8-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "encodeUtf8-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "encodeUtf8-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "encodeUtf8-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "divideInteger-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "divideInteger-memory-arguments-minimum";
              }
          })()())({
              reflectSymbol: function () {
                  return "divideInteger-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "divideInteger-cpu-arguments-model-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "divideInteger-cpu-arguments-model-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "divideInteger-cpu-arguments-constant";
              }
          })()())({
              reflectSymbol: function () {
                  return "decodeUtf8-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "decodeUtf8-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "decodeUtf8-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "decodeUtf8-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "constrData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "constrData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "consByteString-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "consByteString-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "consByteString-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "consByteString-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "chooseUnit-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "chooseUnit-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "chooseList-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "chooseList-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "chooseData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "chooseData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekVarCost-exBudgetMemory";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekVarCost-exBudgetCPU";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekStartupCost-exBudgetMemory";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekStartupCost-exBudgetCPU";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekLamCost-exBudgetMemory";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekLamCost-exBudgetCPU";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekForceCost-exBudgetMemory";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekForceCost-exBudgetCPU";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekDelayCost-exBudgetMemory";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekDelayCost-exBudgetCPU";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekConstCost-exBudgetMemory";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekConstCost-exBudgetCPU";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekBuiltinCost-exBudgetMemory";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekBuiltinCost-exBudgetCPU";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekApplyCost-exBudgetMemory";
              }
          })()())({
              reflectSymbol: function () {
                  return "cekApplyCost-exBudgetCPU";
              }
          })()())({
              reflectSymbol: function () {
                  return "blake2b-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "blake2b-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "blake2b-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "bData-memory-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "bData-cpu-arguments";
              }
          })()())({
              reflectSymbol: function () {
                  return "appendString-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "appendString-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "appendString-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "appendString-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "appendByteString-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "appendByteString-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "appendByteString-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "appendByteString-cpu-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "addInteger-memory-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "addInteger-memory-arguments-intercept";
              }
          })()())({
              reflectSymbol: function () {
                  return "addInteger-cpu-arguments-slope";
              }
          })()())({
              reflectSymbol: function () {
                  return "addInteger-cpu-arguments-intercept";
              }
          })()())()))(Aeson.gDecodeAesonRowNil)({
              reflectSymbol: function () {
                  return "plutus:v1";
              }
          })()())()))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(decodeAesonPParamRational))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonBigInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonFieldMaybe(Cardano_Types_Transaction.decodeAesonNonce))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonFieldMaybe(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonRecord(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonBigInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonBigInt))(Aeson.gDecodeAesonRowNil)({
              reflectSymbol: function () {
                  return "steps";
              }
          })()())({
              reflectSymbol: function () {
                  return "memory";
              }
          })()())()))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonRecord(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonBigInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonBigInt))(Aeson.gDecodeAesonRowNil)({
              reflectSymbol: function () {
                  return "steps";
              }
          })()())({
              reflectSymbol: function () {
                  return "memory";
              }
          })()())()))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonFieldMaybe(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonBigInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(decodeAesonPParamRational))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonBigInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(decodeAesonPParamRational))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonBigInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonRecord(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(decodeAesonPParamRational))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(decodeAesonPParamRational))(Aeson.gDecodeAesonRowNil)({
              reflectSymbol: function () {
                  return "steps";
              }
          })()())({
              reflectSymbol: function () {
                  return "memory";
              }
          })()())()))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonRecord(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonUInt))(Aeson.gDecodeAesonRowNil)({
              reflectSymbol: function () {
                  return "minor";
              }
          })()())({
              reflectSymbol: function () {
                  return "major";
              }
          })()())()))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonBigInt))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(decodeAesonPParamRational))(Aeson.gDecodeAesonRowNil)({
              reflectSymbol: function () {
                  return "treasuryExpansion";
              }
          })()())({
              reflectSymbol: function () {
                  return "stakeKeyDeposit";
              }
          })()())({
              reflectSymbol: function () {
                  return "protocolVersion";
              }
          })()())({
              reflectSymbol: function () {
                  return "prices";
              }
          })()())({
              reflectSymbol: function () {
                  return "poolRetirementEpochBound";
              }
          })()())({
              reflectSymbol: function () {
                  return "poolInfluence";
              }
          })()())({
              reflectSymbol: function () {
                  return "poolDeposit";
              }
          })()())({
              reflectSymbol: function () {
                  return "monetaryExpansion";
              }
          })()())({
              reflectSymbol: function () {
                  return "minPoolCost";
              }
          })()())({
              reflectSymbol: function () {
                  return "minFeeConstant";
              }
          })()())({
              reflectSymbol: function () {
                  return "minFeeCoefficient";
              }
          })()())({
              reflectSymbol: function () {
                  return "maxValueSize";
              }
          })()())({
              reflectSymbol: function () {
                  return "maxTxSize";
              }
          })()())({
              reflectSymbol: function () {
                  return "maxExecutionUnitsPerTransaction";
              }
          })()())({
              reflectSymbol: function () {
                  return "maxExecutionUnitsPerBlock";
              }
          })()())({
              reflectSymbol: function () {
                  return "maxCollateralInputs";
              }
          })()())({
              reflectSymbol: function () {
                  return "maxBlockHeaderSize";
              }
          })()())({
              reflectSymbol: function () {
                  return "maxBlockBodySize";
              }
          })()())({
              reflectSymbol: function () {
                  return "extraEntropy";
              }
          })()())({
              reflectSymbol: function () {
                  return "desiredNumberOfPools";
              }
          })()())({
              reflectSymbol: function () {
                  return "decentralizationParameter";
              }
          })()())({
              reflectSymbol: function () {
                  return "costModels";
              }
          })()())({
              reflectSymbol: function () {
                  return "collateralPercentage";
              }
          })()())({
              reflectSymbol: function () {
                  return "coinsPerUtxoWord";
              }
          })()())())(aeson))(function (v) {
              return Control_Bind.bind(Data_Either.bindEither)(decodePrices(v))(function (prices) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)({
                      protocolVersion: new Data_Tuple.Tuple(v.protocolVersion.major, v.protocolVersion.minor),
                      decentralization: Data_Newtype.unwrap()(v.decentralizationParameter),
                      extraPraosEntropy: v.extraEntropy,
                      maxBlockHeaderSize: v.maxBlockHeaderSize,
                      maxBlockBodySize: v.maxBlockBodySize,
                      maxTxSize: v.maxTxSize,
                      txFeeFixed: v.minFeeConstant,
                      txFeePerByte: v.minFeeCoefficient,
                      stakeAddressDeposit: v.stakeKeyDeposit,
                      stakePoolDeposit: v.poolDeposit,
                      minPoolCost: v.minPoolCost,
                      poolRetireMaxEpoch: v.poolRetirementEpochBound,
                      poolPledgeInfluence: Data_Newtype.unwrap()(v.poolInfluence),
                      monetaryExpansion: Data_Newtype.unwrap()(v.monetaryExpansion),
                      treasuryCut: Data_Newtype.unwrap()(v.treasuryExpansion),
                      uTxOCostPerWord: v.coinsPerUtxoWord,
                      costModels: Data_Map_Internal.fromFoldable(Cardano_Types_Transaction.ordLanguage)(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple(Cardano_Types_Transaction.PlutusV1.value, convertCostModel(v["costModels"]["plutus:v1"])) ]),
                      prices: prices,
                      maxTxExUnits: new Data_Maybe.Just(decodeExUnits(v.maxExecutionUnitsPerTransaction)),
                      maxBlockExUnits: new Data_Maybe.Just(decodeExUnits(v.maxExecutionUnitsPerBlock)),
                      maxValueSize: v.maxValueSize,
                      collateralPercent: v.collateralPercentage,
                      maxCollateralInputs: v.maxCollateralInputs
                  });
              });
          });
      }
  };
  var aesonObject = Aeson.caseAesonObject(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Expected Object")));
  var parseTxOut = aesonObject(function (o) {
      return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonString)(o)("address"))(function (address) {
          return Control_Bind.bind(Data_Either.bindEither)(parseValue(o))(function (value) {
              var datum = Data_Either.hush(Aeson.getField(Aeson.decodeAesonString)(o)("datum"));
              return Control_Applicative.pure(Data_Either.applicativeEither)({
                  address: address,
                  value: value,
                  datum: datum
              });
          });
      });
  });
  var parseTxOutRef = aesonObject(function (o) {
      return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonString)(o)("txId"))(function (txId) {
          return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonUInt)(o)("index"))(function (index) {
              return Control_Applicative.pure(Data_Either.applicativeEither)({
                  txId: txId,
                  index: index
              });
          });
      });
  });
  var decodeAesonEraSummaryPara = {
      decodeAeson: aesonObject(function (o) {
          return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(decodeAesonEpochLength)(o)("epochLength"))(function (epochLength) {
              return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(decodeAesonSlotLength)(o)("slotLength"))(function (slotLength) {
                  return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(decodeAesonSafeZone)(o)("safeZone"))(function (safeZone) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()({
                          epochLength: epochLength,
                          slotLength: slotLength,
                          safeZone: safeZone
                      }));
                  });
              });
          });
      })
  };
  var decodeAesonEraSummaryTime = {
      decodeAeson: aesonObject(function (o) {
          return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(decodeAesonRelativeTime)(o)("time"))(function (time) {
              return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(decodeAesonAbsSlot)(o)("slot"))(function (slot) {
                  return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(decodeAesonEpoch)(o)("epoch"))(function (epoch) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()({
                          time: time,
                          slot: slot,
                          epoch: epoch
                      }));
                  });
              });
          });
      })
  };
  var decodeAesonEraSummary = {
      decodeAeson: aesonObject(function (o) {
          return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(decodeAesonEraSummaryTime)(o)("start"))(function (start) {
              return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonAeson)(o)("end"))(function (end$prime) {
                  return Control_Bind.bind(Data_Either.bindEither)((function () {
                      var $264 = Aeson.isNull(end$prime);
                      if ($264) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
                      };
                      return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(Aeson.decodeAeson(decodeAesonEraSummaryTime)(end$prime));
                  })())(function (end) {
                      return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(decodeAesonEraSummaryPara)(o)("parameters"))(function (parameters) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()({
                              start: start,
                              end: end,
                              parameters: parameters
                          }));
                      });
                  });
              });
          });
      })
  };
  var decodeAesonSubmitTxR = {
      decodeAeson: aesonObject(function (o) {
          return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonObject(Aeson.decodeAesonAeson))(o)("SubmitSuccess"))(Data_Function.flip(Aeson.getField(Aeson.decodeAesonString))("txId")))((function () {
              var $270 = Data_Maybe.maybe(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Expected hexstring")))((function () {
                  var $272 = Control_Applicative.pure(Data_Either.applicativeEither);
                  var $273 = Data_Newtype.wrap();
                  return function ($274) {
                      return $272($273($274));
                  };
              })());
              return function ($271) {
                  return $270(Types_ByteArray.hexToByteArray($271));
              };
          })());
      })
  };
  var aesonArray = Aeson.caseAesonArray(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Expected Array")));
  var parseUtxoQueryResult = (function () {
      var insertFunc = function (acc) {
          var inner = function (innerArray) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("missing 0th element, expected an OgmiosTxOutRef"))(Data_Array.index(innerArray)(0)))(function (txOutRefJson) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("missing 1st element, expected a TxOut"))(Data_Array.index(innerArray)(1)))(function (txOutJson) {
                      return Control_Bind.bind(Data_Either.bindEither)(parseTxOutRef(txOutRefJson))(function (txOutRef) {
                          return Control_Bind.bind(Data_Either.bindEither)(parseTxOut(txOutJson))(function (txOut) {
                              return Data_Functor.map(Data_Either.functorEither)(Data_Map_Internal.insert(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                                  reflectSymbol: function () {
                                      return "txId";
                                  }
                              })(Data_Ord.ordString))()({
                                  reflectSymbol: function () {
                                      return "index";
                                  }
                              })(Data_UInt.uintOrd)))(txOutRef)(txOut))(acc);
                          });
                      });
                  });
              });
          };
          return aesonArray(inner);
      };
      return aesonArray(Data_Foldable.foldl(Data_Foldable.foldableArray)(insertFunc)(new Data_Either.Right(Data_Map_Internal.empty)));
  })();
  var decodeAesonUtxoQR = {
      decodeAeson: (function () {
          var $275 = Data_Functor.map(Data_Either.functorEither)(UtxoQR);
          return function ($276) {
              return $275(parseUtxoQueryResult($276));
          };
      })()
  };
  var decodeAesonEraSummaries = {
      decodeAeson: aesonArray((function () {
          var $277 = Data_Functor.map(Data_Either.functorEither)(Data_Newtype.wrap());
          var $278 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Aeson.decodeAeson(decodeAesonEraSummary));
          return function ($279) {
              return $277($278($279));
          };
      })())
  };
  exports["queryProtocolParametersCall"] = queryProtocolParametersCall;
  exports["queryEraSummariesCall"] = queryEraSummariesCall;
  exports["querySystemStartCall"] = querySystemStartCall;
  exports["queryUtxosAtCall"] = queryUtxosAtCall;
  exports["submitTxCall"] = submitTxCall;
  exports["decodeAesonSubmitTxR"] = decodeAesonSubmitTxR;
  exports["decodeAesonSystemStart"] = decodeAesonSystemStart;
  exports["decodeAesonCurrentEpoch"] = decodeAesonCurrentEpoch;
  exports["decodeAesonEraSummaries"] = decodeAesonEraSummaries;
  exports["showAbsSlot"] = showAbsSlot;
  exports["decodeAesonTxEvaluationR"] = decodeAesonTxEvaluationR;
  exports["decodeAesonProtocolParame"] = decodeAesonProtocolParame;
  exports["decodeAesonChainTipQR"] = decodeAesonChainTipQR;
  exports["decodeAesonUtxoQR"] = decodeAesonUtxoQR;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["QueryM.ServerConfig"] = $PS["QueryM.ServerConfig"] || {};
  var exports = $PS["QueryM.ServerConfig"];
  var Data_UInt = $PS["Data.UInt"];                
  var mkServerUrl = function (protocol) {
      return function (cfg) {
          return (function () {
              if (cfg.secure) {
                  return protocol + "s";
              };
              return protocol;
          })() + ("://" + (cfg.host + (":" + Data_UInt.toString(cfg.port))));
      };
  };
  var mkWsUrl = mkServerUrl("ws");
  var mkOgmiosDatumCacheWsUrl = function (cfg) {
      return mkWsUrl(cfg) + "/ws";
  };
  var mkHttpUrl = mkServerUrl("http");
  var defaultServerConfig = {
      port: Data_UInt.fromInt(8081),
      host: "localhost",
      secure: false
  };
  var defaultOgmiosWsConfig = {
      port: Data_UInt.fromInt(1337),
      host: "localhost",
      secure: false
  };
  var defaultDatumCacheWsConfig = {
      port: Data_UInt.fromInt(9999),
      host: "localhost",
      secure: false
  };
  exports["defaultServerConfig"] = defaultServerConfig;
  exports["defaultOgmiosWsConfig"] = defaultOgmiosWsConfig;
  exports["defaultDatumCacheWsConfig"] = defaultDatumCacheWsConfig;
  exports["mkHttpUrl"] = mkHttpUrl;
  exports["mkWsUrl"] = mkWsUrl;
  exports["mkOgmiosDatumCacheWsUrl"] = mkOgmiosDatumCacheWsUrl;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Types.MultiMap"] = $PS["Types.MultiMap"] || {};
  var exports = $PS["Types.MultiMap"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var singleton = function (dictOrd) {
      return function (k) {
          return function (v) {
              return Data_Map_Internal.insert(dictOrd)(k)(Data_Array.singleton(v))(Data_Map_Internal.empty);
          };
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          return function (v) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(dictOrd)(k)(v))(Data_Array.head);
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              return function (v1) {
                  return Data_Map_Internal.insertWith(dictOrd)(Data_Semigroup.append(Data_Semigroup.semigroupArray))(k)(Data_Array.singleton(v))(v1);
              };
          };
      };
  };
  var empty = Data_Map_Internal.empty;
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (v) {
              return Data_Map_Internal.update(dictOrd)((function () {
                  var $15 = Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
                      return v1.tail;
                  });
                  return function ($16) {
                      return $15(Data_Array.uncons($16));
                  };
              })())(k)(v);
          };
      };
  };
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["delete"] = $$delete;
  exports["lookup"] = lookup;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Types.Natural"] = $PS["Types.Natural"] || {};
  var exports = $PS["Types.Natural"];
  var Aeson = $PS["Aeson"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];    
  var toBigInt = function (v) {
      return v;
  };
  var fromBigInt = function (n) {
      var $17 = Data_Ord.greaterThanOrEq(Data_BigInt.ordBigInt)(n)(Data_BigInt.fromInt(0));
      if ($17) {
          return new Data_Maybe.Just(n);
      };
      return Data_Maybe.Nothing.value;
  };                                                                                                            
  var decodeAesonNatural = {
      decodeAeson: Aeson.caseAesonBigInt(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Expected BigInt from Aeson decoding")))(function (bi) {
          return Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Invalid Natural number: " + Data_Show.show(Data_BigInt.showBigInt)(bi)))(fromBigInt(bi));
      })
  };
  exports["toBigInt"] = toBigInt;
  exports["decodeAesonNatural"] = decodeAesonNatural;
})(PS);
(function(exports) {
  /* global require exports BROWSER_RUNTIME */

  // _enableNami :: Effect (Promise Cip30Connection)
  exports._enableNami = () =>
      window.cardano.nami.enable();
})(PS["Wallet"] = PS["Wallet"] || {});
(function(exports) {
  /* global require exports BROWSER_RUNTIME */

  var lib;
  if (typeof BROWSER_RUNTIME != 'undefined' && BROWSER_RUNTIME) {
      lib = require('@emurgo/cardano-serialization-lib-browser');
  } else {
      lib = require('@emurgo/cardano-serialization-lib-nodejs');
  }

  // _getAddress :: Cip30Connection -> Effect (Promise String)
  exports._getAddress = conn => () =>
    conn.getUsedAddresses().then((addrs) => addrs[0]);

  // _getCollateral
  //   :: MaybeFfiHelper
  //   -> Cip30Connection
  //   -> Effect (Promise String)
  exports._getCollateral = maybe => conn => () =>
    conn.experimental.getCollateral().then((utxos) => {
    return utxos.length ? maybe.just(utxos[0]) : maybe.nothing;
  });

  // _signTx :: String -> Cip30Connection -> Effect (Promise String)
  exports._signTx = txHex => conn => () => {
    return conn.signTx(txHex, true)
        .catch(e => {
            console.log("Error in signTx: ", e);
            throw (JSON.stringify(e));
        });
  };

  // foreign import _attachSignature
  //   :: ByteArray
  //   -> ByteArray
  //   -> Effect (ByteArray)
  exports._attachSignature = txBytes => witBytes => () => {
    const tx = lib.Transaction.from_bytes(txBytes);
    const newWits = lib.TransactionWitnessSet.from_bytes(witBytes);
    // .vkeys() may return undefined
    const oldvkeyWits = tx.witness_set().vkeys() || lib.Vkeywitnesses.new();
    const newvkeyWits = newWits.vkeys() || lib.Vkeywitnesses.new();

    // Add old vkeyWits into the new set as well to make multi-sign possible
    for (let i = 0; i < oldvkeyWits.len(); i++) {
      newvkeyWits.add(oldvkeyWits.get(i));
    }

    const wits = tx.witness_set();
    // If there are no vkeys in either witness set, we don't want to attach
    // empty vkeys to tx witnesses
    // (So in this case oldvkeyWits remain untouched).
    if (newvkeyWits.len() != 0) {
      wits.set_vkeys(newvkeyWits);
    }

    return lib.Transaction.new(tx.body(), wits, tx.auxiliary_data()).to_bytes();
  };
})(PS["Wallet.Cip30"] = PS["Wallet.Cip30"] || {});
(function(exports) {
    

  exports.thenImpl = function(promise) {
    return function(errCB) {
      return function(succCB) {
        return function() {
          promise.then(succCB, errCB);
        };
      };
    };
  };
})(PS["Control.Promise"] = PS["Control.Promise"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Control.Promise"] = $PS["Control.Promise"] || {};
  var exports = $PS["Control.Promise"];
  var $foreign = $PS["Control.Promise"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Foreign = $PS["Foreign"];                
  var toAff$prime = function (customCoerce) {
      return function (p) {
          return Effect_Aff.makeAff(function (cb) {
              return Data_Functor.voidRight(Effect.functorEffect)(Data_Monoid.mempty(Effect_Aff.monoidCanceler))($foreign.thenImpl(p)(function ($1) {
                  return cb(Data_Either.Left.create(customCoerce($1)))();
              })(function ($2) {
                  return cb(Data_Either.Right.create($2))();
              }));
          });
      };
  };
  var coerce = function (fn) {
      return Data_Either.either(function (v) {
          return Effect_Exception.error("Promise failed, couldn't extract JS Error or String");
      })(Control_Category.identity(Control_Category.categoryFn))(Control_Monad_Except.runExcept(Control_Alt.alt(Control_Monad_Except_Trans.altExceptT(Data_List_Types.semigroupNonEmptyList)(Data_Identity.monadIdentity))(Foreign.unsafeReadTagged(Data_Identity.monadIdentity)("Error")(fn))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Effect_Exception.error)(Foreign.readString(Data_Identity.monadIdentity)(fn)))));
  };
  var toAff = toAff$prime(coerce);
  var toAffE = function (f) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(f))(toAff);
  };
  exports["toAffE"] = toAffE;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Wallet.Cip30"] = $PS["Wallet.Cip30"] || {};
  var exports = $PS["Wallet.Cip30"];
  var $foreign = $PS["Wallet.Cip30"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Promise = $PS["Control.Promise"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Deserialization_FromBytes = $PS["Deserialization.FromBytes"];
  var Deserialization_UnspentOutput = $PS["Deserialization.UnspentOutput"];
  var Deserialization_WitnessSet = $PS["Deserialization.WitnessSet"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var FfiHelpers = $PS["FfiHelpers"];
  var Serialization = $PS["Serialization"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_CborBytes = $PS["Types.CborBytes"];
  var Types_RawBytes = $PS["Types.RawBytes"];
  var Untagged_Union = $PS["Untagged.Union"];                
  var txToHex = (function () {
      var $15 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
      var $16 = Data_Functor.map(Effect.functorEffect)((function () {
          var $18 = Untagged_Union.asOneOf();
          return function ($19) {
              return Types_ByteArray.byteArrayToHex(Serialization.toBytes($18($19)));
          };
      })());
      return function ($17) {
          return $15($16(Serialization.convertTransaction($17)));
      };
  })();
  var getCip30Collateral = $foreign["_getCollateral"](FfiHelpers.maybeFfiHelper);
  var fromMaybeHexString = function (act) {
      var $20 = Data_Functor.map(Effect_Aff.functorAff)(Data_Function.flip(Control_Bind.bind(Data_Maybe.bindMaybe))(Types_RawBytes.hexToRawBytes));
      return function ($21) {
          return $20(Control_Promise.toAffE(act($21)));
      };
  };
  var getCollateral = function (conn) {
      return Control_Bind.bind(Effect_Aff.bindAff)(fromMaybeHexString(getCip30Collateral)(conn))(function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
          };
          if (v instanceof Data_Maybe.Just) {
              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(Deserialization_UnspentOutput.convertUnspentOutput)(Deserialization_FromBytes.fromBytesEffect(Deserialization_FromBytes.fromBytesTransactionUnspe)(Data_Newtype.unwrap()(v.value0))));
          };
          throw new Error("Failed pattern match at Wallet.Cip30 (line 85, column 3 - line 90, column 45): " + [ v.constructor.name ]);
      });
  };
  var fromHexString = function (act) {
      var $22 = Data_Functor.map(Effect_Aff.functorAff)(Types_RawBytes.hexToRawBytes);
      return function ($23) {
          return $22(Control_Promise.toAffE(act($23)));
      };
  };
  var getWalletAddress = function (conn) {
      return Data_Functor.mapFlipped(Effect_Aff.functorAff)(fromHexString($foreign["_getAddress"])(conn))(function (v) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(v)(function ($24) {
              return Serialization_Address.addressFromBytes(Types_CborBytes.rawBytesAsCborBytes($24));
          });
      });
  };
  var signTx = function (conn) {
      return function (tx) {
          var combineWitnessSet = function (v) {
              return function (newWits) {
                  return {
                      body: v.body,
                      witnessSet: Data_Semigroup.append(Cardano_Types_Transaction.semigroupTransactionWitne)(v.witnessSet)(newWits),
                      isValid: v.isValid,
                      auxiliaryData: v.auxiliaryData
                  };
              };
          };
          return Control_Bind.bind(Effect_Aff.bindAff)(txToHex(tx))(function (txHex) {
              return Control_Bind.bind(Effect_Aff.bindAff)(fromHexString($foreign["_signTx"](txHex))(conn))(function (v) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return Data_Functor.map(Effect_Aff.functorAff)(Data_Functor.map(Data_Maybe.functorMaybe)(combineWitnessSet(tx)))(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(Deserialization_WitnessSet.convertWitnessSet)(Deserialization_FromBytes.fromBytesEffect(Deserialization_FromBytes.fromBytesTransactionWitne)(Data_Newtype.unwrap()(v.value0)))));
                  };
                  throw new Error("Failed pattern match at Wallet.Cip30 (line 95, column 42 - line 100, column 8): " + [ v.constructor.name ]);
              });
          });
      };
  };
  var signTxBytes = function (conn) {
      return function (txBytes) {
          return Control_Bind.bind(Effect_Aff.bindAff)(fromHexString($foreign["_signTx"](Types_CborBytes.cborBytesToHex(txBytes)))(conn))(function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
              };
              if (v instanceof Data_Maybe.Just) {
                  return Data_Functor.map(Effect_Aff.functorAff)(Data_Maybe.Just.create)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)($foreign["_attachSignature"](txBytes)(Types_CborBytes.rawBytesAsCborBytes(v.value0))));
              };
              throw new Error("Failed pattern match at Wallet.Cip30 (line 110, column 61 - line 113, column 64): " + [ v.constructor.name ]);
          });
      };
  };
  var mkCip30WalletAff = function (walletName) {
      return function (enableWallet) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Control_Promise.toAffE(enableWallet))(function (wallet) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Monad.whenM(Effect_Aff.monadAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Maybe.isNothing)(getCollateral(wallet)))(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Exception["throw"](walletName + " wallet missing collateral"))))(function () {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                      connection: wallet,
                      getWalletAddress: getWalletAddress,
                      getCollateral: getCollateral,
                      signTx: signTx,
                      signTxBytes: signTxBytes
                  });
              });
          });
      };
  };
  exports["mkCip30WalletAff"] = mkCip30WalletAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Lens.Setter"] = $PS["Data.Lens.Setter"] || {};
  var exports = $PS["Data.Lens.Setter"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];        
  var over = function (l) {
      return l;
  };
  var set = function (l) {
      return function (b) {
          return over(l)(Data_Function["const"](b));
      };
  };
  var setJust = function (p) {
      var $24 = set(p);
      return function ($25) {
          return $24(Data_Maybe.Just.create($25));
      };
  };
  var modifying = function (dictMonadState) {
      return function (p) {
          return function (f) {
              return Data_Functor["void"]((((dictMonadState.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_State_Class.modify(dictMonadState)(over(p)(f)));
          };
      };
  };
  var assign = function (dictMonadState) {
      return function (p) {
          return function (b) {
              return Data_Functor["void"]((((dictMonadState.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_State_Class.modify(dictMonadState)(set(p)(b)));
          };
      };
  };
  var appendModifying = function (dictMonadState) {
      return function (dictSemigroup) {
          return function (p) {
              var $61 = modifying(dictMonadState)(p);
              var $62 = Data_Function.flip(Data_Semigroup.append(dictSemigroup));
              return function ($63) {
                  return $61($62($63));
              };
          };
      };
  };
  exports["over"] = over;
  exports["set"] = set;
  exports["setJust"] = setJust;
  exports["assign"] = assign;
  exports["modifying"] = modifying;
  exports["appendModifying"] = appendModifying;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Ord.Min"] = $PS["Data.Ord.Min"] || {};
  var exports = $PS["Data.Ord.Min"];
  var Data_Ord = $PS["Data.Ord"];
  var semigroupMin = function (dictOrd) {
      return {
          append: function (v) {
              return function (v1) {
                  return Data_Ord.min(dictOrd)(v)(v1);
              };
          }
      };
  };
  exports["semigroupMin"] = semigroupMin;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Wallet.Key"] = $PS["Wallet.Key"] || {};
  var exports = $PS["Wallet.Key"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Cardano_Types_Value = $PS["Cardano.Types.Value"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ord_Min = $PS["Data.Ord.Min"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Deserialization_WitnessSet = $PS["Deserialization.WitnessSet"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Serialization = $PS["Serialization"];
  var Serialization_Address = $PS["Serialization.Address"];
  var _value = function (v) {
      return v.output.amount;
  };
  var eqAdaOut = {
      eq: function (a) {
          return function (b) {
              var $13 = _value(a);
              var $14 = _value(b);
              return Data_Eq.eq(Cardano_Types_Value.eqCoin)($13.value0)($14.value0);
          };
      }
  };
  var ordAdaOut = {
      compare: function (a) {
          return function (b) {
              var $21 = _value(a);
              var $22 = _value(b);
              return Data_Ord.compare(Cardano_Types_Value.ordCoin)($21.value0)($22.value0);
          };
      },
      Eq0: function () {
          return eqAdaOut;
      }
  };
  var privateKeyToKeyWallet = function (key) {
      var signTx = function (v) {
          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
              var txBody = Serialization.convertTxBody(v.body)();
              var hash = Serialization.hashTransaction(txBody)();
              var wit = Data_Functor.map(Effect.functorEffect)(Deserialization_WitnessSet.convertVkeyWitness)(Serialization.makeVkeywitness(hash)(key))();
              var witnessSet$prime = Data_Lens_Setter.set(Cardano_Types_Transaction["_vkeys"](Data_Profunctor_Strong.strongFn))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Control_Applicative.pure(Control_Applicative.applicativeArray)(wit)))(Data_Monoid.mempty(Cardano_Types_Transaction.monoidTransactionWitnessS));
              return {
                  body: v.body,
                  witnessSet: Data_Semigroup.append(Cardano_Types_Transaction.semigroupTransactionWitne)(witnessSet$prime)(v.witnessSet),
                  isValid: v.isValid,
                  auxiliaryData: v.auxiliaryData
              };
          });
      };
      var selectCollateral = function (utxos) {
          return Data_Functor.map(Data_Maybe.functorMaybe)((function () {
              var $32 = Data_Newtype.unwrap();
              var $33 = Data_Newtype.unwrap();
              return function ($34) {
                  return $32($33($34));
              };
          })())(Data_Function.flip(Data_FoldableWithIndex.foldMapWithIndex(Data_Map_Internal.foldableWithIndexMap)(Data_Maybe.monoidMaybe(Data_Ord_Min.semigroupMin(ordAdaOut))))(utxos)(function (input) {
              return function (output) {
                  var txuo = {
                      input: input,
                      output: output
                  };
                  var v = _value(txuo);
                  var onlyAda = Data_Foldable.all(Data_Map_Internal.foldableMap)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Foldable.all(Data_Map_Internal.foldableMap)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Eq.eq(Data_BigInt.eqBigInt)(Data_Semiring.zero(Data_BigInt.semiringBigInt))))(v.value1);
                  var bigAda = Data_Ord.greaterThanOrEq(Cardano_Types_Value.ordCoin)(v.value0)(Cardano_Types_Value.mkCoin(5000000));
                  var $29 = onlyAda && bigAda;
                  if ($29) {
                      return new Data_Maybe.Just(txuo);
                  };
                  return Data_Maybe.Nothing.value;
              };
          }));
      };
      var address = function (network) {
          return Data_Functor.mapFlipped(Effect_Aff.functorAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Serialization.publicKeyFromPrivateKey(key)))(function ($35) {
              return Serialization_Address.enterpriseAddressToAddress(Serialization_Address.enterpriseAddress((function (v) {
                  return {
                      network: network,
                      paymentCred: v
                  };
              })(Serialization_Address.keyHashCredential(Serialization.publicKeyHash($35)))));
          });
      };
      return {
          address: address,
          selectCollateral: selectCollateral,
          signTx: signTx
      };
  };
  exports["privateKeyToKeyWallet"] = privateKeyToKeyWallet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Wallet"] = $PS["Wallet"] || {};
  var exports = $PS["Wallet"];
  var $foreign = $PS["Wallet"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Wallet_Cip30 = $PS["Wallet.Cip30"];
  var Wallet_Key = $PS["Wallet.Key"];                
  var Nami = (function () {
      function Nami(value0) {
          this.value0 = value0;
      };
      Nami.create = function (value0) {
          return new Nami(value0);
      };
      return Nami;
  })();
  var Gero = (function () {
      function Gero(value0) {
          this.value0 = value0;
      };
      Gero.create = function (value0) {
          return new Gero(value0);
      };
      return Gero;
  })();
  var KeyWallet = (function () {
      function KeyWallet(value0) {
          this.value0 = value0;
      };
      KeyWallet.create = function (value0) {
          return new KeyWallet(value0);
      };
      return KeyWallet;
  })();
  var mkNamiWalletAff = Data_Functor.map(Effect_Aff.functorAff)(Nami.create)(Wallet_Cip30.mkCip30WalletAff("Nami")($foreign["_enableNami"]));
  var mkKeyWallet = function ($9) {
      return KeyWallet.create(Wallet_Key.privateKeyToKeyWallet($9));
  };
  var cip30Wallet = function (v) {
      if (v instanceof Nami) {
          return new Data_Maybe.Just(v.value0);
      };
      if (v instanceof Gero) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  };
  exports["Gero"] = Gero;
  exports["Nami"] = Nami;
  exports["KeyWallet"] = KeyWallet;
  exports["mkNamiWalletAff"] = mkNamiWalletAff;
  exports["mkKeyWallet"] = mkKeyWallet;
  exports["cip30Wallet"] = cip30Wallet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["QueryM"] = $PS["QueryM"] || {};
  var exports = $PS["QueryM"];
  var Aeson = $PS["Aeson"];
  var Affjax = $PS["Affjax"];
  var Affjax_RequestBody = $PS["Affjax.RequestBody"];
  var Affjax_RequestHeader = $PS["Affjax.RequestHeader"];
  var Affjax_ResponseFormat = $PS["Affjax.ResponseFormat"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Logger_Trans = $PS["Control.Monad.Logger.Trans"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HTTP_Method = $PS["Data.HTTP.Method"];
  var Data_Log_Level = $PS["Data.Log.Level"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_MediaType_Common = $PS["Data.MediaType.Common"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_UInt = $PS["Data.UInt"];
  var Deserialization_FromBytes = $PS["Deserialization.FromBytes"];
  var Deserialization_Transaction = $PS["Deserialization.Transaction"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Helpers = $PS["Helpers"];
  var JsWebSocket = $PS["JsWebSocket"];
  var QueryM_DatumCacheWsp = $PS["QueryM.DatumCacheWsp"];
  var QueryM_JsonWsp = $PS["QueryM.JsonWsp"];
  var QueryM_Ogmios = $PS["QueryM.Ogmios"];
  var QueryM_ServerConfig = $PS["QueryM.ServerConfig"];
  var Serialization = $PS["Serialization"];
  var Serialization_PlutusData = $PS["Serialization.PlutusData"];
  var Serialization_WitnessSet = $PS["Serialization.WitnessSet"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_Datum = $PS["Types.Datum"];
  var Types_MultiMap = $PS["Types.MultiMap"];
  var Types_Natural = $PS["Types.Natural"];
  var Types_Scripts = $PS["Types.Scripts"];
  var Untagged_Union = $PS["Untagged.Union"];
  var Wallet = $PS["Wallet"];                
  var WebSocket = (function () {
      function WebSocket(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      WebSocket.create = function (value0) {
          return function (value1) {
              return new WebSocket(value0, value1);
          };
      };
      return WebSocket;
  })();
  var FinalizedTransaction = function (x) {
      return x;
  };
  var FeeEstimate = function (x) {
      return x;
  };
  var JsError = (function () {
      function JsError(value0) {
          this.value0 = value0;
      };
      JsError.create = function (value0) {
          return new JsError(value0);
      };
      return JsError;
  })();
  var JsonError = (function () {
      function JsonError(value0) {
          this.value0 = value0;
      };
      JsonError.create = function (value0) {
          return new JsonError(value0);
      };
      return JsonError;
  })();
  var FaultError = (function () {
      function FaultError(value0) {
          this.value0 = value0;
      };
      FaultError.create = function (value0) {
          return new FaultError(value0);
      };
      return FaultError;
  })();
  var ClientHttpError = (function () {
      function ClientHttpError(value0) {
          this.value0 = value0;
      };
      ClientHttpError.create = function (value0) {
          return new ClientHttpError(value0);
      };
      return ClientHttpError;
  })();
  var ClientHttpResponseError = (function () {
      function ClientHttpResponseError(value0) {
          this.value0 = value0;
      };
      ClientHttpResponseError.create = function (value0) {
          return new ClientHttpResponseError(value0);
      };
      return ClientHttpResponseError;
  })();
  var ClientDecodeJsonError = (function () {
      function ClientDecodeJsonError(value0) {
          this.value0 = value0;
      };
      ClientDecodeJsonError.create = function (value0) {
          return new ClientDecodeJsonError(value0);
      };
      return ClientDecodeJsonError;
  })();
  var ClientEncodingError = (function () {
      function ClientEncodingError(value0) {
          this.value0 = value0;
      };
      ClientEncodingError.create = function (value0) {
          return new ClientEncodingError(value0);
      };
      return ClientEncodingError;
  })();
  var ClientOtherError = (function () {
      function ClientOtherError(value0) {
          this.value0 = value0;
      };
      ClientOtherError.create = function (value0) {
          return new ClientOtherError(value0);
      };
      return ClientOtherError;
  })();
  var showClientError = {
      show: function (v) {
          if (v instanceof ClientHttpError) {
              return "(ClientHttpError " + (Affjax.printError(v.value0) + ")");
          };
          if (v instanceof ClientHttpResponseError) {
              return "(ClientHttpResponseError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
          };
          if (v instanceof ClientDecodeJsonError) {
              return "(ClientDecodeJsonError " + (Data_Show.show(Data_Argonaut_Decode_Error.showJsonDecodeError)(v.value0) + ")");
          };
          if (v instanceof ClientEncodingError) {
              return "(ClientEncodingError " + (v.value0 + ")");
          };
          if (v instanceof ClientOtherError) {
              return "(ClientEncodingError " + (v.value0 + ")");
          };
          throw new Error("Failed pattern match at QueryM (line 371, column 1 - line 391, column 13): " + [ v.constructor.name ]);
      }
  };
  var decodeAesonRdmrPtrExUnits = Aeson.decodeAesonRecord(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Natural.decodeAesonNatural))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Natural.decodeAesonNatural))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Types_Natural.decodeAesonNatural))(Aeson.gDecodeAesonCons(Aeson.decodeAesonField1(Aeson.decodeAesonInt))(Aeson.gDecodeAesonRowNil)({
      reflectSymbol: function () {
          return "rdmrPtrTag";
      }
  })()())({
      reflectSymbol: function () {
          return "rdmrPtrIdx";
      }
  })()())({
      reflectSymbol: function () {
          return "exUnitsSteps";
      }
  })()())({
      reflectSymbol: function () {
          return "exUnitsMem";
      }
  })()())();
  var decodeAesonFinalizedTrans = {
      decodeAeson: (function () {
          var err = new Data_Argonaut_Decode_Error.TypeMismatch("Expected CborHex of Tx");
          var $152 = Data_Functor.map(Data_Either.functorEither)(FinalizedTransaction);
          var $153 = Aeson.caseAesonString(new Data_Either.Left(err))((function () {
              var $155 = Data_Either.note(err);
              return function ($156) {
                  return $155(Types_ByteArray.hexToByteArray($156));
              };
          })());
          return function ($154) {
              return $152($153($154));
          };
      })()
  };
  var decodeAesonFeeEstimate = {
      decodeAeson: function (str) {
          return Control_Bind.bindFlipped(Data_Either.bindEither)((function () {
              var $157 = Data_Functor.map(Data_Either.functorEither)(FeeEstimate);
              var $158 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Expected a `BigInt`"));
              return function ($159) {
                  return $157($158(Data_BigInt.fromString($159)));
              };
          })())(Aeson.caseAesonString(new Data_Either.Left(new Data_Argonaut_Decode_Error.TypeMismatch("Expected a stringified `BigInt`")))(Data_Either.Right.create)(str));
      }
  };
  var withMWalletAff = function (act) {
      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Logger_Trans.bindLoggerT(Effect_Aff.monadAff)))(Control_Monad_Reader_Class.asks(Control_Monad_Reader_Trans.monadAskReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))(function (v) {
          return v.wallet;
      }))(Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff)))(Data_Maybe.Nothing.value))((function () {
          var $160 = Effect_Aff_Class.liftAff(Effect_Aff_Class.monadAffReader(Control_Monad_Logger_Trans.monadAffLoggerT(Effect_Aff_Class.monadAffAff)));
          return function ($161) {
              return $160(act($161));
          };
      })()));
  };
  var underlyingWebSocket = function (v) {
      return v.value0;
  };
  var txToHex = function (tx) {
      return Data_Functor.map(Effect.functorEffect)((function () {
          var $162 = Untagged_Union.asOneOf();
          return function ($163) {
              return Types_ByteArray.byteArrayToHex(Serialization.toBytes($162($163)));
          };
      })())(Serialization.convertTransaction(tx));
  };
  var scriptToAeson = (function () {
      var $164 = Aeson.encodeAeson(Aeson.encodeAesonString);
      var $165 = Data_Newtype.unwrap();
      return function ($166) {
          return $164(Types_ByteArray.byteArrayToHex($165($166)));
      };
  })();
  var queryDispatch = function (dictDecodeAeson) {
      return function (ref) {
          return function (str) {
              var withAction = function (reflection) {
                  return function (cb) {
                      return function __do() {
                          var idMap = Effect_Ref.read(ref)();
                          var mbAction = Types_MultiMap.lookup(Data_Ord.ordString)(reflection)(idMap);
                          return cb(mbAction)();
                      };
                  };
              };
              var eiAeson = Aeson.parseJsonStringToAeson(str);
              var v = Control_Bind.bindFlipped(Data_Either.bindEither)(QueryM_JsonWsp.parseJsonWspResponse(dictDecodeAeson))(eiAeson);
              if (v instanceof Data_Either.Left) {
                  var v1 = Control_Bind.bindFlipped(Data_Either.bindEither)(QueryM_JsonWsp.parseJsonWspResponseId)(eiAeson);
                  if (v1 instanceof Data_Either.Left) {
                      return Control_Applicative.pure(Effect.applicativeEffect)(new Data_Either.Left(new JsonError(v.value0)));
                  };
                  if (v1 instanceof Data_Either.Right) {
                      return withAction(v1.value0)(function (v2) {
                          if (v2 instanceof Data_Maybe.Nothing) {
                              return Control_Applicative.pure(Effect.applicativeEffect)(new Data_Either.Left(new JsError(Effect_Exception.error("Parse failed and Request Id: " + (v1.value0 + " has been cancelled")))));
                          };
                          if (v2 instanceof Data_Maybe.Just) {
                              return Control_Applicative.pure(Effect.applicativeEffect)(new Data_Either.Right(v2.value0(new Data_Either.Left(new JsonError(v.value0)))));
                          };
                          throw new Error("Failed pattern match at QueryM (line 918, column 33 - line 922, column 79): " + [ v2.constructor.name ]);
                      });
                  };
                  throw new Error("Failed pattern match at QueryM (line 914, column 7 - line 922, column 79): " + [ v1.constructor.name ]);
              };
              if (v instanceof Data_Either.Right && v.value0.result instanceof Data_Maybe.Just) {
                  return withAction(v.value0.reflection)(function (v1) {
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(Effect.applicativeEffect)(new Data_Either.Left(new JsError(Effect_Exception.error("Parse succeeded but Request Id: " + (v.value0.reflection + " has been cancelled")))));
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          return Control_Applicative.pure(Effect.applicativeEffect)(new Data_Either.Right(v1.value0(new Data_Either.Right(v.value0.result.value0))));
                      };
                      throw new Error("Failed pattern match at QueryM (line 924, column 29 - line 930, column 60): " + [ v1.constructor.name ]);
                  });
              };
              if (v instanceof Data_Either.Right && (v.value0.result instanceof Data_Maybe.Nothing && v.value0.fault instanceof Data_Maybe.Just)) {
                  return withAction(v.value0.reflection)(function (v1) {
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(Effect.applicativeEffect)(new Data_Either.Left(new FaultError(v.value0.fault.value0)));
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          return Control_Applicative.pure(Effect.applicativeEffect)(new Data_Either.Right(v1.value0(new Data_Either.Left(new FaultError(v.value0.fault.value0)))));
                      };
                      throw new Error("Failed pattern match at QueryM (line 933, column 29 - line 936, column 58): " + [ v1.constructor.name ]);
                  });
              };
              if (v instanceof Data_Either.Right && (v.value0.result instanceof Data_Maybe.Nothing && v.value0.fault instanceof Data_Maybe.Nothing)) {
                  var errMsg = "Impossible happened: response does not contain neither `fault` " + ("nor `result`, please report as bug. Response: " + str);
                  return withAction(v.value0.reflection)(function (v1) {
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(Effect.applicativeEffect)(new Data_Either.Left(new JsError(Effect_Exception.error(errMsg))));
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          return Control_Applicative.pure(Effect.applicativeEffect)(new Data_Either.Right(v1.value0(new Data_Either.Left(new JsError(Effect_Exception.error(errMsg))))));
                      };
                      throw new Error("Failed pattern match at QueryM (line 944, column 29 - line 948, column 64): " + [ v1.constructor.name ]);
                  });
              };
              throw new Error("Failed pattern match at QueryM (line 911, column 3 - line 948, column 64): " + [ v.constructor.name ]);
          };
      };
  };
  var postAeson = function (url) {
      return function (body) {
          return Affjax.request({
              method: new Data_Either.Left(Data_HTTP_Method.POST.value),
              url: url,
              headers: [ new Affjax_RequestHeader.ContentType(Data_MediaType_Common.applicationJSON) ],
              content: new Data_Maybe.Just(new Affjax_RequestBody["String"](Aeson.stringifyAeson(body))),
              username: Affjax.defaultRequest.username,
              password: Affjax.defaultRequest.password,
              withCredentials: Affjax.defaultRequest.withCredentials,
              responseFormat: Affjax_ResponseFormat.string,
              timeout: Affjax.defaultRequest.timeout
          });
      };
  };
  var ogmiosMessageDispatch = function (v) {
      return [ queryDispatch(QueryM_Ogmios.decodeAesonUtxoQR)(v.utxoDispatchMap), queryDispatch(QueryM_Ogmios.decodeAesonChainTipQR)(v.chainTipDispatchMap), queryDispatch(QueryM_Ogmios.decodeAesonTxEvaluationR)(v.evaluateTxDispatchMap), queryDispatch(QueryM_Ogmios.decodeAesonProtocolParame)(v.getProtocolParametersDispatchMap), queryDispatch(QueryM_Ogmios.decodeAesonSubmitTxR)(v.submitDispatchMap), queryDispatch(QueryM_Ogmios.decodeAesonEraSummaries)(v.eraSummariesDispatchMap), queryDispatch(QueryM_Ogmios.decodeAesonCurrentEpoch)(v.currentEpochDispatchMap), queryDispatch(QueryM_Ogmios.decodeAesonSystemStart)(v.systemStartDispatchMap) ];
  };
  var mkServerEndpointUrl = function (path) {
      return Control_Monad_Reader_Class.asks(Control_Monad_Reader_Trans.monadAskReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))(function ($170) {
          return (function (v) {
              return v + ("/" + path);
          })(QueryM_ServerConfig.mkHttpUrl((function (v) {
              return v.serverConfig;
          })($170)));
      });
  };
  var mkListenerSet = function (dim) {
      return function (pr) {
          return {
              addMessageListener: function (id) {
                  return function (func) {
                      return Effect_Ref.modify_(Types_MultiMap.insert(Data_Ord.ordString)(id)(func))(dim);
                  };
              },
              removeMessageListener: function (id) {
                  return function __do() {
                      Effect_Ref.modify_(Types_MultiMap["delete"](Data_Ord.ordString)(id))(dim)();
                      return Effect_Ref.modify_(Data_Map_Internal["delete"](Data_Ord.ordString)(id))(pr)();
                  };
              },
              addRequest: function (id) {
                  return function (req) {
                      return Effect_Ref.modify_(Data_Map_Internal.insert(Data_Ord.ordString)(id)(req))(pr);
                  };
              }
          };
      };
  };
  var messageFoldF = function (msg) {
      return function (acc$prime) {
          return function (func) {
              return function __do() {
                  var acc = acc$prime();
                  var $105 = Data_Either.isRight(acc);
                  if ($105) {
                      return acc$prime();
                  };
                  return func(msg)();
              };
          };
      };
  };
  var listeners = function (v) {
      return v.value1;
  };
  var liftQueryM = (function () {
      var toDefaultQueryConfig = function (c) {
          return {
              ogmiosWs: c.ogmiosWs,
              datumCacheWs: c.datumCacheWs,
              serverConfig: c.serverConfig,
              wallet: c.wallet,
              usedTxOuts: c.usedTxOuts,
              networkId: c.networkId,
              logLevel: c.logLevel
          };
      };
      return Control_Monad_Reader_Trans.withReaderT(toDefaultQueryConfig);
  })();
  var handleAffjaxResponse = function (dictDecodeAeson) {
      return function (v) {
          if (v instanceof Data_Either.Left) {
              return new Data_Either.Left(new ClientHttpError(v.value0));
          };
          if (v instanceof Data_Either.Right) {
              if (v.value0.status < 200 || v.value0.status > 299) {
                  return new Data_Either.Left(new ClientHttpResponseError(v.value0.body));
              };
              if (Data_Boolean.otherwise) {
                  return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(ClientDecodeJsonError.create)(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(Aeson.decodeAeson(dictDecodeAeson))(Aeson.parseJsonStringToAeson)(v.value0.body));
              };
          };
          throw new Error("Failed pattern match at QueryM (line 539, column 1 - line 543, column 31): " + [ v.constructor.name ]);
      };
  };
  var finalizeTx = function (tx) {
      return function (datums) {
          return function (redeemers) {
              return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Logger_Trans.bindLoggerT(Effect_Aff.monadAff)))(Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Control_Monad_Logger_Trans.monadEffectLoggerT(Effect_Aff.monadEffectAff)))(txToHex(tx)))(function (txHex) {
                  return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Logger_Trans.bindLoggerT(Effect_Aff.monadAff)))(Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Control_Monad_Logger_Trans.monadEffectLoggerT(Effect_Aff.monadEffectAff)))(Data_Traversable["for"](Effect.applicativeEffect)(Data_Traversable.traversableArray)(datums)(function (datum) {
                      return Data_Functor.map(Effect.functorEffect)((function () {
                          var $171 = Untagged_Union.asOneOf();
                          return function ($172) {
                              return Types_ByteArray.byteArrayToHex(Serialization.toBytes($171($172)));
                          };
                      })())(Data_Maybe["maybe'"](function (v) {
                          return Effect_Exception["throw"]("Failed to convert plutus data: " + Data_Show.show(Types_Datum.showDatum)(datum));
                      })(Control_Applicative.pure(Effect.applicativeEffect))(Serialization_PlutusData.convertPlutusData(Data_Newtype.unwrap()(datum))));
                  })))(function (encodedDatums) {
                      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Logger_Trans.bindLoggerT(Effect_Aff.monadAff)))(Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Control_Monad_Logger_Trans.monadEffectLoggerT(Effect_Aff.monadEffectAff)))(Data_Functor.map(Effect.functorEffect)((function () {
                          var $173 = Untagged_Union.asOneOf();
                          return function ($174) {
                              return Types_ByteArray.byteArrayToHex(Serialization.toBytes($173($174)));
                          };
                      })())(Serialization_WitnessSet.convertRedeemers(redeemers))))(function (encodedRedeemers) {
                          var body = {
                              tx: txHex,
                              datums: encodedDatums,
                              redeemers: encodedRedeemers
                          };
                          return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Logger_Trans.bindLoggerT(Effect_Aff.monadAff)))(mkServerEndpointUrl("finalize"))(function (url) {
                              return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Logger_Trans.bindLoggerT(Effect_Aff.monadAff)))(Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(Effect_Aff_Class.liftAff(Effect_Aff_Class.monadAffReader(Control_Monad_Logger_Trans.monadAffLoggerT(Effect_Aff_Class.monadAffAff)))(postAeson(url)(Aeson.encodeAeson(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonArray(Aeson.encodeAesonString))(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
                                  reflectSymbol: function () {
                                      return "tx";
                                  }
                              })())({
                                  reflectSymbol: function () {
                                      return "redeemers";
                                  }
                              })())({
                                  reflectSymbol: function () {
                                      return "datums";
                                  }
                              })())())(body))))(Data_Functor.map(Data_Either.functorEither)(function (v) {
                                  return v.body;
                              })))(function (jsonBody) {
                                  return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff)))(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)((function () {
                                      var $175 = Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(Aeson.decodeAeson(decodeAesonFinalizedTrans))(Aeson.parseJsonStringToAeson);
                                      return function ($176) {
                                          return Data_Either.hush($175($176));
                                      };
                                  })())(Data_Either.hush(jsonBody)));
                              });
                          });
                      });
                  });
              });
          };
      };
  };
  var evalTxExecutionUnits = function (tx) {
      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Logger_Trans.bindLoggerT(Effect_Aff.monadAff)))(Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Control_Monad_Logger_Trans.monadEffectLoggerT(Effect_Aff.monadEffectAff)))(txToHex(tx)))(function (txHex) {
          return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Logger_Trans.bindLoggerT(Effect_Aff.monadAff)))(mkServerEndpointUrl("eval-ex-units"))(function (url) {
              return Effect_Aff_Class.liftAff(Effect_Aff_Class.monadAffReader(Control_Monad_Logger_Trans.monadAffLoggerT(Effect_Aff_Class.monadAffAff)))(Data_Functor.mapFlipped(Effect_Aff.functorAff)(postAeson(url)(Aeson.encodeAeson(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
                  reflectSymbol: function () {
                      return "tx";
                  }
              })())())({
                  tx: txHex
              })))(handleAffjaxResponse(Aeson.decodeAesonArray(decodeAesonRdmrPtrExUnits))));
          });
      });
  };
  var dispatchErrorToError = function (v) {
      if (v instanceof JsError) {
          return v.value0;
      };
      if (v instanceof JsonError) {
          return Effect_Exception.error(Data_Show.show(Data_Argonaut_Decode_Error.showJsonDecodeError)(v.value0));
      };
      if (v instanceof FaultError) {
          return Effect_Exception.error("Server responded with `fault`: " + Aeson.stringifyAeson(v.value0));
      };
      throw new Error("Failed pattern match at QueryM (line 826, column 1 - line 826, column 47): " + [ v.constructor.name ]);
  };
  var mkRequest = function (getListeners) {
      return function (getWebSocket) {
          return function (jsonWspCall) {
              return function (getLs) {
                  return function (inp) {
                      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Logger_Trans.bindLoggerT(Effect_Aff.monadAff)))(Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Control_Monad_Logger_Trans.monadEffectLoggerT(Effect_Aff.monadEffectAff)))(QueryM_JsonWsp.buildRequest(jsonWspCall)(inp)))(function (v) {
                          return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Logger_Trans.bindLoggerT(Effect_Aff.monadAff)))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(function (config) {
                              return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Logger_Trans.bindLoggerT(Effect_Aff.monadAff)))(getWebSocket)(function (ws) {
                                  return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Logger_Trans.bindLoggerT(Effect_Aff.monadAff)))(Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(getLs)(getListeners))(function (respLs) {
                                      var affFunc = function (cont) {
                                          var sBody = Aeson.stringifyAeson(Aeson.encodeAeson(Aeson.encodeAesonAeson)(v.body));
                                          return function __do() {
                                              respLs.addMessageListener(v.id)(function (result) {
                                                  return function __do() {
                                                      respLs.removeMessageListener(v.id)();
                                                      return cont(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(dispatchErrorToError)(result))();
                                                  };
                                              })();
                                              respLs.addRequest(v.id)(sBody)();
                                              JsWebSocket["_wsSend"](ws)(Helpers.logString(config.logLevel)(Data_Log_Level.Debug.value))(sBody)();
                                              return function (err) {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(respLs.removeMessageListener(v.id)))(function () {
                                                      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEffect)(err));
                                                  });
                                              };
                                          };
                                      };
                                      return Effect_Aff_Class.liftAff(Effect_Aff_Class.monadAffReader(Control_Monad_Logger_Trans.monadAffLoggerT(Effect_Aff_Class.monadAffAff)))(Effect_Aff.makeAff(affFunc));
                                  });
                              });
                          });
                      });
                  };
              };
          };
      };
  };
  var mkDatumCacheRequest = mkRequest(Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(function ($177) {
      return listeners((function (v) {
          return v.datumCacheWs;
      })($177));
  })(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(function ($178) {
      return underlyingWebSocket((function (v) {
          return v.datumCacheWs;
      })($178));
  })(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))));
  var getDatumByHash = function (hash) {
      return Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(Data_Newtype.unwrap())(mkDatumCacheRequest(QueryM_DatumCacheWsp.getDatumByHashCall)(function (v) {
          return v.getDatumByHash;
      })(hash));
  };
  var mkOgmiosRequest = mkRequest(Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(function ($179) {
      return listeners((function (v) {
          return v.ogmiosWs;
      })($179));
  })(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(function ($180) {
      return underlyingWebSocket((function (v) {
          return v.ogmiosWs;
      })($180));
  })(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))));
  var submitTxOgmios = function (txCbor) {
      return mkOgmiosRequest(QueryM_Ogmios.submitTxCall)(function (v) {
          return v.submit;
      })(txCbor);
  };
  var defaultErr = new Data_Argonaut_Decode_Error.TypeMismatch("default error");
  var defaultMessageListener = function (lvl) {
      return function (dispatchArray) {
          return function (msg) {
              return function __do() {
                  var v = Data_Foldable.foldl(Data_Foldable.foldableArray)(messageFoldF(msg))(Control_Applicative.pure(Effect.applicativeEffect)(new Data_Either.Left(new JsonError(defaultErr))))(dispatchArray)();
                  return Data_Either.either(function (err) {
                      return Control_Applicative.unless(Effect.applicativeEffect)((function () {
                          if (err instanceof JsonError) {
                              return Data_Eq.eq(Data_Argonaut_Decode_Error.eqJsonDecodeError)(err.value0)(defaultErr);
                          };
                          return false;
                      })())(Helpers.logString(lvl)(Data_Log_Level["Error"].value)("unexpected parse error on input: " + msg));
                  })(Control_Category.identity(Control_Category.categoryFn))(v)();
              };
          };
      };
  };
  var datumCacheMessageDispatch = function (v) {
      return [ queryDispatch(QueryM_DatumCacheWsp.decodeAesonGetDatumByHash)(v.getDatumByHashDispatchMap), queryDispatch(QueryM_DatumCacheWsp.decodeAesonGetDatumsByHas)(v.getDatumsByHashesDispatchMap) ];
  };
  var createPendingRequests = Effect_Ref["new"](Data_Map_Internal.empty);
  var createMutableDispatch = Effect_Ref["new"](Types_MultiMap.empty);
  var mkDatumCacheWebSocket$prime = function (lvl) {
      return function (serverCfg) {
          return function (cb) {
              var logger = Helpers.logString(lvl);
              return function __do() {
                  var getDatumByHashDispatchMap = createMutableDispatch();
                  var getDatumsByHashesDispatchMap = createMutableDispatch();
                  var getDatumByHashPendingRequests = createPendingRequests();
                  var getDatumsByHashesPendingRequests = createPendingRequests();
                  var md = datumCacheMessageDispatch({
                      getDatumByHashDispatchMap: getDatumByHashDispatchMap,
                      getDatumsByHashesDispatchMap: getDatumsByHashesDispatchMap
                  });
                  var ws = JsWebSocket["_mkWebSocket"](logger(Data_Log_Level.Debug.value))(QueryM_ServerConfig.mkOgmiosDatumCacheWsUrl(serverCfg))();
                  var sendRequest = JsWebSocket["_wsSend"](ws)(Helpers.logString(lvl)(Data_Log_Level.Debug.value));
                  var onError = function __do() {
                      Helpers.logString(lvl)(Data_Log_Level.Debug.value)("Datum Cache: WS error occured, resending requests")();
                      Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(getDatumByHashPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                      return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(getDatumsByHashesPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                  };
                  JsWebSocket["_onWsConnect"](ws)(function __do() {
                      JsWebSocket["_wsWatch"](ws)(logger(Data_Log_Level.Debug.value))(onError)();
                      JsWebSocket["_onWsMessage"](ws)(logger(Data_Log_Level.Debug.value))(defaultMessageListener(lvl)(md))();
                      JsWebSocket["_onWsError"](ws)(logger(Data_Log_Level["Error"].value))(Data_Function["const"](onError))();
                      return cb(new Data_Either.Right(new WebSocket(ws, {
                          getDatumByHash: mkListenerSet(getDatumByHashDispatchMap)(getDatumByHashPendingRequests),
                          getDatumsByHashes: mkListenerSet(getDatumsByHashesDispatchMap)(getDatumsByHashesPendingRequests)
                      })))();
                  })();
                  return function (err) {
                      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(cb(new Data_Either.Left(err)));
                  };
              };
          };
      };
  };
  var mkDatumCacheWebSocketAff = function (lvl) {
      var $181 = mkDatumCacheWebSocket$prime(lvl);
      return function ($182) {
          return Effect_Aff.makeAff($181($182));
      };
  };
  var mkOgmiosWebSocket$prime = function (lvl) {
      return function (serverCfg) {
          return function (cb) {
              var logger = Helpers.logString(lvl);
              return function __do() {
                  var utxoDispatchMap = createMutableDispatch();
                  var chainTipDispatchMap = createMutableDispatch();
                  var evaluateTxDispatchMap = createMutableDispatch();
                  var getProtocolParametersDispatchMap = createMutableDispatch();
                  var submitDispatchMap = createMutableDispatch();
                  var eraSummariesDispatchMap = createMutableDispatch();
                  var currentEpochDispatchMap = createMutableDispatch();
                  var systemStartDispatchMap = createMutableDispatch();
                  var utxoPendingRequests = createPendingRequests();
                  var chainTipPendingRequests = createPendingRequests();
                  var evaluateTxPendingRequests = createPendingRequests();
                  var getProtocolParametersPendingRequests = createPendingRequests();
                  var submitPendingRequests = createPendingRequests();
                  var eraSummariesPendingRequests = createPendingRequests();
                  var currentEpochPendingRequests = createPendingRequests();
                  var systemStartPendingRequests = createPendingRequests();
                  var md = ogmiosMessageDispatch({
                      utxoDispatchMap: utxoDispatchMap,
                      chainTipDispatchMap: chainTipDispatchMap,
                      evaluateTxDispatchMap: evaluateTxDispatchMap,
                      getProtocolParametersDispatchMap: getProtocolParametersDispatchMap,
                      submitDispatchMap: submitDispatchMap,
                      eraSummariesDispatchMap: eraSummariesDispatchMap,
                      currentEpochDispatchMap: currentEpochDispatchMap,
                      systemStartDispatchMap: systemStartDispatchMap
                  });
                  var ws = JsWebSocket["_mkWebSocket"](logger(Data_Log_Level.Debug.value))(QueryM_ServerConfig.mkWsUrl(serverCfg))();
                  var sendRequest = JsWebSocket["_wsSend"](ws)(Helpers.logString(lvl)(Data_Log_Level.Debug.value));
                  var onError = function __do() {
                      Helpers.logString(lvl)(Data_Log_Level.Debug.value)("WS error occured, resending requests")();
                      Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(utxoPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                      Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(chainTipPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                      Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(evaluateTxPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                      Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(getProtocolParametersPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                      Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(submitPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                      Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(eraSummariesPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                      Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(currentEpochPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                      return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(systemStartPendingRequests))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Map_Internal.foldableMap)(sendRequest))();
                  };
                  JsWebSocket["_onWsConnect"](ws)(function __do() {
                      JsWebSocket["_wsWatch"](ws)(logger(Data_Log_Level.Debug.value))(onError)();
                      JsWebSocket["_onWsMessage"](ws)(logger(Data_Log_Level.Debug.value))(defaultMessageListener(lvl)(md))();
                      JsWebSocket["_onWsError"](ws)(logger(Data_Log_Level["Error"].value))(Data_Function["const"](onError))();
                      return cb(new Data_Either.Right(new WebSocket(ws, {
                          utxo: mkListenerSet(utxoDispatchMap)(utxoPendingRequests),
                          chainTip: mkListenerSet(chainTipDispatchMap)(chainTipPendingRequests),
                          evaluate: mkListenerSet(evaluateTxDispatchMap)(evaluateTxPendingRequests),
                          getProtocolParameters: mkListenerSet(getProtocolParametersDispatchMap)(getProtocolParametersPendingRequests),
                          submit: mkListenerSet(submitDispatchMap)(submitPendingRequests),
                          eraSummaries: mkListenerSet(eraSummariesDispatchMap)(eraSummariesPendingRequests),
                          currentEpoch: mkListenerSet(currentEpochDispatchMap)(currentEpochPendingRequests),
                          systemStart: mkListenerSet(systemStartDispatchMap)(systemStartPendingRequests)
                      })))();
                  })();
                  return function (err) {
                      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(cb(new Data_Either.Left(err)));
                  };
              };
          };
      };
  };
  var mkOgmiosWebSocketAff = function (lvl) {
      var $183 = mkOgmiosWebSocket$prime(lvl);
      return function ($184) {
          return Effect_Aff.makeAff($183($184));
      };
  }; 
  var callCip30Wallet = function (wallet) {
      return function (act) {
          return act(wallet)(wallet.connection);
      };
  };
  var getWalletAddress = Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Logger_Trans.bindLoggerT(Effect_Aff.monadAff)))(Control_Monad_Reader_Class.asks(Control_Monad_Reader_Trans.monadAskReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))(function (v) {
      return v.networkId;
  }))(function (networkId) {
      return withMWalletAff(function (v) {
          if (v instanceof Wallet.Nami) {
              return callCip30Wallet(v.value0)(function (v1) {
                  return v1.getWalletAddress;
              });
          };
          if (v instanceof Wallet.Gero) {
              return callCip30Wallet(v.value0)(function (v1) {
                  return v1.getWalletAddress;
              });
          };
          if (v instanceof Wallet.KeyWallet) {
              return Data_Functor.map(Effect_Aff.functorAff)(Data_Maybe.Just.create)(v.value0.address(networkId));
          };
          throw new Error("Failed pattern match at QueryM (line 285, column 18 - line 288, column 50): " + [ v.constructor.name ]);
      });
  });
  var getWalletCollateral = withMWalletAff(function (v) {
      if (v instanceof Wallet.Nami) {
          return callCip30Wallet(v.value0)(function (v1) {
              return v1.getCollateral;
          });
      };
      if (v instanceof Wallet.Gero) {
          return callCip30Wallet(v.value0)(function (v1) {
              return v1.getCollateral;
          });
      };
      if (v instanceof Wallet.KeyWallet) {
          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Exception["throw"]("Not implemented"));
      };
      throw new Error("Failed pattern match at QueryM (line 291, column 38 - line 294, column 54): " + [ v.constructor.name ]);
  });
  var signTransactionBytes = function (tx) {
      return withMWalletAff(function (v) {
          if (v instanceof Wallet.Nami) {
              return callCip30Wallet(v.value0)(function (nw) {
                  return Data_Function.flip(nw.signTxBytes)(tx);
              });
          };
          if (v instanceof Wallet.Gero) {
              return callCip30Wallet(v.value0)(function (nw) {
                  return Data_Function.flip(nw.signTxBytes)(tx);
              });
          };
          if (v instanceof Wallet.KeyWallet) {
              return Data_Traversable["for"](Effect_Aff.applicativeAff)(Data_Traversable.traversableMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Deserialization_FromBytes.fromBytes(Deserialization_FromBytes.fromBytesTransaction)(Data_Newtype.unwrap()(tx)))(function ($188) {
                  return Data_Either.hush(Deserialization_Transaction.convertTransaction($188));
              }))(Control_Bind.composeKleisli(Effect_Aff.bindAff)(v.value0.signTx)((function () {
                  var $189 = Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
                  var $190 = Data_Functor.map(Effect.functorEffect)((function () {
                      var $192 = Data_Newtype.wrap();
                      var $193 = Untagged_Union.asOneOf();
                      return function ($194) {
                          return $192(Serialization.toBytes($193($194)));
                      };
                  })());
                  return function ($191) {
                      return $189($190(Serialization.convertTransaction($191)));
                  };
              })()));
          };
          throw new Error("Failed pattern match at QueryM (line 305, column 42 - line 318, column 8): " + [ v.constructor.name ]);
      });
  };
  var calculateMinFee = function (v) {
      var witCount = Data_Maybe.maybe(Data_Semiring.one(Data_UInt.uintSemiring))(Data_UInt.fromInt)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Array.length)(v.body.requiredSigners));
      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Logger_Trans.bindLoggerT(Effect_Aff.monadAff)))(Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Control_Monad_Logger_Trans.monadEffectLoggerT(Effect_Aff.monadEffectAff)))(txToHex(v)))(function (txHex) {
          return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Logger_Trans.bindLoggerT(Effect_Aff.monadAff)))(mkServerEndpointUrl("fees"))(function (url) {
              return Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(Effect_Aff_Class.liftAff(Effect_Aff_Class.monadAffReader(Control_Monad_Logger_Trans.monadAffLoggerT(Effect_Aff_Class.monadAffAff)))(postAeson(url)(Aeson.encodeAeson(Aeson.encodeAesonRecord(Aeson.gEncodeAesonCons(Aeson.encodeAesonUInt)(Aeson.gEncodeAesonCons(Aeson.encodeAesonString)(Aeson.gEncodeAesonNil)({
                  reflectSymbol: function () {
                      return "tx";
                  }
              })())({
                  reflectSymbol: function () {
                      return "count";
                  }
              })())())({
                  count: witCount,
                  tx: txHex
              }))))((function () {
                  var $195 = Data_Functor.map(Data_Either.functorEither)((function () {
                      var $198 = Data_Newtype.wrap();
                      var $199 = Data_Newtype.unwrap();
                      return function ($200) {
                          return $198($199($200));
                      };
                  })());
                  var $196 = handleAffjaxResponse(decodeAesonFeeEstimate);
                  return function ($197) {
                      return $195($196($197));
                  };
              })());
          });
      });
  };
  var applyArgs = function () {
      return function (dictDecodeAeson) {
          return function (script) {
              return function (args) {
                  var plutusDataToAeson = (function () {
                      var $201 = Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                          var $203 = Aeson.encodeAeson(Aeson.encodeAesonString);
                          var $204 = Untagged_Union.asOneOf();
                          return function ($205) {
                              return $203(Types_ByteArray.byteArrayToHex(Serialization.toBytes($204($205))));
                          };
                      })());
                      return function ($202) {
                          return $201(Serialization_PlutusData.convertPlutusData($202));
                      };
                  })();
                  var v = Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(plutusDataToAeson)(args);
                  if (v instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff)))(new Data_Either.Left(new ClientEncodingError("Failed to convert script args")));
                  };
                  if (v instanceof Data_Maybe.Just) {
                      var reqBody = Aeson.encodeAeson(Aeson.encodeAesonObject(Aeson.encodeAesonAeson))(Foreign_Object.fromFoldable(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("script", scriptToAeson(Data_Newtype.unwrap()(script))), new Data_Tuple.Tuple("args", Aeson.encodeAeson(Aeson.encodeAesonArray(Aeson.encodeAesonAeson))(v.value0)) ]));
                      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Logger_Trans.bindLoggerT(Effect_Aff.monadAff)))(mkServerEndpointUrl("apply-args"))(function (url) {
                          return Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(Effect_Aff_Class.liftAff(Effect_Aff_Class.monadAffReader(Control_Monad_Logger_Trans.monadAffLoggerT(Effect_Aff_Class.monadAffAff)))(postAeson(url)(reqBody)))((function () {
                              var $206 = Data_Functor.map(Data_Either.functorEither)(Data_Newtype.wrap());
                              var $207 = handleAffjaxResponse(Types_Scripts.decodeAesonPlutusScript);
                              return function ($208) {
                                  return $206($207($208));
                              };
                          })());
                      });
                  };
                  throw new Error("Failed pattern match at QueryM (line 510, column 25 - line 522, column 44): " + [ v.constructor.name ]);
              };
          };
      };
  };
  exports["applyArgs"] = applyArgs;
  exports["calculateMinFee"] = calculateMinFee;
  exports["evalTxExecutionUnits"] = evalTxExecutionUnits;
  exports["finalizeTx"] = finalizeTx;
  exports["getDatumByHash"] = getDatumByHash;
  exports["getWalletAddress"] = getWalletAddress;
  exports["getWalletCollateral"] = getWalletCollateral;
  exports["liftQueryM"] = liftQueryM;
  exports["mkDatumCacheWebSocketAff"] = mkDatumCacheWebSocketAff;
  exports["mkOgmiosRequest"] = mkOgmiosRequest;
  exports["mkOgmiosWebSocketAff"] = mkOgmiosWebSocketAff;
  exports["signTransactionBytes"] = signTransactionBytes;
  exports["submitTxOgmios"] = submitTxOgmios;
  exports["showClientError"] = showClientError;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Types.UsedTxOuts"] = $PS["Types.UsedTxOuts"] || {};
  var exports = $PS["Types.UsedTxOuts"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Ref = $PS["Effect.Ref"];                              
  var UsedTxOuts = function (x) {
      return x;
  };
  var newUsedTxOuts = function (dictMonadEffect) {
      return Data_Functor.map((((dictMonadEffect.Monad0()).Bind1()).Apply0()).Functor0())(UsedTxOuts)(Effect_Class.liftEffect(dictMonadEffect)(Effect_Ref["new"](Data_Map_Internal.empty)));
  };
  exports["newUsedTxOuts"] = newUsedTxOuts;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Contract.Monad"] = $PS["Contract.Monad"] || {};
  var exports = $PS["Contract.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Logger_Class = $PS["Control.Monad.Logger.Class"];
  var Control_Monad_Logger_Trans = $PS["Control.Monad.Logger.Trans"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Log_Level = $PS["Data.Log.Level"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Helpers = $PS["Helpers"];
  var QueryM = $PS["QueryM"];
  var QueryM_ServerConfig = $PS["QueryM.ServerConfig"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Types_UsedTxOuts = $PS["Types.UsedTxOuts"];
  var Wallet = $PS["Wallet"];                
  var ContractConfig = function (x) {
      return x;
  };                                                                                                                                    
  var monadLoggerContract = Control_Monad_Logger_Class.monadLoggerReaderT(Control_Monad_Logger_Trans.monadLoggerLoggerT(Effect_Aff.monadEffectAff)); 
  var monadEffectContract = Control_Monad_Reader_Trans.monadEffectReader(Control_Monad_Logger_Trans.monadEffectLoggerT(Effect_Aff.monadEffectAff));
  var monadContract = Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff));
  var monadAskContractConfigCon = {
      ask: Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(ContractConfig)(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))),
      Monad0: function () {
          return monadContract;
      }
  };
  var monadAffContract = Effect_Aff_Class.monadAffReader(Control_Monad_Logger_Trans.monadAffLoggerT(Effect_Aff_Class.monadAffAff));
  var functorContract = Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff));
  var bindContract = Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Logger_Trans.bindLoggerT(Effect_Aff.monadAff));   
  var applicativeContract = Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff));
  var wrapContract = (function () {
      var $38 = Data_Newtype.wrap();
      return function ($39) {
          return $38(QueryM.liftQueryM($39));
      };
  })();
  var throwContractError = function (dictShow) {
      var $40 = Effect_Class.liftEffect(monadEffectContract);
      var $41 = Data_Show.show(dictShow);
      return function ($42) {
          return $40(Effect_Exception["throw"]($41($42)));
      };
  };
  var runContract = function (config) {
      var cfg = Data_Newtype.unwrap()(config);
      var printLog = Helpers.logWithLevel(Effect_Aff.monadEffectAff)(cfg.logLevel);
      var $43 = Data_Function.flip(Control_Monad_Logger_Trans.runLoggerT)(printLog);
      var $44 = Data_Function.flip(Control_Monad_Reader_Trans.runReaderT)(cfg);
      var $45 = Data_Newtype.unwrap();
      return function ($46) {
          return $43($44($45($46)));
      };
  };
  var runContract_ = function (config) {
      var $47 = Data_Functor["void"](Effect_Aff.functorAff);
      var $48 = runContract(config);
      return function ($49) {
          return $47($48($49));
      };
  };
  var logInfo$prime = function (dictMonadLogger) {
      return Control_Monad_Logger_Class.info(dictMonadLogger)(Data_Map_Internal.empty);
  };
  var liftContractM = function (str) {
      return Data_Maybe.maybe(Effect_Class.liftEffect(monadEffectContract)(Effect_Exception["throw"](str)))(Control_Applicative.pure(applicativeContract));
  };
  var liftedM = function (str) {
      return function (cm) {
          return Control_Bind.bind(bindContract)(cm)(liftContractM(str));
      };
  };
  var liftContractE = function (dictShow) {
      return Data_Either.either(throwContractError(dictShow))(Control_Applicative.pure(applicativeContract));
  };
  var liftedE = function (dictShow) {
      return Control_Bind.bindFlipped(bindContract)(liftContractE(dictShow));
  };
  var liftContractAffM = function (str) {
      var $52 = liftedM(str);
      var $53 = Effect_Aff_Class.liftAff(monadAffContract);
      return function ($54) {
          return $52($53($54));
      };
  };
  var configWithLogLevel = function (networkId) {
      return function (wallet) {
          return function (logLevel) {
              return Control_Bind.bind(Effect_Aff.bindAff)(QueryM.mkOgmiosWebSocketAff(logLevel)(QueryM_ServerConfig.defaultOgmiosWsConfig))(function (ogmiosWs) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(QueryM.mkDatumCacheWebSocketAff(logLevel)(QueryM_ServerConfig.defaultDatumCacheWsConfig))(function (datumCacheWs) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Types_UsedTxOuts.newUsedTxOuts(Effect_Aff.monadEffectAff))(function (usedTxOuts) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                              ogmiosWs: ogmiosWs,
                              datumCacheWs: datumCacheWs,
                              wallet: new Data_Maybe.Just(wallet),
                              usedTxOuts: usedTxOuts,
                              serverConfig: QueryM_ServerConfig.defaultServerConfig,
                              networkId: networkId,
                              logLevel: logLevel
                          });
                      });
                  });
              });
          };
      };
  }; 
  var traceTestnetContractConfig = Control_Bind.bind(Effect_Aff.bindAff)(Wallet.mkNamiWalletAff)(function (wallet) {
      return configWithLogLevel(Serialization_Address.TestnetId.value)(wallet)(Data_Log_Level.Trace.value);
  });
  exports["ContractConfig"] = ContractConfig;
  exports["liftContractAffM"] = liftContractAffM;
  exports["liftContractM"] = liftContractM;
  exports["liftedE"] = liftedE;
  exports["liftedM"] = liftedM;
  exports["logInfo'"] = logInfo$prime;
  exports["runContract_"] = runContract_;
  exports["traceTestnetContractConfig"] = traceTestnetContractConfig;
  exports["wrapContract"] = wrapContract;
  exports["functorContract"] = functorContract;
  exports["applicativeContract"] = applicativeContract;
  exports["bindContract"] = bindContract;
  exports["monadAffContract"] = monadAffContract;
  exports["monadLoggerContract"] = monadLoggerContract;
  exports["monadAskContractConfigCon"] = monadAskContractConfigCon;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Contract.Scripts"] = $PS["Contract.Scripts"] || {};
  var exports = $PS["Contract.Scripts"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var QueryM = $PS["QueryM"];                                            
  var applyArgs = function () {
      return function (dictDecodeAeson) {
          return function (a) {
              var $2 = QueryM.applyArgs()(dictDecodeAeson)(a);
              return function ($3) {
                  return Contract_Monad.wrapContract($2($3));
              };
          };
      };
  };
  var applyArgsM = function () {
      return function (dictDecodeAeson) {
          return function (a) {
              var $4 = Data_Functor.map(Contract_Monad.functorContract)(Data_Either.hush);
              var $5 = applyArgs()(dictDecodeAeson)(a);
              return function ($6) {
                  return $4($5($6));
              };
          };
      };
  };
  exports["applyArgsM"] = applyArgsM;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Time.Duration"] = $PS["Data.Time.Duration"] || {};
  var exports = $PS["Data.Time.Duration"];
  var Control_Category = $PS["Control.Category"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Show = $PS["Data.Show"];                
  var Seconds = function (x) {
      return x;
  };
  var Minutes = function (x) {
      return x;
  };
  var Milliseconds = function (x) {
      return x;
  };
  var toDuration = function (dict) {
      return dict.toDuration;
  };
  var showSeconds = {
      show: function (v) {
          return "(Seconds " + (Data_Show.show(Data_Show.showNumber)(v) + ")");
      }
  };
  var semigroupMilliseconds = {
      append: function (v) {
          return function (v1) {
              return v + v1;
          };
      }
  };                                  
  var ordMilliseconds = Data_Ord.ordNumber;
  var fromDuration = function (dict) {
      return dict.fromDuration;
  };
  var negateDuration = function (dictDuration) {
      var $43 = toDuration(dictDuration);
      var $44 = Data_Newtype.over()()(Milliseconds)(Data_Ring.negate(Data_Ring.ringNumber));
      var $45 = fromDuration(dictDuration);
      return function ($46) {
          return $43($44($45($46)));
      };
  };                            
  var durationSeconds = {
      fromDuration: Data_Newtype.over()()(Seconds)(function (v) {
          return v * 1000.0;
      }),
      toDuration: Data_Newtype.over()()(Milliseconds)(function (v) {
          return v / 1000.0;
      })
  };
  var durationMinutes = {
      fromDuration: Data_Newtype.over()()(Minutes)(function (v) {
          return v * 60000.0;
      }),
      toDuration: Data_Newtype.over()()(Milliseconds)(function (v) {
          return v / 60000.0;
      })
  };
  var durationMilliseconds = {
      fromDuration: Control_Category.identity(Control_Category.categoryFn),
      toDuration: Control_Category.identity(Control_Category.categoryFn)
  };
  var convertDuration = function (dictDuration) {
      return function (dictDuration1) {
          var $47 = toDuration(dictDuration1);
          var $48 = fromDuration(dictDuration);
          return function ($49) {
              return $47($48($49));
          };
      };
  };
  exports["fromDuration"] = fromDuration;
  exports["convertDuration"] = convertDuration;
  exports["negateDuration"] = negateDuration;
  exports["ordMilliseconds"] = ordMilliseconds;
  exports["semigroupMilliseconds"] = semigroupMilliseconds;
  exports["showSeconds"] = showSeconds;
  exports["durationMilliseconds"] = durationMilliseconds;
  exports["durationSeconds"] = durationSeconds;
  exports["durationMinutes"] = durationMinutes;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Plutus.Types.AssocMap"] = $PS["Plutus.Types.AssocMap"] || {};
  var exports = $PS["Plutus.Types.AssocMap"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_These = $PS["Data.These"];
  var Data_Tuple = $PS["Data.Tuple"];
  var functorMap = {
      map: function (f) {
          return function (v) {
              return Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)(f))(v);
          };
      }
  };
  var singleton = function (k) {
      return function (v) {
          return Data_Array.singleton(new Data_Tuple.Tuple(k, v));
      };
  };
  var lookup = function (dictEq) {
      return function (k) {
          return function (v) {
              return Data_Foldable.lookup(Data_Foldable.foldableArray)(dictEq)(k)(v);
          };
      };
  };
  var union = function (dictEq) {
      return function (v) {
          return function (v1) {
              var rs$prime = Data_Array.filter(function (v2) {
                  return !Data_Array.any(function (v3) {
                      return Data_Eq.eq(dictEq)(v3.value0)(v2.value0);
                  })(v);
              })(v1);
              var rs$prime$prime = Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)(Data_These.That.create))(rs$prime);
              var f = function (a) {
                  return function (v2) {
                      if (v2 instanceof Data_Maybe.Nothing) {
                          return new Data_These.This(a);
                      };
                      if (v2 instanceof Data_Maybe.Just) {
                          return new Data_These.Both(a, v2.value0);
                      };
                      throw new Error("Failed pattern match at Plutus.Types.AssocMap (line 131, column 11 - line 133, column 25): " + [ v2.constructor.name ]);
                  };
              };
              var ls$prime = Data_Functor.map(Data_Functor.functorArray)(function (v2) {
                  return new Data_Tuple.Tuple(v2.value0, f(v2.value1)(lookup(dictEq)(v2.value0)(v1)));
              })(v);
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(ls$prime)(rs$prime$prime);
          };
      };
  };
  var filter = function (f) {
      return function (v) {
          return Data_Array.filter(function ($141) {
              return f(Data_Tuple.snd($141));
          })(v);
      };
  };
  exports["lookup"] = lookup;
  exports["singleton"] = singleton;
  exports["union"] = union;
  exports["functorMap"] = functorMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Plutus.Types.CurrencySymbol"] = $PS["Plutus.Types.CurrencySymbol"] || {};
  var exports = $PS["Plutus.Types.CurrencySymbol"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Serialization_Hash = $PS["Serialization.Hash"];
  var Types_ByteArray = $PS["Types.ByteArray"];           
  var eqCurrencySymbol = Types_ByteArray.eqByteArray;
  var getCurrencySymbol = function (v) {
      return v;
  };
  var adaSymbol = Data_Monoid.mempty(Types_ByteArray.monoidByteArray);
  var mkCurrencySymbol = function (byteArr) {
      if (Data_Eq.eq(Types_ByteArray.eqByteArray)(byteArr)(Data_Monoid.mempty(Types_ByteArray.monoidByteArray))) {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(adaSymbol);
      };
      if (Data_Boolean.otherwise) {
          return Data_Functor.voidLeft(Data_Maybe.functorMaybe)(Serialization_Hash.scriptHashFromBytes(Data_Newtype.wrap()(byteArr)))(byteArr);
      };
      throw new Error("Failed pattern match at Plutus.Types.CurrencySymbol (line 71, column 1 - line 71, column 54): " + [ byteArr.constructor.name ]);
  };
  exports["adaSymbol"] = adaSymbol;
  exports["getCurrencySymbol"] = getCurrencySymbol;
  exports["mkCurrencySymbol"] = mkCurrencySymbol;
  exports["eqCurrencySymbol"] = eqCurrencySymbol;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Plutus.Types.Value"] = $PS["Plutus.Types.Value"] || {};
  var exports = $PS["Plutus.Types.Value"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_These = $PS["Data.These"];
  var Plutus_Types_AssocMap = $PS["Plutus.Types.AssocMap"];
  var Plutus_Types_CurrencySymbol = $PS["Plutus.Types.CurrencySymbol"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_TokenName = $PS["Types.TokenName"];                
  var Value = function (x) {
      return x;
  };
  var unionVal = function (v) {
      return function (v1) {
          return Data_Functor.map(Plutus_Types_AssocMap.functorMap)(Data_These.these(Data_Functor.map(Plutus_Types_AssocMap.functorMap)(Data_These.This.create))(Data_Functor.map(Plutus_Types_AssocMap.functorMap)(Data_These.That.create))(Plutus_Types_AssocMap.union(Types_TokenName.eqTokenName)))(Plutus_Types_AssocMap.union(Plutus_Types_CurrencySymbol.eqCurrencySymbol)(v)(v1));
      };
  };
  var unionWith = function (f) {
      return function (lhs) {
          var $90 = Data_Functor.map(Plutus_Types_AssocMap.functorMap)(Data_Functor.map(Plutus_Types_AssocMap.functorMap)(Data_These.these(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn))(f)));
          var $91 = unionVal(lhs);
          return function ($92) {
              return Value($90($91($92)));
          };
      };
  };
  var semigroupValue = {
      append: unionWith(Data_Semiring.add(Data_BigInt.semiringBigInt))
  };
  var monoidValue = {
      mempty: [  ],
      Semigroup0: function () {
          return semigroupValue;
      }
  };
  var singleton = function (cs) {
      return function (tn) {
          var $93 = Plutus_Types_AssocMap.singleton(cs);
          var $94 = Plutus_Types_AssocMap.singleton(tn);
          return function ($95) {
              return Value($93($94($95)));
          };
      };
  };
  var singleton$prime = function (cs) {
      return function (tn) {
          return function (amount) {
              if (Data_Eq.eq(Types_ByteArray.eqByteArray)(cs)(Data_Monoid.mempty(Types_ByteArray.monoidByteArray)) && Data_Eq.notEq(Types_ByteArray.eqByteArray)(tn)(Data_Monoid.mempty(Types_ByteArray.monoidByteArray))) {
                  return Data_Maybe.Nothing.value;
              };
              if (Data_Boolean.otherwise) {
                  return Control_Apply.lift3(Data_Maybe.applyMaybe)(singleton)(Plutus_Types_CurrencySymbol.mkCurrencySymbol(cs))(Types_TokenName.mkTokenName(tn))(Control_Applicative.pure(Data_Maybe.applicativeMaybe)(amount));
              };
              throw new Error("Failed pattern match at Plutus.Types.Value (line 156, column 1 - line 156, column 62): " + [ cs.constructor.name, tn.constructor.name, amount.constructor.name ]);
          };
      };
  };
  var lovelaceValueOf = singleton(Plutus_Types_CurrencySymbol.adaSymbol)(Types_TokenName.adaToken);
  var getValue = function (v) {
      return v;
  };
  exports["getValue"] = getValue;
  exports["lovelaceValueOf"] = lovelaceValueOf;
  exports["singleton'"] = singleton$prime;
  exports["semigroupValue"] = semigroupValue;
  exports["monoidValue"] = monoidValue;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["ToData"] = $PS["ToData"] || {};
  var exports = $PS["ToData"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Types_PlutusData = $PS["Types.PlutusData"];
  var toDataUnit = {
      toData: function (v) {
          return new Types_PlutusData.Constr(Data_Semiring.zero(Data_BigInt.semiringBigInt), [  ]);
      }
  };
  var toDataBigInt = {
      toData: Types_PlutusData.Integer.create
  };
  var toData = function (dict) {
      return dict.toData;
  };
  exports["toData"] = toData;
  exports["toDataUnit"] = toDataUnit;
  exports["toDataBigInt"] = toDataBigInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Lens.Getter"] = $PS["Data.Lens.Getter"] || {};
  var exports = $PS["Data.Lens.Getter"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Newtype = $PS["Data.Newtype"];                                    
  var view = function (l) {
      return Data_Newtype.unwrap()(l(Control_Category.identity(Control_Category.categoryFn)));
  };
  var viewOn = function (s) {
      return function (l) {
          return view(l)(s);
      };
  };
  var use = function (dictMonadState) {
      return function (p) {
          return Control_Monad_State_Class.gets(dictMonadState)(function (v) {
              return viewOn(v)(p);
          });
      };
  };
  var to = function (f) {
      return function (p) {
          var $3 = Data_Newtype.unwrap()(p);
          return function ($4) {
              return $3(f($4));
          };
      };
  };
  exports["viewOn"] = viewOn;
  exports["to"] = to;
  exports["use"] = use;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Lens.Internal.Forget"] = $PS["Data.Lens.Internal.Forget"] || {};
  var exports = $PS["Data.Lens.Internal.Forget"];
  var Data_Tuple = $PS["Data.Tuple"];
  var profunctorForget = {
      dimap: function (f) {
          return function (v) {
              return function (v1) {
                  return function ($24) {
                      return v1(f($24));
                  };
              };
          };
      }
  };
  var strongForget = {
      first: function (v) {
          return function ($25) {
              return v(Data_Tuple.fst($25));
          };
      },
      second: function (v) {
          return function ($26) {
              return v(Data_Tuple.snd($26));
          };
      },
      Profunctor0: function () {
          return profunctorForget;
      }
  };
  exports["strongForget"] = strongForget;
})(PS);
(function(exports) {
  /* global require exports BROWSER_RUNTIME */

  const Blake2bWasm = require('blake2b-wasm');
  const SHA256 = require('jssha/dist/sha256');
  const SHA3 = require('jssha/dist/sha3');

  let lib;
  if (typeof BROWSER_RUNTIME != 'undefined' && BROWSER_RUNTIME) {
    lib = require('@emurgo/cardano-serialization-lib-browser');
  } else {
    lib = require('@emurgo/cardano-serialization-lib-nodejs');
  }

  // -----------------------------------------------------------------------------
  // blake2b256Hash, blake2b256HashHex, hashPlutusData, hashPlutusScript
  // -----------------------------------------------------------------------------

  const DIGEST_LENGTH_256 = 32;
  const DIGEST_LENGTH_224 = 28;
  const DIGEST_ENCODING_BINARY = 'binary';
  const DIGEST_ENCODING_HEX = 'hex';

  const blake2bHash = bytesToHash => digestLength => digestEncoding => {
    return new Promise((resolve, reject) => {
      Blake2bWasm.ready(error => {
        if (error || !Blake2bWasm.SUPPORTED) {
          reject(new Error('Failed to calculate Blake2b hash'));
        } else {
          const digest = Blake2bWasm(digestLength)
            .update(Buffer.from(bytesToHash))
            .digest(digestEncoding);
          resolve(digest);
        }
      })
    })
  };

  exports.hashPlutusData = plutusData => {
    return lib.hash_plutus_data(plutusData).to_bytes();
  };

  exports.hashPlutusScript = plutusScriptBytes => () => {
    // set Plutus language namespace byte
    const bytes = new Uint8Array([0x1, ...plutusScriptBytes]);
    return blake2bHash(bytes)(DIGEST_LENGTH_224)(DIGEST_ENCODING_BINARY);
  };

  // -----------------------------------------------------------------------------
  // sha256Hash, sha256HashHex, sha3_256Hash, sha3_256HashHex
  // -----------------------------------------------------------------------------

  const SHA256_HASH_VARIANT = 'SHA-256';
  const SHA3_256_HASH_VARIANT = 'SHA3-256';
  const UINT8ARRAY_FORMAT = 'UINT8ARRAY';
  const HEX_FORMAT = 'HEX';
})(PS["Hashing"] = PS["Hashing"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Hashing"] = $PS["Hashing"] || {};
  var exports = $PS["Hashing"];
  var $foreign = $PS["Hashing"];
  var Control_Promise = $PS["Control.Promise"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Serialization_Hash = $PS["Serialization.Hash"];
  var Serialization_PlutusData = $PS["Serialization.PlutusData"];                
  var plutusScriptHash = (function () {
      var $0 = Data_Functor.map(Effect_Aff.functorAff)((function () {
          var $2 = Data_Newtype.wrap();
          return function ($3) {
              return Serialization_Hash.scriptHashFromBytes($2($3));
          };
      })());
      return function ($1) {
          return $0(Control_Promise.toAffE($foreign.hashPlutusScript($1)));
      };
  })();
  var datumHash = (function () {
      var $4 = Data_Functor.map(Data_Maybe.functorMaybe)((function () {
          var $7 = Data_Newtype.wrap();
          return function ($8) {
              return $7($foreign.hashPlutusData($8));
          };
      })());
      var $5 = Data_Newtype.unwrap();
      return function ($6) {
          return $4(Serialization_PlutusData.convertPlutusData($5($6)));
      };
  })();
  exports["datumHash"] = datumHash;
  exports["plutusScriptHash"] = plutusScriptHash;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Plutus.Types.Credential"] = $PS["Plutus.Types.Credential"] || {};
  var exports = $PS["Plutus.Types.Credential"];            
  var PubKeyCredential = (function () {
      function PubKeyCredential(value0) {
          this.value0 = value0;
      };
      PubKeyCredential.create = function (value0) {
          return new PubKeyCredential(value0);
      };
      return PubKeyCredential;
  })();
  var ScriptCredential = (function () {
      function ScriptCredential(value0) {
          this.value0 = value0;
      };
      ScriptCredential.create = function (value0) {
          return new ScriptCredential(value0);
      };
      return ScriptCredential;
  })();
  var StakingHash = (function () {
      function StakingHash(value0) {
          this.value0 = value0;
      };
      StakingHash.create = function (value0) {
          return new StakingHash(value0);
      };
      return StakingHash;
  })();
  var StakingPtr = (function () {
      function StakingPtr(value0) {
          this.value0 = value0;
      };
      StakingPtr.create = function (value0) {
          return new StakingPtr(value0);
      };
      return StakingPtr;
  })();
  exports["PubKeyCredential"] = PubKeyCredential;
  exports["ScriptCredential"] = ScriptCredential;
  exports["StakingHash"] = StakingHash;
  exports["StakingPtr"] = StakingPtr;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Plutus.Types.Address"] = $PS["Plutus.Types.Address"] || {};
  var exports = $PS["Plutus.Types.Address"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Plutus_Types_Credential = $PS["Plutus.Types.Credential"];
  var AddressWithNetworkTag = function (x) {
      return x;
  };
  var scriptHashAddress = function (vh) {
      return Data_Newtype.wrap()({
          addressCredential: new Plutus_Types_Credential.ScriptCredential(vh),
          addressStakingCredential: Data_Maybe.Nothing.value
      });
  };
  exports["AddressWithNetworkTag"] = AddressWithNetworkTag;
  exports["scriptHashAddress"] = scriptHashAddress;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Plutus.Types.AddressHeaderType"] = $PS["Plutus.Types.AddressHeaderType"] || {};
  var exports = $PS["Plutus.Types.AddressHeaderType"];
  var Data_Bounded_Generic = $PS["Data.Bounded.Generic"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Enum_Generic = $PS["Data.Enum.Generic"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_UInt = $PS["Data.UInt"];                
  var PaymentKeyHashStakeKeyHash = (function () {
      function PaymentKeyHashStakeKeyHash() {

      };
      PaymentKeyHashStakeKeyHash.value = new PaymentKeyHashStakeKeyHash();
      return PaymentKeyHashStakeKeyHash;
  })();
  var ScriptHashStakeKeyHash = (function () {
      function ScriptHashStakeKeyHash() {

      };
      ScriptHashStakeKeyHash.value = new ScriptHashStakeKeyHash();
      return ScriptHashStakeKeyHash;
  })();
  var PaymentKeyHashScriptHash = (function () {
      function PaymentKeyHashScriptHash() {

      };
      PaymentKeyHashScriptHash.value = new PaymentKeyHashScriptHash();
      return PaymentKeyHashScriptHash;
  })();
  var ScriptHashScriptHash = (function () {
      function ScriptHashScriptHash() {

      };
      ScriptHashScriptHash.value = new ScriptHashScriptHash();
      return ScriptHashScriptHash;
  })();
  var PaymentKeyHashPointer = (function () {
      function PaymentKeyHashPointer() {

      };
      PaymentKeyHashPointer.value = new PaymentKeyHashPointer();
      return PaymentKeyHashPointer;
  })();
  var ScriptHashPointer = (function () {
      function ScriptHashPointer() {

      };
      ScriptHashPointer.value = new ScriptHashPointer();
      return ScriptHashPointer;
  })();
  var PaymentKeyHash = (function () {
      function PaymentKeyHash() {

      };
      PaymentKeyHash.value = new PaymentKeyHash();
      return PaymentKeyHash;
  })();
  var ScriptHash = (function () {
      function ScriptHash() {

      };
      ScriptHash.value = new ScriptHash();
      return ScriptHash;
  })();
  var genericAddressHeaderType_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return PaymentKeyHashStakeKeyHash.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return ScriptHashStakeKeyHash.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
              return PaymentKeyHashScriptHash.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
              return ScriptHashScriptHash.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
              return PaymentKeyHashPointer.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
              return ScriptHashPointer.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))) {
              return PaymentKeyHash.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr)))))) {
              return ScriptHash.value;
          };
          throw new Error("Failed pattern match at Plutus.Types.AddressHeaderType (line 37, column 1 - line 37, column 44): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof PaymentKeyHashStakeKeyHash) {
              return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
          };
          if (x instanceof ScriptHashStakeKeyHash) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
          };
          if (x instanceof PaymentKeyHashScriptHash) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
          };
          if (x instanceof ScriptHashScriptHash) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))));
          };
          if (x instanceof PaymentKeyHashPointer) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))));
          };
          if (x instanceof ScriptHashPointer) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))));
          };
          if (x instanceof PaymentKeyHash) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))));
          };
          if (x instanceof ScriptHash) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)))))));
          };
          throw new Error("Failed pattern match at Plutus.Types.AddressHeaderType (line 37, column 1 - line 37, column 44): " + [ x.constructor.name ]);
      }
  };
  var eqAddressHeaderType = {
      eq: function (x) {
          return function (y) {
              if (x instanceof PaymentKeyHashStakeKeyHash && y instanceof PaymentKeyHashStakeKeyHash) {
                  return true;
              };
              if (x instanceof ScriptHashStakeKeyHash && y instanceof ScriptHashStakeKeyHash) {
                  return true;
              };
              if (x instanceof PaymentKeyHashScriptHash && y instanceof PaymentKeyHashScriptHash) {
                  return true;
              };
              if (x instanceof ScriptHashScriptHash && y instanceof ScriptHashScriptHash) {
                  return true;
              };
              if (x instanceof PaymentKeyHashPointer && y instanceof PaymentKeyHashPointer) {
                  return true;
              };
              if (x instanceof ScriptHashPointer && y instanceof ScriptHashPointer) {
                  return true;
              };
              if (x instanceof PaymentKeyHash && y instanceof PaymentKeyHash) {
                  return true;
              };
              if (x instanceof ScriptHash && y instanceof ScriptHash) {
                  return true;
              };
              return false;
          };
      }
  };
  var ordAddressHeaderType = {
      compare: function (x) {
          return function (y) {
              if (x instanceof PaymentKeyHashStakeKeyHash && y instanceof PaymentKeyHashStakeKeyHash) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof PaymentKeyHashStakeKeyHash) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof PaymentKeyHashStakeKeyHash) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof ScriptHashStakeKeyHash && y instanceof ScriptHashStakeKeyHash) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof ScriptHashStakeKeyHash) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof ScriptHashStakeKeyHash) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof PaymentKeyHashScriptHash && y instanceof PaymentKeyHashScriptHash) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof PaymentKeyHashScriptHash) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof PaymentKeyHashScriptHash) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof ScriptHashScriptHash && y instanceof ScriptHashScriptHash) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof ScriptHashScriptHash) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof ScriptHashScriptHash) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof PaymentKeyHashPointer && y instanceof PaymentKeyHashPointer) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof PaymentKeyHashPointer) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof PaymentKeyHashPointer) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof ScriptHashPointer && y instanceof ScriptHashPointer) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof ScriptHashPointer) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof ScriptHashPointer) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof PaymentKeyHash && y instanceof PaymentKeyHash) {
                  return Data_Ordering.EQ.value;
              };
              if (x instanceof PaymentKeyHash) {
                  return Data_Ordering.LT.value;
              };
              if (y instanceof PaymentKeyHash) {
                  return Data_Ordering.GT.value;
              };
              if (x instanceof ScriptHash && y instanceof ScriptHash) {
                  return Data_Ordering.EQ.value;
              };
              throw new Error("Failed pattern match at Plutus.Types.AddressHeaderType (line 36, column 1 - line 36, column 38): " + [ x.constructor.name, y.constructor.name ]);
          };
      },
      Eq0: function () {
          return eqAddressHeaderType;
      }
  };
  var enumAddressHeaderType = {
      pred: Data_Enum_Generic.genericPred(genericAddressHeaderType_)(Data_Enum_Generic.genericEnumSum(Data_Enum_Generic.genericEnumConstructor(Data_Enum_Generic.genericEnumNoArguments))(Data_Bounded_Generic.genericTopConstructor(Data_Bounded_Generic.genericTopNoArguments))(Data_Enum_Generic.genericEnumSum(Data_Enum_Generic.genericEnumConstructor(Data_Enum_Generic.genericEnumNoArguments))(Data_Bounded_Generic.genericTopConstructor(Data_Bounded_Generic.genericTopNoArguments))(Data_Enum_Generic.genericEnumSum(Data_Enum_Generic.genericEnumConstructor(Data_Enum_Generic.genericEnumNoArguments))(Data_Bounded_Generic.genericTopConstructor(Data_Bounded_Generic.genericTopNoArguments))(Data_Enum_Generic.genericEnumSum(Data_Enum_Generic.genericEnumConstructor(Data_Enum_Generic.genericEnumNoArguments))(Data_Bounded_Generic.genericTopConstructor(Data_Bounded_Generic.genericTopNoArguments))(Data_Enum_Generic.genericEnumSum(Data_Enum_Generic.genericEnumConstructor(Data_Enum_Generic.genericEnumNoArguments))(Data_Bounded_Generic.genericTopConstructor(Data_Bounded_Generic.genericTopNoArguments))(Data_Enum_Generic.genericEnumSum(Data_Enum_Generic.genericEnumConstructor(Data_Enum_Generic.genericEnumNoArguments))(Data_Bounded_Generic.genericTopConstructor(Data_Bounded_Generic.genericTopNoArguments))(Data_Enum_Generic.genericEnumSum(Data_Enum_Generic.genericEnumConstructor(Data_Enum_Generic.genericEnumNoArguments))(Data_Bounded_Generic.genericTopConstructor(Data_Bounded_Generic.genericTopNoArguments))(Data_Enum_Generic.genericEnumConstructor(Data_Enum_Generic.genericEnumNoArguments))(Data_Bounded_Generic.genericBottomConstructor(Data_Bounded_Generic.genericBottomNoArguments)))(Data_Bounded_Generic.genericBottomSum(Data_Bounded_Generic.genericBottomConstructor(Data_Bounded_Generic.genericBottomNoArguments))))(Data_Bounded_Generic.genericBottomSum(Data_Bounded_Generic.genericBottomConstructor(Data_Bounded_Generic.genericBottomNoArguments))))(Data_Bounded_Generic.genericBottomSum(Data_Bounded_Generic.genericBottomConstructor(Data_Bounded_Generic.genericBottomNoArguments))))(Data_Bounded_Generic.genericBottomSum(Data_Bounded_Generic.genericBottomConstructor(Data_Bounded_Generic.genericBottomNoArguments))))(Data_Bounded_Generic.genericBottomSum(Data_Bounded_Generic.genericBottomConstructor(Data_Bounded_Generic.genericBottomNoArguments))))(Data_Bounded_Generic.genericBottomSum(Data_Bounded_Generic.genericBottomConstructor(Data_Bounded_Generic.genericBottomNoArguments)))),
      succ: Data_Enum_Generic.genericSucc(genericAddressHeaderType_)(Data_Enum_Generic.genericEnumSum(Data_Enum_Generic.genericEnumConstructor(Data_Enum_Generic.genericEnumNoArguments))(Data_Bounded_Generic.genericTopConstructor(Data_Bounded_Generic.genericTopNoArguments))(Data_Enum_Generic.genericEnumSum(Data_Enum_Generic.genericEnumConstructor(Data_Enum_Generic.genericEnumNoArguments))(Data_Bounded_Generic.genericTopConstructor(Data_Bounded_Generic.genericTopNoArguments))(Data_Enum_Generic.genericEnumSum(Data_Enum_Generic.genericEnumConstructor(Data_Enum_Generic.genericEnumNoArguments))(Data_Bounded_Generic.genericTopConstructor(Data_Bounded_Generic.genericTopNoArguments))(Data_Enum_Generic.genericEnumSum(Data_Enum_Generic.genericEnumConstructor(Data_Enum_Generic.genericEnumNoArguments))(Data_Bounded_Generic.genericTopConstructor(Data_Bounded_Generic.genericTopNoArguments))(Data_Enum_Generic.genericEnumSum(Data_Enum_Generic.genericEnumConstructor(Data_Enum_Generic.genericEnumNoArguments))(Data_Bounded_Generic.genericTopConstructor(Data_Bounded_Generic.genericTopNoArguments))(Data_Enum_Generic.genericEnumSum(Data_Enum_Generic.genericEnumConstructor(Data_Enum_Generic.genericEnumNoArguments))(Data_Bounded_Generic.genericTopConstructor(Data_Bounded_Generic.genericTopNoArguments))(Data_Enum_Generic.genericEnumSum(Data_Enum_Generic.genericEnumConstructor(Data_Enum_Generic.genericEnumNoArguments))(Data_Bounded_Generic.genericTopConstructor(Data_Bounded_Generic.genericTopNoArguments))(Data_Enum_Generic.genericEnumConstructor(Data_Enum_Generic.genericEnumNoArguments))(Data_Bounded_Generic.genericBottomConstructor(Data_Bounded_Generic.genericBottomNoArguments)))(Data_Bounded_Generic.genericBottomSum(Data_Bounded_Generic.genericBottomConstructor(Data_Bounded_Generic.genericBottomNoArguments))))(Data_Bounded_Generic.genericBottomSum(Data_Bounded_Generic.genericBottomConstructor(Data_Bounded_Generic.genericBottomNoArguments))))(Data_Bounded_Generic.genericBottomSum(Data_Bounded_Generic.genericBottomConstructor(Data_Bounded_Generic.genericBottomNoArguments))))(Data_Bounded_Generic.genericBottomSum(Data_Bounded_Generic.genericBottomConstructor(Data_Bounded_Generic.genericBottomNoArguments))))(Data_Bounded_Generic.genericBottomSum(Data_Bounded_Generic.genericBottomConstructor(Data_Bounded_Generic.genericBottomNoArguments))))(Data_Bounded_Generic.genericBottomSum(Data_Bounded_Generic.genericBottomConstructor(Data_Bounded_Generic.genericBottomNoArguments)))),
      Ord0: function () {
          return ordAddressHeaderType;
      }
  };
  var boundedAddressHeaderType = {
      top: ScriptHash.value,
      bottom: PaymentKeyHashStakeKeyHash.value,
      Ord0: function () {
          return ordAddressHeaderType;
      }
  };
  var boundedEnumAddressHeaderT = {
      cardinality: Data_Enum_Generic.genericCardinality(genericAddressHeaderType_)(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))))))))),
      toEnum: Data_Enum_Generic.genericToEnum(genericAddressHeaderType_)(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))))))))),
      fromEnum: Data_Enum_Generic.genericFromEnum(genericAddressHeaderType_)(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))))))))),
      Bounded0: function () {
          return boundedAddressHeaderType;
      },
      Enum1: function () {
          return enumAddressHeaderType;
      }
  };
  var addrHeaderTypeUInt = (function () {
      var $53 = Data_Enum.fromEnum(boundedEnumAddressHeaderT);
      return function ($54) {
          return Data_UInt.fromInt($53($54));
      };
  })();
  var addrHeaderType = (function () {
      var $55 = Data_Enum.toEnum(boundedEnumAddressHeaderT);
      return function ($56) {
          return $55(Data_UInt.toInt($56));
      };
  })();
  exports["PaymentKeyHashStakeKeyHash"] = PaymentKeyHashStakeKeyHash;
  exports["ScriptHashStakeKeyHash"] = ScriptHashStakeKeyHash;
  exports["PaymentKeyHashScriptHash"] = PaymentKeyHashScriptHash;
  exports["ScriptHashScriptHash"] = ScriptHashScriptHash;
  exports["PaymentKeyHashPointer"] = PaymentKeyHashPointer;
  exports["ScriptHashPointer"] = ScriptHashPointer;
  exports["PaymentKeyHash"] = PaymentKeyHash;
  exports["ScriptHash"] = ScriptHash;
  exports["addrHeaderTypeUInt"] = addrHeaderTypeUInt;
  exports["addrHeaderType"] = addrHeaderType;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Plutus.Conversion.Address"] = $PS["Plutus.Conversion.Address"] || {};
  var exports = $PS["Plutus.Conversion.Address"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_UInt = $PS["Data.UInt"];
  var Plutus_Types_Address = $PS["Plutus.Types.Address"];
  var Plutus_Types_AddressHeaderType = $PS["Plutus.Types.AddressHeaderType"];
  var Plutus_Types_Credential = $PS["Plutus.Types.Credential"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Serialization_Hash = $PS["Serialization.Hash"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var Types_CborBytes = $PS["Types.CborBytes"];                
  var toVarLengthUInt = function () {
      return function (t) {
          var worker = function (srcUInt) {
              return function (setSignalBit) {
                  if (Data_Eq.eq(Data_UInt.uintEqInstance)(srcUInt)(Data_Semiring.zero(Data_UInt.uintSemiring))) {
                      return Data_Monoid.mempty(Types_ByteArray.monoidByteArray);
                  };
                  if (Data_Boolean.otherwise) {
                      var uint7 = Data_UInt.and(srcUInt)(Data_UInt.fromInt(127));
                      var srcUIntShifted = Data_UInt.zshr(srcUInt)(Data_UInt.fromInt(7));
                      return Data_Semigroup.append(Types_ByteArray.semigroupByteArray)(worker(srcUIntShifted)(true))(Types_ByteArray.byteArrayFromIntArrayUnsafe(Data_Array.singleton(Data_UInt.toInt((function () {
                          if (setSignalBit) {
                              return Data_UInt.or(uint7)(Data_UInt.fromInt(128));
                          };
                          return uint7;
                      })()))));
                  };
                  throw new Error("Failed pattern match at Plutus.Conversion.Address (line 165, column 3 - line 165, column 41): " + [ srcUInt.constructor.name, setSignalBit.constructor.name ]);
              };
          };
          return worker(Data_Newtype.unwrap()(t))(false);
      };
  };
  var fromVarLengthUInt = function () {
      return function (bytes) {
          return function (acc) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.uncons(bytes))(function (v) {
                  var x = Data_UInt.fromInt(v.head);
                  var v1 = Data_Eq.eq(Data_UInt.uintEqInstance)(Data_UInt.and(x)(Data_UInt.fromInt(128)))(Data_Semiring.zero(Data_UInt.uintSemiring));
                  if (v1) {
                      var uintArray = Data_Function.flip(Data_Functor.map(Data_Functor.functorArray))(Data_Array.snoc(acc)(x))(Data_UInt.and(Data_UInt.fromInt(127)));
                      var foldr_ = function (m) {
                          return function (t) {
                              return function (f) {
                                  return Data_Array.foldr(f)(m)(t);
                              };
                          };
                      };
                      var uintValue = Data_Tuple.fst(foldr_(new Data_Tuple.Tuple(Data_Semiring.zero(Data_UInt.uintSemiring), 0))(uintArray)(function (lhs) {
                          return function (v2) {
                              return new Data_Tuple.Tuple(Data_Semiring.add(Data_UInt.uintSemiring)(Data_UInt.shl(lhs)(Data_UInt.fromInt(7 * v2.value1 | 0)))(v2.value0), v2.value1 + 1 | 0);
                          };
                      }));
                      return new Data_Maybe.Just(new Data_Tuple.Tuple(Data_Newtype.wrap()(uintValue), v.tail));
                  };
                  return fromVarLengthUInt()(v.tail)(Data_Array.snoc(acc)(x));
              });
          };
      };
  };
  var toPlutusAddressWithNetworkTag = function (addrForeign) {
      var stakingPtr = function (byteArray) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(fromVarLengthUInt()(Types_ByteArray.byteArrayToIntArray(byteArray))(Data_Monoid.mempty(Data_Monoid.monoidArray)))(function (v) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(fromVarLengthUInt()(v.value1)(Data_Monoid.mempty(Data_Monoid.monoidArray)))(function (v1) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(fromVarLengthUInt()(v1.value1)(Data_Monoid.mempty(Data_Monoid.monoidArray)))(function (v2) {
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Plutus_Types_Credential.StakingPtr({
                          slot: v.value0,
                          txIx: v1.value0,
                          certIx: v2.value0
                      }));
                  });
              });
          });
      };
      var scriptCredential = (function () {
          var $58 = Data_Functor.map(Data_Maybe.functorMaybe)((function () {
              var $61 = Data_Newtype.wrap();
              return function ($62) {
                  return Plutus_Types_Credential.ScriptCredential.create($61($62));
              };
          })());
          var $59 = Data_Newtype.wrap();
          return function ($60) {
              return $58(Serialization_Hash.scriptHashFromBytes($59($60)));
          };
      })();
      var pubKeyCredential = (function () {
          var $63 = Data_Functor.map(Data_Maybe.functorMaybe)((function () {
              var $66 = Data_Newtype.wrap();
              return function ($67) {
                  return Plutus_Types_Credential.PubKeyCredential.create($66($67));
              };
          })());
          var $64 = Data_Newtype.wrap();
          return function ($65) {
              return $63(Serialization_Hash.ed25519KeyHashFromBytes($64($65)));
          };
      })();
      var networkTag = (function () {
          var $68 = Data_UInt.and(Data_Semiring.one(Data_UInt.uintSemiring));
          return function ($69) {
              return Serialization_Address.unsafeIntToNetId(Data_UInt.toInt($68(Data_UInt.fromInt($69))));
          };
      })();
      var addrType = (function () {
          var $70 = Data_Function.flip(Data_UInt.zshr)(Data_UInt.fromInt(4));
          return function ($71) {
              return $70(Data_UInt.fromInt($71));
          };
      })();
      var addrBytes = Types_CborBytes.cborBytesToIntArray(Serialization_Address.addressBytes(addrForeign));
      var delegationPartHash = Types_ByteArray.byteArrayFromIntArray(Data_Array.drop(29)(addrBytes));
      var paymentPartHash = Types_ByteArray.byteArrayFromIntArray(Data_Array.take(28)(Data_Array.drop(1)(addrBytes)));
      var buildAddress = function (credential) {
          return function (stakingCredential) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(paymentPartHash)(credential))(function (c) {
                  if (stakingCredential instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(Data_Newtype.wrap()({
                          addressCredential: c,
                          addressStakingCredential: Data_Maybe.Nothing.value
                      }));
                  };
                  if (stakingCredential instanceof Data_Maybe.Just) {
                      return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(delegationPartHash)(stakingCredential.value0))(function (sc) {
                          return new Data_Maybe.Just(Data_Newtype.wrap()({
                              addressCredential: c,
                              addressStakingCredential: new Data_Maybe.Just(sc)
                          }));
                      });
                  };
                  throw new Error("Failed pattern match at Plutus.Conversion.Address (line 275, column 7 - line 280, column 77): " + [ stakingCredential.constructor.name ]);
              });
          };
      };
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.head(addrBytes))(function (headerByte) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Plutus_Types_AddressHeaderType.addrHeaderType(addrType(headerByte)))(function (addrType$prime) {
              var networkId = networkTag(headerByte);
              return Data_Functor.map(Data_Maybe.functorMaybe)(function ($72) {
                  return Plutus_Types_Address.AddressWithNetworkTag((function (v) {
                      return {
                          address: v,
                          networkId: networkId
                      };
                  })($72));
              })((function () {
                  if (addrType$prime instanceof Plutus_Types_AddressHeaderType.PaymentKeyHashStakeKeyHash) {
                      return buildAddress(pubKeyCredential)(new Data_Maybe.Just((function () {
                          var $73 = Data_Functor.map(Data_Maybe.functorMaybe)(Plutus_Types_Credential.StakingHash.create);
                          return function ($74) {
                              return $73(pubKeyCredential($74));
                          };
                      })()));
                  };
                  if (addrType$prime instanceof Plutus_Types_AddressHeaderType.ScriptHashStakeKeyHash) {
                      return buildAddress(scriptCredential)(new Data_Maybe.Just((function () {
                          var $75 = Data_Functor.map(Data_Maybe.functorMaybe)(Plutus_Types_Credential.StakingHash.create);
                          return function ($76) {
                              return $75(pubKeyCredential($76));
                          };
                      })()));
                  };
                  if (addrType$prime instanceof Plutus_Types_AddressHeaderType.PaymentKeyHashScriptHash) {
                      return buildAddress(pubKeyCredential)(new Data_Maybe.Just((function () {
                          var $77 = Data_Functor.map(Data_Maybe.functorMaybe)(Plutus_Types_Credential.StakingHash.create);
                          return function ($78) {
                              return $77(scriptCredential($78));
                          };
                      })()));
                  };
                  if (addrType$prime instanceof Plutus_Types_AddressHeaderType.ScriptHashScriptHash) {
                      return buildAddress(scriptCredential)(new Data_Maybe.Just((function () {
                          var $79 = Data_Functor.map(Data_Maybe.functorMaybe)(Plutus_Types_Credential.StakingHash.create);
                          return function ($80) {
                              return $79(scriptCredential($80));
                          };
                      })()));
                  };
                  if (addrType$prime instanceof Plutus_Types_AddressHeaderType.PaymentKeyHashPointer) {
                      return buildAddress(pubKeyCredential)(new Data_Maybe.Just(stakingPtr));
                  };
                  if (addrType$prime instanceof Plutus_Types_AddressHeaderType.ScriptHashPointer) {
                      return buildAddress(scriptCredential)(new Data_Maybe.Just(stakingPtr));
                  };
                  if (addrType$prime instanceof Plutus_Types_AddressHeaderType.PaymentKeyHash) {
                      return buildAddress(pubKeyCredential)(Data_Maybe.Nothing.value);
                  };
                  if (addrType$prime instanceof Plutus_Types_AddressHeaderType.ScriptHash) {
                      return buildAddress(scriptCredential)(Data_Maybe.Nothing.value);
                  };
                  throw new Error("Failed pattern match at Plutus.Conversion.Address (line 202, column 5 - line 237, column 46): " + [ addrType$prime.constructor.name ]);
              })());
          });
      });
  };
  var toPlutusAddress = (function () {
      var $81 = Data_Functor.map(Data_Maybe.functorMaybe)((function () {
          var $83 = Data_Newtype.unwrap();
          return function ($84) {
              return (function (v) {
                  return v.address;
              })($83($84));
          };
      })());
      return function ($82) {
          return $81(toPlutusAddressWithNetworkTag($82));
      };
  })();
  var fromPlutusAddress = function (networkId) {
      return function (addrPlutus) {
          var rec = Data_Newtype.unwrap()(addrPlutus);
          var pointerToBytes = function (ptr) {
              return Data_Newtype.wrap()(Data_Semigroup.append(Types_ByteArray.semigroupByteArray)(toVarLengthUInt()(ptr.slot))(Data_Semigroup.append(Types_ByteArray.semigroupByteArray)(toVarLengthUInt()(ptr.txIx))(toVarLengthUInt()(ptr.certIx))));
          };
          var addrHeader = function (headerType) {
              return Types_CborBytes.cborBytesFromIntArrayUnsafe(Data_Array.singleton(Data_UInt.toInt(Data_Semiring.add(Data_UInt.uintSemiring)(Data_UInt.shl(Plutus_Types_AddressHeaderType.addrHeaderTypeUInt(headerType))(Data_UInt.fromInt(4)))(Data_UInt.fromInt(Serialization_Address.networkIdtoInt(networkId))))));
          };
          if (rec.addressCredential instanceof Plutus_Types_Credential.PubKeyCredential && (rec.addressStakingCredential instanceof Data_Maybe.Just && (rec.addressStakingCredential.value0 instanceof Plutus_Types_Credential.StakingHash && rec.addressStakingCredential.value0.value0 instanceof Plutus_Types_Credential.PubKeyCredential))) {
              return Serialization_Address.addressFromBytes(Data_Semigroup.append(Types_CborBytes.semigroupCborBytes)(addrHeader(Plutus_Types_AddressHeaderType.PaymentKeyHashStakeKeyHash.value))(Data_Semigroup.append(Types_CborBytes.semigroupCborBytes)(Types_CborBytes.rawBytesAsCborBytes(Serialization_Hash.ed25519KeyHashToBytes(Data_Newtype.unwrap()(rec.addressCredential.value0))))(Types_CborBytes.rawBytesAsCborBytes(Serialization_Hash.ed25519KeyHashToBytes(Data_Newtype.unwrap()(rec.addressStakingCredential.value0.value0.value0))))));
          };
          if (rec.addressCredential instanceof Plutus_Types_Credential.ScriptCredential && (rec.addressStakingCredential instanceof Data_Maybe.Just && (rec.addressStakingCredential.value0 instanceof Plutus_Types_Credential.StakingHash && rec.addressStakingCredential.value0.value0 instanceof Plutus_Types_Credential.PubKeyCredential))) {
              return Serialization_Address.addressFromBytes(Data_Semigroup.append(Types_CborBytes.semigroupCborBytes)(addrHeader(Plutus_Types_AddressHeaderType.ScriptHashStakeKeyHash.value))(Data_Semigroup.append(Types_CborBytes.semigroupCborBytes)(Types_CborBytes.rawBytesAsCborBytes(Serialization_Hash.scriptHashToBytes(Data_Newtype.unwrap()(rec.addressCredential.value0))))(Types_CborBytes.rawBytesAsCborBytes(Serialization_Hash.ed25519KeyHashToBytes(Data_Newtype.unwrap()(rec.addressStakingCredential.value0.value0.value0))))));
          };
          if (rec.addressCredential instanceof Plutus_Types_Credential.PubKeyCredential && (rec.addressStakingCredential instanceof Data_Maybe.Just && (rec.addressStakingCredential.value0 instanceof Plutus_Types_Credential.StakingHash && rec.addressStakingCredential.value0.value0 instanceof Plutus_Types_Credential.ScriptCredential))) {
              return Serialization_Address.addressFromBytes(Data_Semigroup.append(Types_CborBytes.semigroupCborBytes)(addrHeader(Plutus_Types_AddressHeaderType.PaymentKeyHashScriptHash.value))(Data_Semigroup.append(Types_CborBytes.semigroupCborBytes)(Types_CborBytes.rawBytesAsCborBytes(Serialization_Hash.ed25519KeyHashToBytes(Data_Newtype.unwrap()(rec.addressCredential.value0))))(Types_CborBytes.rawBytesAsCborBytes(Serialization_Hash.scriptHashToBytes(Data_Newtype.unwrap()(rec.addressStakingCredential.value0.value0.value0))))));
          };
          if (rec.addressCredential instanceof Plutus_Types_Credential.ScriptCredential && (rec.addressStakingCredential instanceof Data_Maybe.Just && (rec.addressStakingCredential.value0 instanceof Plutus_Types_Credential.StakingHash && rec.addressStakingCredential.value0.value0 instanceof Plutus_Types_Credential.ScriptCredential))) {
              return Serialization_Address.addressFromBytes(Data_Semigroup.append(Types_CborBytes.semigroupCborBytes)(addrHeader(Plutus_Types_AddressHeaderType.ScriptHashScriptHash.value))(Data_Semigroup.append(Types_CborBytes.semigroupCborBytes)(Types_CborBytes.rawBytesAsCborBytes(Serialization_Hash.scriptHashToBytes(Data_Newtype.unwrap()(rec.addressCredential.value0))))(Types_CborBytes.rawBytesAsCborBytes(Serialization_Hash.scriptHashToBytes(Data_Newtype.unwrap()(rec.addressStakingCredential.value0.value0.value0))))));
          };
          if (rec.addressCredential instanceof Plutus_Types_Credential.PubKeyCredential && (rec.addressStakingCredential instanceof Data_Maybe.Just && rec.addressStakingCredential.value0 instanceof Plutus_Types_Credential.StakingPtr)) {
              return Serialization_Address.addressFromBytes(Data_Semigroup.append(Types_CborBytes.semigroupCborBytes)(addrHeader(Plutus_Types_AddressHeaderType.PaymentKeyHashPointer.value))(Data_Semigroup.append(Types_CborBytes.semigroupCborBytes)(Types_CborBytes.rawBytesAsCborBytes(Serialization_Hash.ed25519KeyHashToBytes(Data_Newtype.unwrap()(rec.addressCredential.value0))))(pointerToBytes(rec.addressStakingCredential.value0.value0))));
          };
          if (rec.addressCredential instanceof Plutus_Types_Credential.ScriptCredential && (rec.addressStakingCredential instanceof Data_Maybe.Just && rec.addressStakingCredential.value0 instanceof Plutus_Types_Credential.StakingPtr)) {
              return Serialization_Address.addressFromBytes(Data_Semigroup.append(Types_CborBytes.semigroupCborBytes)(addrHeader(Plutus_Types_AddressHeaderType.ScriptHashPointer.value))(Data_Semigroup.append(Types_CborBytes.semigroupCborBytes)(Types_CborBytes.rawBytesAsCborBytes(Serialization_Hash.scriptHashToBytes(Data_Newtype.unwrap()(rec.addressCredential.value0))))(pointerToBytes(rec.addressStakingCredential.value0.value0))));
          };
          if (rec.addressCredential instanceof Plutus_Types_Credential.PubKeyCredential && rec.addressStakingCredential instanceof Data_Maybe.Nothing) {
              return Serialization_Address.addressFromBytes(Data_Semigroup.append(Types_CborBytes.semigroupCborBytes)(addrHeader(Plutus_Types_AddressHeaderType.PaymentKeyHash.value))(Types_CborBytes.rawBytesAsCborBytes(Serialization_Hash.ed25519KeyHashToBytes(Data_Newtype.unwrap()(rec.addressCredential.value0)))));
          };
          if (rec.addressCredential instanceof Plutus_Types_Credential.ScriptCredential && rec.addressStakingCredential instanceof Data_Maybe.Nothing) {
              return Serialization_Address.addressFromBytes(Data_Semigroup.append(Types_CborBytes.semigroupCborBytes)(addrHeader(Plutus_Types_AddressHeaderType.ScriptHash.value))(Types_CborBytes.rawBytesAsCborBytes(Serialization_Hash.scriptHashToBytes(Data_Newtype.unwrap()(rec.addressCredential.value0)))));
          };
          throw new Error("Failed pattern match at Plutus.Conversion.Address (line 81, column 3 - line 134, column 65): " + [ rec.addressCredential.constructor.name, rec.addressStakingCredential.constructor.name ]);
      };
  };
  exports["fromPlutusAddress"] = fromPlutusAddress;
  exports["toPlutusAddress"] = toPlutusAddress;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Plutus.Conversion.Value"] = $PS["Plutus.Conversion.Value"] || {};
  var exports = $PS["Plutus.Conversion.Value"];
  var Cardano_Types_Value = $PS["Cardano.Types.Value"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Plutus_Types_AssocMap = $PS["Plutus.Types.AssocMap"];
  var Plutus_Types_CurrencySymbol = $PS["Plutus.Types.CurrencySymbol"];
  var Plutus_Types_Value = $PS["Plutus.Types.Value"];
  var Types_TokenName = $PS["Types.TokenName"];                
  var toPlutusValue = function (v) {
      var nonAdaValues = Data_Function.flip(Data_Array.concatMap)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(v.value1))(function (v1) {
          return Data_Functor.mapFlipped(Data_Functor.functorArray)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(v1.value1))(function (v2) {
              return Data_Maybe.fromJust()(Plutus_Types_Value["singleton'"](Cardano_Types_Value.getCurrencySymbol(v1.value0))(Types_TokenName.getTokenName(v2.value0))(v2.value1));
          });
      });
      var adaValue = (function () {
          if (Data_Eq.eq(Data_BigInt.eqBigInt)(v.value0)(Data_Semiring.zero(Data_BigInt.semiringBigInt))) {
              return Data_Monoid.mempty(Plutus_Types_Value.monoidValue);
          };
          if (Data_Boolean.otherwise) {
              return Plutus_Types_Value.lovelaceValueOf(v.value0);
          };
          throw new Error("Failed pattern match at Plutus.Conversion.Value (line 73, column 3 - line 73, column 27): " + [  ]);
      })();
      return Data_Semigroup.append(Plutus_Types_Value.semigroupValue)(adaValue)(Data_Foldable.fold(Data_Foldable.foldableArray)(Plutus_Types_Value.monoidValue)(nonAdaValues));
  };
  var fromPlutusValue = function (plutusValue) {
      var v = (function (x) {
          return {
              adaTokenMap: x.yes,
              nonAdaTokenMap: x.no
          };
      })(Data_Array.partition(function (v1) {
          return Data_Eq.eq(Plutus_Types_CurrencySymbol.eqCurrencySymbol)(v1.value0)(Plutus_Types_CurrencySymbol.adaSymbol);
      })(Data_Newtype.unwrap()(Plutus_Types_Value.getValue(plutusValue))));
      var nonAdaAssets = Data_Maybe.fromJust()(Cardano_Types_Value.mkNonAdaAssetsFromTokenMap(Data_Traversable.traversableArray)(Data_Functor.mapFlipped(Data_Functor.functorArray)(v.nonAdaTokenMap)(function (v1) {
          return new Data_Tuple.Tuple(Plutus_Types_CurrencySymbol.getCurrencySymbol(v1.value0), Data_Map_Internal.fromFoldable(Types_TokenName.ordTokenName)(Data_Foldable.foldableArray)(Data_Newtype.unwrap()(v1.value1)));
      })));
      var adaValue = Data_Function.flip(Cardano_Types_Value.mkValue)(Data_Monoid.mempty(Cardano_Types_Value.monoidNonAdaAsset))(Data_Newtype.wrap()(Data_Maybe.fromMaybe(Data_Semiring.zero(Data_BigInt.semiringBigInt))(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.snd)(Data_Array.head(v.adaTokenMap)))(function (adaTokens) {
          return Plutus_Types_AssocMap.lookup(Types_TokenName.eqTokenName)(Types_TokenName.adaToken)(adaTokens);
      }))));
      return Data_Semigroup.append(Cardano_Types_Value.semigroupValue)(adaValue)(Cardano_Types_Value.mkValue(Data_Monoid.mempty(Cardano_Types_Value.monoidCoin))(nonAdaAssets));
  };
  exports["fromPlutusValue"] = fromPlutusValue;
  exports["toPlutusValue"] = toPlutusValue;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Plutus.Conversion"] = $PS["Plutus.Conversion"] || {};
  var exports = $PS["Plutus.Conversion"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Plutus_Conversion_Address = $PS["Plutus.Conversion.Address"];
  var Plutus_Conversion_Value = $PS["Plutus.Conversion.Value"];                
  var toPlutusTxOutput = function (cardanoTxOut) {
      var rec = Data_Newtype.unwrap()(cardanoTxOut);
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Plutus_Conversion_Address.toPlutusAddress(rec.address))(function (address) {
          var amount = Plutus_Conversion_Value.toPlutusValue(rec.amount);
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Newtype.wrap()({
              address: address,
              amount: amount,
              dataHash: rec.dataHash
          }));
      });
  };
  var toPlutusUtxoM = (function () {
      var $0 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.wrap());
      var $1 = Data_Traversable.traverse(Data_Map_Internal.traversableMap)(Data_Maybe.applicativeMaybe)(toPlutusTxOutput);
      var $2 = Data_Newtype.unwrap();
      return function ($3) {
          return $0($1($2($3)));
      };
  })();
  var fromPlutusTxOutput = function (networkId) {
      return function (plutusTxOut) {
          var rec = Data_Newtype.unwrap()(plutusTxOut);
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Plutus_Conversion_Address.fromPlutusAddress(networkId)(rec.address))(function (address) {
              var amount = Plutus_Conversion_Value.fromPlutusValue(rec.amount);
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Newtype.wrap()({
                  address: address,
                  amount: amount,
                  dataHash: rec.dataHash
              }));
          });
      };
  };
  exports["fromPlutusTxOutput"] = fromPlutusTxOutput;
  exports["toPlutusUtxoM"] = toPlutusUtxoM;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["QueryM.EraSummaries"] = $PS["QueryM.EraSummaries"] || {};
  var exports = $PS["QueryM.EraSummaries"];
  var Data_Unit = $PS["Data.Unit"];
  var QueryM = $PS["QueryM"];
  var QueryM_Ogmios = $PS["QueryM.Ogmios"];                
  var getEraSummaries = QueryM.mkOgmiosRequest(QueryM_Ogmios.queryEraSummariesCall)(function (v) {
      return v.eraSummaries;
  })(Data_Unit.unit);
  exports["getEraSummaries"] = getEraSummaries;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["QueryM.ProtocolParameters"] = $PS["QueryM.ProtocolParameters"] || {};
  var exports = $PS["QueryM.ProtocolParameters"];
  var Data_Unit = $PS["Data.Unit"];
  var QueryM = $PS["QueryM"];
  var QueryM_Ogmios = $PS["QueryM.Ogmios"];                
  var getProtocolParameters = QueryM.mkOgmiosRequest(QueryM_Ogmios.queryProtocolParametersCall)(function (v) {
      return v.getProtocolParameters;
  })(Data_Unit.unit);
  exports["getProtocolParameters"] = getProtocolParameters;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["QueryM.SystemStart"] = $PS["QueryM.SystemStart"] || {};
  var exports = $PS["QueryM.SystemStart"];
  var Data_Unit = $PS["Data.Unit"];
  var QueryM = $PS["QueryM"];
  var QueryM_Ogmios = $PS["QueryM.Ogmios"];                
  var getSystemStart = QueryM.mkOgmiosRequest(QueryM_Ogmios.querySystemStartCall)(function (v) {
      return v.systemStart;
  })(Data_Unit.unit);
  exports["getSystemStart"] = getSystemStart;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Scripts"] = $PS["Scripts"] || {};
  var exports = $PS["Scripts"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Hashing = $PS["Hashing"];
  var Serialization_Address = $PS["Serialization.Address"];                
  var validatorHashEnterpriseAddress = function (network) {
      return function (valHash) {
          return Serialization_Address.enterpriseAddressToAddress(Serialization_Address.enterpriseAddress({
              network: network,
              paymentCred: Serialization_Address.scriptHashCredential(Data_Newtype.unwrap()(valHash))
          }));
      };
  };
  var typedValidatorEnterpriseAddress = function (network) {
      return function (v) {
          return validatorHashEnterpriseAddress(network)(v.validatorHash);
      };
  };
  var scriptHash = function () {
      return function () {
          var $9 = Data_Functor.map(Effect_Aff.functorAff)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.wrap()));
          var $10 = Data_Newtype.unwrap();
          return function ($11) {
              return $9(Hashing.plutusScriptHash($10($11)));
          };
      };
  };                                      
  var validatorHash = scriptHash()();
  var mintingPolicyHash = scriptHash()();
  exports["mintingPolicyHash"] = mintingPolicyHash;
  exports["typedValidatorEnterpriseAddress"] = typedValidatorEnterpriseAddress;
  exports["validatorHash"] = validatorHash;
  exports["validatorHashEnterpriseAddress"] = validatorHashEnterpriseAddress;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Transaction"] = $PS["Transaction"] || {};
  var exports = $PS["Transaction"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Deserialization_WitnessSet = $PS["Deserialization.WitnessSet"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Helpers = $PS["Helpers"];
  var Serialization = $PS["Serialization"];
  var Serialization_PlutusData = $PS["Serialization.PlutusData"];
  var Serialization_WitnessSet = $PS["Serialization.WitnessSet"];
  var Untagged_Union = $PS["Untagged.Union"];                
  var ConvertWitnessesError = (function () {
      function ConvertWitnessesError() {

      };
      ConvertWitnessesError.value = new ConvertWitnessesError();
      return ConvertWitnessesError;
  })();
  var ConvertDatumError = (function () {
      function ConvertDatumError() {

      };
      ConvertDatumError.value = new ConvertDatumError();
      return ConvertDatumError;
  })();
  var genericModifyTxError_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return ConvertWitnessesError.value;
          };
          if (x instanceof Data_Generic_Rep.Inr) {
              return ConvertDatumError.value;
          };
          throw new Error("Failed pattern match at Transaction (line 41, column 1 - line 41, column 40): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof ConvertWitnessesError) {
              return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
          };
          if (x instanceof ConvertDatumError) {
              return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
          };
          throw new Error("Failed pattern match at Transaction (line 41, column 1 - line 41, column 40): " + [ x.constructor.name ]);
      }
  };
  var showModifyTxError = {
      show: Data_Show_Generic.genericShow(genericModifyTxError_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "ConvertWitnessesError";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "ConvertDatumError";
          }
      })))
  };
  var updateTxWithWitnesses = function (v) {
      return function (ws) {
          return Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(new Data_Either.Right(Data_Newtype.over()()(Cardano_Types_Transaction.Transaction)(function (v1) {
              return {
                  witnessSet: Data_Semigroup.append(Cardano_Types_Transaction.semigroupTransactionWitne)(v.witnessSet)(ws),
                  auxiliaryData: v1.auxiliaryData,
                  body: v1.body,
                  isValid: v1.isValid
              };
          })(v)));
      };
  };
  var setScriptDataHash = function (costModels) {
      return function (rs) {
          return function (ds) {
              return function (v) {
                  return function __do() {
                      var scriptDataHash = Data_Functor.map(Effect.functorEffect)((function () {
                          var $37 = Untagged_Union.asOneOf();
                          return function ($38) {
                              return Cardano_Types_Transaction.ScriptDataHash(Serialization.toBytes($37($38)));
                          };
                      })())(Serialization.hashScriptData(rs)(costModels)(Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.unwrap())(ds)))();
                      return Data_Newtype.over()()(Cardano_Types_Transaction.Transaction)(function (v1) {
                          return {
                              body: Data_Newtype.over()()(Cardano_Types_Transaction.TxBody)(function (v2) {
                                  return {
                                      scriptDataHash: new Data_Maybe.Just(scriptDataHash),
                                      auxiliaryDataHash: v2.auxiliaryDataHash,
                                      certs: v2.certs,
                                      collateral: v2.collateral,
                                      fee: v2.fee,
                                      inputs: v2.inputs,
                                      mint: v2.mint,
                                      networkId: v2.networkId,
                                      outputs: v2.outputs,
                                      requiredSigners: v2.requiredSigners,
                                      ttl: v2.ttl,
                                      update: v2.update,
                                      validityStartInterval: v2.validityStartInterval,
                                      withdrawals: v2.withdrawals
                                  };
                              })(v.body),
                              auxiliaryData: v1.auxiliaryData,
                              isValid: v1.isValid,
                              witnessSet: v1.witnessSet
                          };
                      })(v);
                  };
              };
          };
      };
  };
  var convertWitnessesWith = function (ws) {
      return function (act) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Effect_Class.liftEffect(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Class.monadEffectEffect))(Serialization_WitnessSet.convertWitnessSet(ws)))(function (ws$prime) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Effect_Class.liftEffect(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Class.monadEffectEffect))(act(ws$prime)))(function () {
                  return Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(Data_Either.note(ConvertWitnessesError.value)(Deserialization_WitnessSet.convertWitnessSet(ws$prime)));
              });
          });
      };
  };
  var attachRedeemer = function (r) {
      return function (v) {
          return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Effect_Class.liftEffect(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Class.monadEffectEffect))(Serialization_WitnessSet.convertRedeemer(r)))(function (r$prime) {
              return Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(updateTxWithWitnesses(v))(convertWitnessesWith(v.witnessSet)(Serialization_WitnessSet.setRedeemer(r$prime)));
          }));
      };
  };
  var attachPlutusScript = function (ps) {
      return function (v) {
          return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Effect_Class.liftEffect(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Class.monadEffectEffect))(Serialization_WitnessSet.convertPlutusScript(ps)))(function (ps$prime) {
              return Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(updateTxWithWitnesses(v))(convertWitnessesWith(v.witnessSet)(Serialization_WitnessSet.setPlutusScript(ps$prime)));
          }));
      };
  };
  var attachDatum = function (v) {
      return function (v1) {
          return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(Data_Either.note(ConvertDatumError.value)(Serialization_PlutusData.convertPlutusData(v))))(function (pd$prime) {
              return Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(updateTxWithWitnesses(v1))(convertWitnessesWith(v1.witnessSet)(Serialization_WitnessSet.setPlutusData(pd$prime)));
          }));
      };
  };
  exports["attachDatum"] = attachDatum;
  exports["attachRedeemer"] = attachRedeemer;
  exports["attachPlutusScript"] = attachPlutusScript;
  exports["setScriptDataHash"] = setScriptDataHash;
  exports["showModifyTxError"] = showModifyTxError;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["TxOutput"] = $PS["TxOutput"] || {};
  var exports = $PS["TxOutput"];
  var Address = $PS["Address"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Scripts = $PS["Scripts"];
  var Types_ByteArray = $PS["Types.ByteArray"];                
  var txOutRefToTransactionInput = function (v) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(Types_ByteArray.hexToByteArray(v.txId))(Data_Newtype.wrap()))(function (transactionId) {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Newtype.wrap()({
              transactionId: transactionId,
              index: v.index
          }));
      });
  };
  var transactionOutputToScriptOutput = function (v) {
      if (v.dataHash instanceof Data_Maybe.Just) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Address.enterpriseAddressValidatorHash(v.address))(function (validatorHash) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                  validatorHash: validatorHash,
                  value: v.amount,
                  datumHash: v.dataHash.value0
              });
          });
      };
      if (v.dataHash instanceof Data_Maybe.Nothing) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at TxOutput (line 117, column 1 - line 118, column 61): " + [ v.constructor.name ]);
  };
  var scriptOutputToTransactionOutput = function (networkId) {
      return function (v) {
          return {
              address: Scripts.validatorHashEnterpriseAddress(networkId)(v.validatorHash),
              amount: v.value,
              dataHash: new Data_Maybe.Just(v.datumHash)
          };
      };
  };
  var utxoIndexToUtxo = function (networkId) {
      return Data_Functor.map(Data_Map_Internal.functorMap)(scriptOutputToTransactionOutput(networkId));
  };
  var ogmiosDatumHashToDatumHash = function (str) {
      return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(Types_ByteArray.hexToByteArray(str))(Data_Newtype.wrap());
  };
  var ogmiosTxOutToTransactionOutput = function (v) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Address.ogmiosAddressToAddress(v.address))(function (address$prime) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Maybe.maybe(new Data_Maybe.Just(Data_Maybe.Nothing.value))((function () {
              var $44 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Maybe.Just.create);
              return function ($45) {
                  return $44(ogmiosDatumHashToDatumHash($45));
              };
          })())(v.datum))(function (dataHash) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Newtype.wrap()({
                  address: address$prime,
                  amount: v.value,
                  dataHash: dataHash
              }));
          });
      });
  };
  exports["ogmiosTxOutToTransactionOutput"] = ogmiosTxOutToTransactionOutput;
  exports["transactionOutputToScriptOutput"] = transactionOutputToScriptOutput;
  exports["txOutRefToTransactionInput"] = txOutRefToTransactionInput;
  exports["utxoIndexToUtxo"] = utxoIndexToUtxo;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Types.Interval"] = $PS["Types.Interval"] || {};
  var exports = $PS["Types.Interval"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_JSDate = $PS["Data.JSDate"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_UInt = $PS["Data.UInt"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Helpers = $PS["Helpers"];
  var QueryM_Ogmios = $PS["QueryM.Ogmios"];
  var Serialization_Address = $PS["Serialization.Address"];
  var NegInf = (function () {
      function NegInf() {

      };
      NegInf.value = new NegInf();
      return NegInf;
  })();
  var Finite = (function () {
      function Finite(value0) {
          this.value0 = value0;
      };
      Finite.create = function (value0) {
          return new Finite(value0);
      };
      return Finite;
  })();
  var PosInf = (function () {
      function PosInf() {

      };
      PosInf.value = new PosInf();
      return PosInf;
  })();
  var LowerBound = (function () {
      function LowerBound(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      LowerBound.create = function (value0) {
          return function (value1) {
              return new LowerBound(value0, value1);
          };
      };
      return LowerBound;
  })();
  var UpperBound = (function () {
      function UpperBound(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      UpperBound.create = function (value0) {
          return function (value1) {
              return new UpperBound(value0, value1);
          };
      };
      return UpperBound;
  })();
  var CannotFindTimeInEraSummaries = (function () {
      function CannotFindTimeInEraSummaries(value0) {
          this.value0 = value0;
      };
      CannotFindTimeInEraSummaries.create = function (value0) {
          return new CannotFindTimeInEraSummaries(value0);
      };
      return CannotFindTimeInEraSummaries;
  })();
  var PosixTimeBeforeSystemStart = (function () {
      function PosixTimeBeforeSystemStart(value0) {
          this.value0 = value0;
      };
      PosixTimeBeforeSystemStart.create = function (value0) {
          return new PosixTimeBeforeSystemStart(value0);
      };
      return PosixTimeBeforeSystemStart;
  })();
  var StartTimeGreaterThanTime = (function () {
      function StartTimeGreaterThanTime(value0) {
          this.value0 = value0;
      };
      StartTimeGreaterThanTime.create = function (value0) {
          return new StartTimeGreaterThanTime(value0);
      };
      return StartTimeGreaterThanTime;
  })();
  var EndSlotLessThanSlotOrModNonZero = (function () {
      function EndSlotLessThanSlotOrModNonZero(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      EndSlotLessThanSlotOrModNonZero.create = function (value0) {
          return function (value1) {
              return new EndSlotLessThanSlotOrModNonZero(value0, value1);
          };
      };
      return EndSlotLessThanSlotOrModNonZero;
  })();
  var CannotConvertAbsSlotToSlot = (function () {
      function CannotConvertAbsSlotToSlot(value0) {
          this.value0 = value0;
      };
      CannotConvertAbsSlotToSlot.create = function (value0) {
          return new CannotConvertAbsSlotToSlot(value0);
      };
      return CannotConvertAbsSlotToSlot;
  })();
  var CannotGetBigIntFromNumber$prime = (function () {
      function CannotGetBigIntFromNumber$prime() {

      };
      CannotGetBigIntFromNumber$prime.value = new CannotGetBigIntFromNumber$prime();
      return CannotGetBigIntFromNumber$prime;
  })();
  var showPOSIXTime = {
      show: function (v) {
          return Helpers.showWithParens(Data_BigInt.showBigInt)("POSIXTime")(v);
      }
  };
  var showModTime = {
      show: function (v) {
          return Helpers.showWithParens(Data_BigInt.showBigInt)("ModTime")(v);
      }
  };
  var showAbsTime = {
      show: function (v) {
          return Helpers.showWithParens(Data_BigInt.showBigInt)("AbsTime")(v);
      }
  };                                   
  var genericUpperBound_ = {
      to: function (x) {
          return new UpperBound(x.value0, x.value1);
      },
      from: function (x) {
          return new Data_Generic_Rep.Product(x.value0, x.value1);
      }
  };
  var genericPosixTimeToSlotErr = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new CannotFindTimeInEraSummaries(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return new PosixTimeBeforeSystemStart(x.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
              return new StartTimeGreaterThanTime(x.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
              return new EndSlotLessThanSlotOrModNonZero(x.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value1);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
              return new CannotConvertAbsSlotToSlot(x.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr)))) {
              return CannotGetBigIntFromNumber$prime.value;
          };
          throw new Error("Failed pattern match at Types.Interval (line 734, column 1 - line 734, column 47): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof CannotFindTimeInEraSummaries) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof PosixTimeBeforeSystemStart) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
          };
          if (x instanceof StartTimeGreaterThanTime) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
          };
          if (x instanceof EndSlotLessThanSlotOrModNonZero) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1)))));
          };
          if (x instanceof CannotConvertAbsSlotToSlot) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))));
          };
          if (x instanceof CannotGetBigIntFromNumber$prime) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)))));
          };
          throw new Error("Failed pattern match at Types.Interval (line 734, column 1 - line 734, column 47): " + [ x.constructor.name ]);
      }
  };
  var showPosixTimeToSlotError = {
      show: Data_Show_Generic.genericShow(genericPosixTimeToSlotErr)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showAbsTime))({
          reflectSymbol: function () {
              return "CannotFindTimeInEraSummaries";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showPOSIXTime))({
          reflectSymbol: function () {
              return "PosixTimeBeforeSystemStart";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showAbsTime))({
          reflectSymbol: function () {
              return "StartTimeGreaterThanTime";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(QueryM_Ogmios.showAbsSlot))(Data_Show_Generic.genericShowArgsArgument(showModTime)))({
          reflectSymbol: function () {
              return "EndSlotLessThanSlotOrModNonZero";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(QueryM_Ogmios.showAbsSlot))({
          reflectSymbol: function () {
              return "CannotConvertAbsSlotToSlot";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "CannotGetBigIntFromNumber'";
          }
      })))))))
  };
  var genericLowerBound_ = {
      to: function (x) {
          return new LowerBound(x.value0, x.value1);
      },
      from: function (x) {
          return new Data_Generic_Rep.Product(x.value0, x.value1);
      }
  };
  var genericInterval_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var genericExtended_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return NegInf.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return new Finite(x.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
              return PosInf.value;
          };
          throw new Error("Failed pattern match at Types.Interval (line 157, column 1 - line 157, column 39): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof NegInf) {
              return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
          };
          if (x instanceof Finite) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
          };
          if (x instanceof PosInf) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value));
          };
          throw new Error("Failed pattern match at Types.Interval (line 157, column 1 - line 157, column 39): " + [ x.constructor.name ]);
      }
  };
  var showExtended = function (dictShow) {
      return {
          show: Data_Show_Generic.genericShow(genericExtended_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "NegInf";
              }
          }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(dictShow))({
              reflectSymbol: function () {
                  return "Finite";
              }
          }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
              reflectSymbol: function () {
                  return "PosInf";
              }
          }))))
      };
  };
  var showLowerBound = function (dictShow) {
      return {
          show: Data_Show_Generic.genericShow(genericLowerBound_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(showExtended(dictShow)))(Data_Show_Generic.genericShowArgsArgument(Data_Show.showBoolean)))({
              reflectSymbol: function () {
                  return "LowerBound";
              }
          }))
      };
  };
  var showUpperBound = function (dictShow) {
      return {
          show: Data_Show_Generic.genericShow(genericUpperBound_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(showExtended(dictShow)))(Data_Show_Generic.genericShowArgsArgument(Data_Show.showBoolean)))({
              reflectSymbol: function () {
                  return "UpperBound";
              }
          }))
      };
  };
  var showInterval = function (dictShow) {
      return {
          show: Data_Show_Generic.genericShow(genericInterval_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons({
              reflectSymbol: function () {
                  return "from";
              }
          })(Data_Show.showRecordFieldsCons({
              reflectSymbol: function () {
                  return "to";
              }
          })(Data_Show.showRecordFieldsNil)(showUpperBound(dictShow)))(showLowerBound(dictShow)))))({
              reflectSymbol: function () {
                  return "Interval";
              }
          }))
      };
  };                                               
  var upperBound = function (a) {
      return new UpperBound(new Finite(a), true);
  };
  var slotFromAbsSlot = (function () {
      var $659 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.wrap());
      var $660 = Data_Newtype.unwrap();
      return function ($661) {
          return $659(Helpers.bigIntToUInt($660($661)));
      };
  })();
  var mkInterval = function (from$prime) {
      return function (to$prime) {
          return {
              from: from$prime,
              to: to$prime
          };
      };
  };                                                                                             
  var to = function (s) {
      return mkInterval(new LowerBound(NegInf.value, true))(upperBound(s));
  };
  var maxSlot = Data_Maybe.fromJust()(Data_UInt.fromString("4294967295"));
  var slotRangeToTransactionValidity = function (v) {
      var validityStartInterval = (function () {
          if (v.from.value0 instanceof Finite && v.from.value1) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(v.from.value0.value0);
          };
          if (v.from.value0 instanceof Finite && !v.from.value1) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Semigroup.append(Serialization_Address.semigroupSlot)(v.from.value0.value0)(Data_Semiring.one(Data_UInt.uintSemiring)));
          };
          if (v.from.value0 instanceof NegInf) {
              return Data_Maybe.Nothing.value;
          };
          if (v.from.value0 instanceof PosInf) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(maxSlot);
          };
          throw new Error("Failed pattern match at Types.Interval (line 979, column 27 - line 983, column 30): " + [ v.from.value0.constructor.name, v.from.value1.constructor.name ]);
      })();
      var timeToLive = (function () {
          if (v.to.value0 instanceof Finite && v.to.value1) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Semigroup.append(Serialization_Address.semigroupSlot)(v.to.value0.value0)(Data_Semiring.one(Data_UInt.uintSemiring)));
          };
          if (v.to.value0 instanceof Finite && !v.to.value1) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(v.to.value0.value0);
          };
          if (v.to.value0 instanceof NegInf) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Semiring.zero(Data_UInt.uintSemiring));
          };
          if (v.to.value0 instanceof PosInf) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Types.Interval (line 989, column 16 - line 993, column 25): " + [ v.to.value0.constructor.name, v.to.value1.constructor.name ]);
      })();
      return {
          validityStartInterval: validityStartInterval,
          timeToLive: timeToLive
      };
  };
  var lowerBound = function (a) {
      return new LowerBound(new Finite(a), true);
  };                                                                    
  var from = function (s) {
      return mkInterval(lowerBound(s))(new UpperBound(PosInf.value, true));
  };
  var factor = Data_BigInt.fromInt(1000);
  var findTimeEraSummary = function (v) {
      return function (v1) {
          var pred = function (v2) {
              return Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(Data_Semiring.mul(Data_BigInt.semiringBigInt)(Data_Newtype.unwrap()((Data_Newtype.unwrap()(v2.start)).time))(factor))(v1) && Data_Maybe.maybe(true)((function () {
                  var $665 = Data_Ord.lessThan(Data_BigInt.ordBigInt)(v1);
                  var $666 = Data_Semiring.mul(Data_BigInt.semiringBigInt)(factor);
                  var $667 = Data_Newtype.unwrap();
                  var $668 = Data_Newtype.unwrap();
                  return function ($669) {
                      return $665($666($667((function (v3) {
                          return v3.time;
                      })($668($669)))));
                  };
              })())(v2.end);
          };
          return Data_Either.note(new CannotFindTimeInEraSummaries(v1))(Data_Array.find(pred)(v));
      };
  };
  var getSlotLength = function (v) {
      return Data_Semiring.mul(Data_BigInt.semiringBigInt)(Data_Newtype.unwrap()((Data_Newtype.unwrap()(v.parameters)).slotLength))(factor);
  };
  var relSlotFromRelTime = function (eraSummary) {
      return function (v) {
          var slotLength = getSlotLength(eraSummary);
          return new Data_Tuple.Tuple(Data_Newtype.wrap()(Data_EuclideanRing.div(Data_BigInt.euclideanRingBigInt)(v)(slotLength)), Data_Newtype.wrap()(Data_EuclideanRing.mod(Data_BigInt.euclideanRingBigInt)(v)(slotLength)));
      };
  };
  var relTimeFromAbsTime = function (v) {
      return function (v1) {
          var startTime = Data_Semiring.mul(Data_BigInt.semiringBigInt)(Data_Newtype.unwrap()((Data_Newtype.unwrap()(v.start)).time))(factor);
          return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)(Control_Applicative.unless(Data_Either.applicativeEither)(Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(startTime)(v1))(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(new StartTimeGreaterThanTime(v1))))(function () {
              var relTime = Data_Ring.sub(Data_BigInt.ringBigInt)(v1)(startTime);
              return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()(relTime));
          });
      };
  };
  var absSlotFromRelSlot = function (v) {
      return function (v1) {
          var startSlot = Data_Newtype.unwrap()((Data_Newtype.unwrap()(v.start)).slot);
          var absSlot = Data_Semiring.add(Data_BigInt.semiringBigInt)(startSlot)(v1.value0);
          var endSlot = Data_Maybe.maybe(Data_Semiring.add(Data_BigInt.semiringBigInt)(absSlot)(Data_Semiring.one(Data_BigInt.semiringBigInt)))((function () {
              var $677 = Data_Newtype.unwrap();
              var $678 = Data_Newtype.unwrap();
              return function ($679) {
                  return $677((function (v2) {
                      return v2.slot;
                  })($678($679)));
              };
          })())(v.end);
          return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)(Control_Applicative.unless(Data_Either.applicativeEither)(Data_Ord.lessThan(Data_BigInt.ordBigInt)(absSlot)(endSlot) || Data_Eq.eq(Data_BigInt.eqBigInt)(absSlot)(endSlot) && Data_Eq.eq(Data_BigInt.eqBigInt)(v1.value1)(Data_Semiring.zero(Data_BigInt.semiringBigInt)))(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(new EndSlotLessThanSlotOrModNonZero(Data_Newtype.wrap()(absSlot), v1.value1))))(function () {
              return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()(absSlot));
          });
      };
  };
  var posixTimeToSlot = function (eraSummaries) {
      return function (sysStart) {
          return function (v) {
              return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Effect_Class.liftEffect(Control_Monad_Except_Trans.monadEffectExceptT(Effect_Class.monadEffectEffect))(Data_JSDate.parse(Data_Newtype.unwrap()(sysStart))))(function (sysStartD) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(CannotGetBigIntFromNumber$prime.value)(Data_BigInt.fromNumber(Data_JSDate.getTime(sysStartD))))(function (sysStartPosix) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Control_Applicative.unless(Control_Monad_Except_Trans.applicativeExceptT(Effect.monadEffect))(Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(sysStartPosix)(v))(Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Effect.monadEffect))(new PosixTimeBeforeSystemStart(v))))(function () {
                          var absTime = Data_Newtype.wrap()(Data_Ring.sub(Data_BigInt.ringBigInt)(v)(sysStartPosix));
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(findTimeEraSummary(eraSummaries)(absTime)))(function (currentEra) {
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(relTimeFromAbsTime(currentEra)(absTime)))(function (relTime) {
                                  var relSlotMod = relSlotFromRelTime(currentEra)(relTime);
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(absSlotFromRelSlot(currentEra)(relSlotMod)))(function (absSlot) {
                                      return Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(new CannotConvertAbsSlotToSlot(absSlot))(slotFromAbsSlot(absSlot));
                                  });
                              });
                          });
                      });
                  });
              }));
          };
      };
  };
  var posixTimeRangeToSlotRange = function (eraSummaries) {
      return function (sysStart) {
          return function (v) {
              var convertBounds = function (v1) {
                  if (v1 instanceof Finite) {
                      return Data_Functor.mapFlipped(Effect.functorEffect)(posixTimeToSlot(eraSummaries)(sysStart)(v1.value0))(Data_Functor.map(Data_Either.functorEither)(Finite.create));
                  };
                  if (v1 instanceof NegInf) {
                      return Control_Applicative.pure(Effect.applicativeEffect)(new Data_Either.Right(NegInf.value));
                  };
                  if (v1 instanceof PosInf) {
                      return Control_Applicative.pure(Effect.applicativeEffect)(new Data_Either.Right(PosInf.value));
                  };
                  throw new Error("Failed pattern match at Types.Interval (line 925, column 3 - line 927, column 60): " + [ v1.constructor.name ]);
              };
              return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(convertBounds(v.from.value0))(function (s$prime) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect.monadEffect))(convertBounds(v.to.value0))(function (e$prime) {
                      return Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Effect.monadEffect))(new Data_Either.Right({
                          from: new LowerBound(s$prime, v.from.value1),
                          to: new UpperBound(e$prime, v.to.value1)
                      }));
                  });
              }));
          };
      };
  };
  var posixTimeRangeToTransactionValidity = function (es) {
      return function (ss) {
          var $680 = Data_Functor.map(Effect.functorEffect)(Data_Functor.map(Data_Either.functorEither)(slotRangeToTransactionValidity));
          var $681 = posixTimeRangeToSlotRange(es)(ss);
          return function ($682) {
              return $680($681($682));
          };
      };
  };
  exports["posixTimeRangeToTransactionValidity"] = posixTimeRangeToTransactionValidity;
  exports["showInterval"] = showInterval;
  exports["showPOSIXTime"] = showPOSIXTime;
  exports["showPosixTimeToSlotError"] = showPosixTimeToSlotError;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Types.PubKeyHash"] = $PS["Types.PubKeyHash"] || {};
  var exports = $PS["Types.PubKeyHash"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Serialization_Hash = $PS["Serialization.Hash"];
  var ordPubKeyHash = Serialization_Hash.ordEd25519KeyHash;
  var ordPaymentPubKeyHash = ordPubKeyHash;
  var genericPubKeyHash_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showPubKeyHash = {
      show: Data_Show_Generic.genericShow(genericPubKeyHash_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Serialization_Hash.showEd25519KeyHash))({
          reflectSymbol: function () {
              return "PubKeyHash";
          }
      }))
  };
  var genericPaymentPubKeyHash_ = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showPaymentPubKeyHash = {
      show: Data_Show_Generic.genericShow(genericPaymentPubKeyHash_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showPubKeyHash))({
          reflectSymbol: function () {
              return "PaymentPubKeyHash";
          }
      }))
  };
  var pubKeyHashBaseAddress = function (networkId) {
      return function (pkh) {
          return function (skh) {
              return Serialization_Address.baseAddressToAddress(Serialization_Address.pubKeyAddress(networkId)(Data_Newtype.unwrap()(pkh))(Data_Newtype.unwrap()(Data_Newtype.unwrap()(skh))));
          };
      };
  };
  var payPubKeyHashBaseAddress = function (networkId) {
      return function (v) {
          return function (skh) {
              return pubKeyHashBaseAddress(networkId)(v)(skh);
          };
      };
  };
  var ed25519RewardAddress = function () {
      return function (network) {
          return function (skh) {
              return Serialization_Address.rewardAddress({
                  network: network,
                  paymentCred: Serialization_Address.keyHashCredential(Data_Newtype.unwrap()(skh))
              });
          };
      };
  };
  var stakePubKeyHashRewardAddress = function (networkId) {
      var $59 = ed25519RewardAddress()(networkId);
      var $60 = Data_Newtype.unwrap();
      return function ($61) {
          return Serialization_Address.rewardAddressToAddress($59($60($61)));
      };
  };
  var ed25519EnterpriseAddress = function () {
      return function (network) {
          return function (pkh) {
              return Serialization_Address.enterpriseAddress({
                  network: network,
                  paymentCred: Serialization_Address.keyHashCredential(Data_Newtype.unwrap()(pkh))
              });
          };
      };
  };
  var pubKeyHashEnterpriseAddress = function (networkId) {
      var $62 = ed25519EnterpriseAddress()(networkId);
      return function ($63) {
          return Serialization_Address.enterpriseAddressToAddress($62($63));
      };
  };
  var payPubKeyHashEnterpriseAddress = function (networkId) {
      return function (v) {
          return pubKeyHashEnterpriseAddress(networkId)(v);
      };
  };
  exports["payPubKeyHashBaseAddress"] = payPubKeyHashBaseAddress;
  exports["payPubKeyHashEnterpriseAddress"] = payPubKeyHashEnterpriseAddress;
  exports["stakePubKeyHashRewardAddress"] = stakePubKeyHashRewardAddress;
  exports["ordPaymentPubKeyHash"] = ordPaymentPubKeyHash;
  exports["showPaymentPubKeyHash"] = showPaymentPubKeyHash;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Types.TxConstraints"] = $PS["Types.TxConstraints"] || {};
  var exports = $PS["Types.TxConstraints"];
  var Data_Array = $PS["Data.Array"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];                      
  var MustIncludeDatum = (function () {
      function MustIncludeDatum(value0) {
          this.value0 = value0;
      };
      MustIncludeDatum.create = function (value0) {
          return new MustIncludeDatum(value0);
      };
      return MustIncludeDatum;
  })();
  var MustValidateIn = (function () {
      function MustValidateIn(value0) {
          this.value0 = value0;
      };
      MustValidateIn.create = function (value0) {
          return new MustValidateIn(value0);
      };
      return MustValidateIn;
  })();
  var MustBeSignedBy = (function () {
      function MustBeSignedBy(value0) {
          this.value0 = value0;
      };
      MustBeSignedBy.create = function (value0) {
          return new MustBeSignedBy(value0);
      };
      return MustBeSignedBy;
  })();
  var MustSpendAtLeast = (function () {
      function MustSpendAtLeast(value0) {
          this.value0 = value0;
      };
      MustSpendAtLeast.create = function (value0) {
          return new MustSpendAtLeast(value0);
      };
      return MustSpendAtLeast;
  })();
  var MustProduceAtLeast = (function () {
      function MustProduceAtLeast(value0) {
          this.value0 = value0;
      };
      MustProduceAtLeast.create = function (value0) {
          return new MustProduceAtLeast(value0);
      };
      return MustProduceAtLeast;
  })();
  var MustSpendPubKeyOutput = (function () {
      function MustSpendPubKeyOutput(value0) {
          this.value0 = value0;
      };
      MustSpendPubKeyOutput.create = function (value0) {
          return new MustSpendPubKeyOutput(value0);
      };
      return MustSpendPubKeyOutput;
  })();
  var MustSpendScriptOutput = (function () {
      function MustSpendScriptOutput(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      MustSpendScriptOutput.create = function (value0) {
          return function (value1) {
              return new MustSpendScriptOutput(value0, value1);
          };
      };
      return MustSpendScriptOutput;
  })();
  var MustMintValue = (function () {
      function MustMintValue(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      MustMintValue.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new MustMintValue(value0, value1, value2, value3);
                  };
              };
          };
      };
      return MustMintValue;
  })();
  var MustPayToPubKeyAddress = (function () {
      function MustPayToPubKeyAddress(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      MustPayToPubKeyAddress.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new MustPayToPubKeyAddress(value0, value1, value2, value3);
                  };
              };
          };
      };
      return MustPayToPubKeyAddress;
  })();
  var MustPayToScript = (function () {
      function MustPayToScript(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      MustPayToScript.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new MustPayToScript(value0, value1, value2);
              };
          };
      };
      return MustPayToScript;
  })();
  var MustHashDatum = (function () {
      function MustHashDatum(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      MustHashDatum.create = function (value0) {
          return function (value1) {
              return new MustHashDatum(value0, value1);
          };
      };
      return MustHashDatum;
  })();
  var MustSatisfyAnyOf = (function () {
      function MustSatisfyAnyOf(value0) {
          this.value0 = value0;
      };
      MustSatisfyAnyOf.create = function (value0) {
          return new MustSatisfyAnyOf(value0);
      };
      return MustSatisfyAnyOf;
  })();
  var TxConstraints = function (x) {
      return x;
  };
  var semigroupTxConstraints = Data_Semigroup.semigroupRecord()(Data_Semigroup.semigroupRecordCons({
      reflectSymbol: function () {
          return "constraints";
      }
  })()(Data_Semigroup.semigroupRecordCons({
      reflectSymbol: function () {
          return "ownInputs";
      }
  })()(Data_Semigroup.semigroupRecordCons({
      reflectSymbol: function () {
          return "ownOutputs";
      }
  })()(Data_Semigroup.semigroupRecordNil)(Data_Semigroup.semigroupArray))(Data_Semigroup.semigroupArray))(Data_Semigroup.semigroupArray));
  var monoidTxConstraints = Data_Monoid.monoidRecord()(Data_Monoid.monoidRecordCons({
      reflectSymbol: function () {
          return "constraints";
      }
  })(Data_Monoid.monoidArray)()(Data_Monoid.monoidRecordCons({
      reflectSymbol: function () {
          return "ownInputs";
      }
  })(Data_Monoid.monoidArray)()(Data_Monoid.monoidRecordCons({
      reflectSymbol: function () {
          return "ownOutputs";
      }
  })(Data_Monoid.monoidArray)()(Data_Monoid.monoidRecordNil))));
  var singleton = function (a) {
      return Data_Newtype.over()()(TxConstraints)(function (v) {
          return {
              constraints: Data_Array.singleton(a),
              ownInputs: v.ownInputs,
              ownOutputs: v.ownOutputs
          };
      })(Data_Monoid.mempty(monoidTxConstraints));
  };
  var mustSpendScriptOutput = function (txOutRef) {
      var $379 = MustSpendScriptOutput.create(txOutRef);
      return function ($380) {
          return singleton($379($380));
      };
  };
  var mustPayToScript = function (vh) {
      return function (dt) {
          return function (vl) {
              return Data_Semigroup.append(semigroupTxConstraints)(singleton(new MustPayToScript(vh, dt, vl)))(singleton(new MustIncludeDatum(dt)));
          };
      };
  };
  exports["MustIncludeDatum"] = MustIncludeDatum;
  exports["MustValidateIn"] = MustValidateIn;
  exports["MustBeSignedBy"] = MustBeSignedBy;
  exports["MustSpendAtLeast"] = MustSpendAtLeast;
  exports["MustProduceAtLeast"] = MustProduceAtLeast;
  exports["MustSpendPubKeyOutput"] = MustSpendPubKeyOutput;
  exports["MustSpendScriptOutput"] = MustSpendScriptOutput;
  exports["MustMintValue"] = MustMintValue;
  exports["MustPayToPubKeyAddress"] = MustPayToPubKeyAddress;
  exports["MustPayToScript"] = MustPayToScript;
  exports["MustHashDatum"] = MustHashDatum;
  exports["MustSatisfyAnyOf"] = MustSatisfyAnyOf;
  exports["mustPayToScript"] = mustPayToScript;
  exports["mustSpendScriptOutput"] = mustSpendScriptOutput;
  exports["semigroupTxConstraints"] = semigroupTxConstraints;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["FromData"] = $PS["FromData"] || {};
  var exports = $PS["FromData"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Unit = $PS["Data.Unit"];
  var Types_PlutusData = $PS["Types.PlutusData"];
  var fromDataUnit = {
      fromData: function (v) {
          if (v instanceof Types_PlutusData.Constr && (v.value1.length === 0 && Data_Eq.eq(Data_BigInt.eqBigInt)(v.value0)(Data_Semiring.zero(Data_BigInt.semiringBigInt)))) {
              return new Data_Maybe.Just(Data_Unit.unit);
          };
          return Data_Maybe.Nothing.value;
      }
  };
  var fromData = function (dict) {
      return dict.fromData;
  };
  exports["fromData"] = fromData;
  exports["fromDataUnit"] = fromDataUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Types.TypedTxOut"] = $PS["Types.TypedTxOut"] || {};
  var exports = $PS["Types.TypedTxOut"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Logger_Trans = $PS["Control.Monad.Logger.Trans"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Effect_Aff = $PS["Effect.Aff"];
  var FromData = $PS["FromData"];
  var Hashing = $PS["Hashing"];
  var Helpers = $PS["Helpers"];
  var QueryM = $PS["QueryM"];
  var Scripts = $PS["Scripts"];
  var Serialization_Address = $PS["Serialization.Address"];
  var ToData = $PS["ToData"];
  var Types_PlutusData = $PS["Types.PlutusData"];
  var Types_Transaction = $PS["Types.Transaction"];
  var WrongValidatorAddress = (function () {
      function WrongValidatorAddress(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      WrongValidatorAddress.create = function (value0) {
          return function (value1) {
              return new WrongValidatorAddress(value0, value1);
          };
      };
      return WrongValidatorAddress;
  })();
  var ExpectedScriptGotPubkey = (function () {
      function ExpectedScriptGotPubkey() {

      };
      ExpectedScriptGotPubkey.value = new ExpectedScriptGotPubkey();
      return ExpectedScriptGotPubkey;
  })();
  var WrongRedeemerType = (function () {
      function WrongRedeemerType(value0) {
          this.value0 = value0;
      };
      WrongRedeemerType.create = function (value0) {
          return new WrongRedeemerType(value0);
      };
      return WrongRedeemerType;
  })();
  var WrongDatumType = (function () {
      function WrongDatumType(value0) {
          this.value0 = value0;
      };
      WrongDatumType.create = function (value0) {
          return new WrongDatumType(value0);
      };
      return WrongDatumType;
  })();
  var CannotQueryDatum = (function () {
      function CannotQueryDatum(value0) {
          this.value0 = value0;
      };
      CannotQueryDatum.create = function (value0) {
          return new CannotQueryDatum(value0);
      };
      return CannotQueryDatum;
  })();
  var CannotMakeTypedTxOut = (function () {
      function CannotMakeTypedTxOut() {

      };
      CannotMakeTypedTxOut.value = new CannotMakeTypedTxOut();
      return CannotMakeTypedTxOut;
  })();
  var UnknownRef = (function () {
      function UnknownRef() {

      };
      UnknownRef.value = new UnknownRef();
      return UnknownRef;
  })();
  var genericTypeCheckError_ = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new WrongValidatorAddress(x.value0.value0, x.value0.value1);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return ExpectedScriptGotPubkey.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
              return new WrongRedeemerType(x.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
              return new WrongDatumType(x.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
              return new CannotQueryDatum(x.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
              return CannotMakeTypedTxOut.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr))))) {
              return UnknownRef.value;
          };
          throw new Error("Failed pattern match at Types.TypedTxOut (line 200, column 1 - line 200, column 41): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof WrongValidatorAddress) {
              return new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1));
          };
          if (x instanceof ExpectedScriptGotPubkey) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
          };
          if (x instanceof WrongRedeemerType) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
          };
          if (x instanceof WrongDatumType) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))));
          };
          if (x instanceof CannotQueryDatum) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))));
          };
          if (x instanceof CannotMakeTypedTxOut) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))));
          };
          if (x instanceof UnknownRef) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value))))));
          };
          throw new Error("Failed pattern match at Types.TypedTxOut (line 200, column 1 - line 200, column 41): " + [ x.constructor.name ]);
      }
  };
  var showTypeCheckError = {
      show: Data_Show_Generic.genericShow(genericTypeCheckError_)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Serialization_Address.showAddress))(Data_Show_Generic.genericShowArgsArgument(Serialization_Address.showAddress)))({
          reflectSymbol: function () {
              return "WrongValidatorAddress";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "ExpectedScriptGotPubkey";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_PlutusData.showPlutusData))({
          reflectSymbol: function () {
              return "WrongRedeemerType";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_PlutusData.showPlutusData))({
          reflectSymbol: function () {
              return "WrongDatumType";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Transaction.showDataHash))({
          reflectSymbol: function () {
              return "CannotQueryDatum";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "CannotMakeTypedTxOut";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "UnknownRef";
          }
      }))))))))
  };
  var typedTxOutValue = function () {
      return function (dictFromData) {
          return function (dictToData) {
              return function (v) {
                  return (Data_Newtype.unwrap()(v.txOut)).amount;
              };
          };
      };
  };
  var typedTxOutTxOut = function () {
      return function (dictFromData) {
          return function (dictToData) {
              return function (v) {
                  return v.txOut;
              };
          };
      };
  };
  var typedTxOutRefValue = function () {
      return function (dictFromData) {
          return function (dictToData) {
              return function (v) {
                  return typedTxOutValue()(dictFromData)(dictToData)(v.typedTxOut);
              };
          };
      };
  };
  var typedTxOutDatumHash = function () {
      return function (dictFromData) {
          return function (dictToData) {
              return function (v) {
                  return (Data_Newtype.unwrap()(v.txOut)).dataHash;
              };
          };
      };
  };
  var mkTypedTxOut = function () {
      return function (dictFromData) {
          return function (dictToData) {
              return function (networkId) {
                  return function (typedVal) {
                      return function (dt) {
                          return function (amount) {
                              var mkTypedTxOut$prime = function (dat) {
                                  return function (txOut) {
                                      return {
                                          txOut: txOut,
                                          data: dat
                                      };
                                  };
                              };
                              var mDHash = Hashing.datumHash(ToData.toData(dictToData)(dt));
                              var address = Scripts.typedValidatorEnterpriseAddress(networkId)(typedVal);
                              if (mDHash instanceof Data_Maybe.Nothing) {
                                  return Data_Maybe.Nothing.value;
                              };
                              if (mDHash instanceof Data_Maybe.Just) {
                                  return Data_Maybe.Just.create(mkTypedTxOut$prime(dt)(Data_Newtype.wrap()({
                                      address: address,
                                      amount: amount,
                                      dataHash: Control_Applicative.pure(Data_Maybe.applicativeMaybe)(mDHash.value0)
                                  })));
                              };
                              throw new Error("Failed pattern match at Types.TypedTxOut (line 178, column 5 - line 182, column 57): " + [ mDHash.constructor.name ]);
                          };
                      };
                  };
              };
          };
      };
  };
  var checkValidatorAddress = function (dictMonad) {
      return function (networkId) {
          return function (typedVal) {
              return function (actualAddr) {
                  return Control_Monad_Except_Trans.runExceptT((function () {
                      var expectedAddr = Scripts.typedValidatorEnterpriseAddress(networkId)(typedVal);
                      return Control_Applicative.unless(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(Data_Eq.eq(Serialization_Address.eqAddress)(expectedAddr)(actualAddr))(Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(dictMonad))(new WrongValidatorAddress(expectedAddr, actualAddr)));
                  })());
              };
          };
      };
  };
  var checkDatum = function (dictMonad) {
      return function () {
          return function (dictFromData) {
              return function (v) {
                  return function (v1) {
                      return Control_Monad_Except_Trans.runExceptT(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(dictMonad))(new WrongDatumType(v1))(FromData.fromData(dictFromData)(v1)));
                  };
              };
          };
      };
  };
  var typeTxOut = function () {
      return function (dictFromData) {
          return function (dictToData) {
              return function (networkId) {
                  return function (typedVal) {
                      return function (v) {
                          return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(ExpectedScriptGotPubkey.value)(v.dataHash))(function (dHash) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Data_Functor["void"](Control_Monad_Except_Trans.functorExceptT(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff))))(checkValidatorAddress(Control_Monad_Except_Trans.monadExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(networkId)(typedVal)(v.address)))(function () {
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(QueryM.getDatumByHash(dHash))(Data_Either.note(new CannotQueryDatum(dHash))))(function (pd) {
                                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(checkDatum(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))()(dictFromData)(typedVal)(pd))(function (dtOut) {
                                          return Control_Monad_Except_Trans.except(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff)))(Data_Either.note(CannotMakeTypedTxOut.value)(mkTypedTxOut()(dictFromData)(dictToData)(networkId)(typedVal)(dtOut)(v.amount)));
                                      });
                                  });
                              });
                          }));
                      };
                  };
              };
          };
      };
  };
  var typeTxOutRef = function () {
      return function (dictFromData) {
          return function (dictToData) {
              return function (networkId) {
                  return function (lookupRef) {
                      return function (typedVal) {
                          return function (txOutRef) {
                              return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(UnknownRef.value)(lookupRef(txOutRef)))(function (out) {
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(typeTxOut()(dictFromData)(dictToData)(networkId)(typedVal)(out))(function (typedTxOut) {
                                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))({
                                          txOutRef: txOutRef,
                                          typedTxOut: typedTxOut
                                      });
                                  });
                              }));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["mkTypedTxOut"] = mkTypedTxOut;
  exports["typeTxOutRef"] = typeTxOutRef;
  exports["typedTxOutDatumHash"] = typedTxOutDatumHash;
  exports["typedTxOutRefValue"] = typedTxOutRefValue;
  exports["typedTxOutTxOut"] = typedTxOutTxOut;
  exports["showTypeCheckError"] = showTypeCheckError;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Types.UnbalancedTransaction"] = $PS["Types.UnbalancedTransaction"] || {};
  var exports = $PS["Types.UnbalancedTransaction"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Tuple = $PS["Data.Tuple"];
  var emptyUnbalancedTx = {
      transaction: Data_Monoid.mempty(Cardano_Types_Transaction.monoidTransaction),
      utxoIndex: Data_Map_Internal.empty
  };
  var _utxoIndex = function (dictStrong) {
      return Data_Lens_Lens["lens'"](function (v) {
          return new Data_Tuple.Tuple(v.utxoIndex, function (utxoIx) {
              return {
                  transaction: v.transaction,
                  utxoIndex: utxoIx
              };
          });
      })(dictStrong);
  };
  var _transaction = function (dictStrong) {
      return Data_Lens_Lens["lens'"](function (v) {
          return new Data_Tuple.Tuple(v.transaction, function (tx) {
              return {
                  transaction: tx,
                  utxoIndex: v.utxoIndex
              };
          });
      })(dictStrong);
  };
  exports["_transaction"] = _transaction;
  exports["_utxoIndex"] = _utxoIndex;
  exports["emptyUnbalancedTx"] = emptyUnbalancedTx;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Types.ScriptLookups"] = $PS["Types.ScriptLookups"] || {};
  var exports = $PS["Types.ScriptLookups"];
  var Address = $PS["Address"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Cardano_Types_Value = $PS["Cardano.Types.Value"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Logger_Trans = $PS["Control.Monad.Logger.Trans"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Lattice = $PS["Data.Lattice"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Iso_Newtype = $PS["Data.Lens.Iso.Newtype"];
  var Data_Lens_Record = $PS["Data.Lens.Record"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Hashing = $PS["Hashing"];
  var Helpers = $PS["Helpers"];
  var Plutus_Conversion = $PS["Plutus.Conversion"];
  var Plutus_Conversion_Value = $PS["Plutus.Conversion.Value"];
  var QueryM = $PS["QueryM"];
  var QueryM_EraSummaries = $PS["QueryM.EraSummaries"];
  var QueryM_ProtocolParameters = $PS["QueryM.ProtocolParameters"];
  var QueryM_SystemStart = $PS["QueryM.SystemStart"];
  var Scripts = $PS["Scripts"];
  var Serialization_Address = $PS["Serialization.Address"];
  var Transaction = $PS["Transaction"];
  var TxOutput = $PS["TxOutput"];
  var Types_Datum = $PS["Types.Datum"];
  var Types_Interval = $PS["Types.Interval"];
  var Types_PubKeyHash = $PS["Types.PubKeyHash"];
  var Types_RedeemerTag = $PS["Types.RedeemerTag"];
  var Types_Scripts = $PS["Types.Scripts"];
  var Types_TokenName = $PS["Types.TokenName"];
  var Types_Transaction = $PS["Types.Transaction"];
  var Types_TxConstraints = $PS["Types.TxConstraints"];
  var Types_TypedTxOut = $PS["Types.TypedTxOut"];
  var Types_UnbalancedTransaction = $PS["Types.UnbalancedTransaction"];
  var ScriptLookups = function (x) {
      return x;
  };
  var TypeCheckFailed = (function () {
      function TypeCheckFailed(value0) {
          this.value0 = value0;
      };
      TypeCheckFailed.create = function (value0) {
          return new TypeCheckFailed(value0);
      };
      return TypeCheckFailed;
  })();
  var ModifyTx = (function () {
      function ModifyTx(value0) {
          this.value0 = value0;
      };
      ModifyTx.create = function (value0) {
          return new ModifyTx(value0);
      };
      return ModifyTx;
  })();
  var TxOutRefNotFound = (function () {
      function TxOutRefNotFound(value0) {
          this.value0 = value0;
      };
      TxOutRefNotFound.create = function (value0) {
          return new TxOutRefNotFound(value0);
      };
      return TxOutRefNotFound;
  })();
  var TxOutRefWrongType = (function () {
      function TxOutRefWrongType(value0) {
          this.value0 = value0;
      };
      TxOutRefWrongType.create = function (value0) {
          return new TxOutRefWrongType(value0);
      };
      return TxOutRefWrongType;
  })();
  var DatumNotFound = (function () {
      function DatumNotFound(value0) {
          this.value0 = value0;
      };
      DatumNotFound.create = function (value0) {
          return new DatumNotFound(value0);
      };
      return DatumNotFound;
  })();
  var MintingPolicyNotFound = (function () {
      function MintingPolicyNotFound(value0) {
          this.value0 = value0;
      };
      MintingPolicyNotFound.create = function (value0) {
          return new MintingPolicyNotFound(value0);
      };
      return MintingPolicyNotFound;
  })();
  var MintingPolicyHashNotCurrencySymbol = (function () {
      function MintingPolicyHashNotCurrencySymbol(value0) {
          this.value0 = value0;
      };
      MintingPolicyHashNotCurrencySymbol.create = function (value0) {
          return new MintingPolicyHashNotCurrencySymbol(value0);
      };
      return MintingPolicyHashNotCurrencySymbol;
  })();
  var CannotMakeValue = (function () {
      function CannotMakeValue(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      CannotMakeValue.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new CannotMakeValue(value0, value1, value2);
              };
          };
      };
      return CannotMakeValue;
  })();
  var ValidatorHashNotFound = (function () {
      function ValidatorHashNotFound(value0) {
          this.value0 = value0;
      };
      ValidatorHashNotFound.create = function (value0) {
          return new ValidatorHashNotFound(value0);
      };
      return ValidatorHashNotFound;
  })();
  var OwnPubKeyAndStakeKeyMissing = (function () {
      function OwnPubKeyAndStakeKeyMissing() {

      };
      OwnPubKeyAndStakeKeyMissing.value = new OwnPubKeyAndStakeKeyMissing();
      return OwnPubKeyAndStakeKeyMissing;
  })();
  var TypedValidatorMissing = (function () {
      function TypedValidatorMissing() {

      };
      TypedValidatorMissing.value = new TypedValidatorMissing();
      return TypedValidatorMissing;
  })();
  var DatumWrongHash = (function () {
      function DatumWrongHash(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DatumWrongHash.create = function (value0) {
          return function (value1) {
              return new DatumWrongHash(value0, value1);
          };
      };
      return DatumWrongHash;
  })();
  var CannotQueryDatum = (function () {
      function CannotQueryDatum(value0) {
          this.value0 = value0;
      };
      CannotQueryDatum.create = function (value0) {
          return new CannotQueryDatum(value0);
      };
      return CannotQueryDatum;
  })();
  var CannotHashDatum = (function () {
      function CannotHashDatum(value0) {
          this.value0 = value0;
      };
      CannotHashDatum.create = function (value0) {
          return new CannotHashDatum(value0);
      };
      return CannotHashDatum;
  })();
  var CannotConvertPOSIXTimeRange = (function () {
      function CannotConvertPOSIXTimeRange(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CannotConvertPOSIXTimeRange.create = function (value0) {
          return function (value1) {
              return new CannotConvertPOSIXTimeRange(value0, value1);
          };
      };
      return CannotConvertPOSIXTimeRange;
  })();
  var CannotGetMintingPolicyScriptIndex = (function () {
      function CannotGetMintingPolicyScriptIndex() {

      };
      CannotGetMintingPolicyScriptIndex.value = new CannotGetMintingPolicyScriptIndex();
      return CannotGetMintingPolicyScriptIndex;
  })();
  var CannotGetValidatorHashFromAddress = (function () {
      function CannotGetValidatorHashFromAddress(value0) {
          this.value0 = value0;
      };
      CannotGetValidatorHashFromAddress.create = function (value0) {
          return new CannotGetValidatorHashFromAddress(value0);
      };
      return CannotGetValidatorHashFromAddress;
  })();
  var MkTypedTxOutFailed = (function () {
      function MkTypedTxOutFailed() {

      };
      MkTypedTxOutFailed.value = new MkTypedTxOutFailed();
      return MkTypedTxOutFailed;
  })();
  var TypedTxOutHasNoDatumHash = (function () {
      function TypedTxOutHasNoDatumHash() {

      };
      TypedTxOutHasNoDatumHash.value = new TypedTxOutHasNoDatumHash();
      return TypedTxOutHasNoDatumHash;
  })();
  var CannotHashMintingPolicy = (function () {
      function CannotHashMintingPolicy(value0) {
          this.value0 = value0;
      };
      CannotHashMintingPolicy.create = function (value0) {
          return new CannotHashMintingPolicy(value0);
      };
      return CannotHashMintingPolicy;
  })();
  var CannotHashValidator = (function () {
      function CannotHashValidator(value0) {
          this.value0 = value0;
      };
      CannotHashValidator.create = function (value0) {
          return new CannotHashValidator(value0);
      };
      return CannotHashValidator;
  })();
  var CannotConvertPaymentPubKeyHash = (function () {
      function CannotConvertPaymentPubKeyHash(value0) {
          this.value0 = value0;
      };
      CannotConvertPaymentPubKeyHash.create = function (value0) {
          return new CannotConvertPaymentPubKeyHash(value0);
      };
      return CannotConvertPaymentPubKeyHash;
  })();
  var CannotSatisfyAny = (function () {
      function CannotSatisfyAny() {

      };
      CannotSatisfyAny.value = new CannotSatisfyAny();
      return CannotSatisfyAny;
  })();
  var CannotConvertFromPlutusType = (function () {
      function CannotConvertFromPlutusType() {

      };
      CannotConvertFromPlutusType.value = new CannotConvertFromPlutusType();
      return CannotConvertFromPlutusType;
  })();
  var semigroupValueSpentBalanc = {
      append: function (v) {
          return function (v1) {
              return {
                  required: Data_Lattice.join(Cardano_Types_Value.joinSemilatticeValue)(v.required)(v1.required),
                  provided: Data_Lattice.join(Cardano_Types_Value.joinSemilatticeValue)(v.provided)(v1.provided)
              };
          };
      }
  };
  var semigroupScriptLookups = {
      append: function (v) {
          return function (v1) {
              return {
                  mps: Data_Array.union(Types_Scripts.eqMintingPolicy)(v.mps)(v1.mps),
                  txOutputs: Data_Map_Internal.union(Types_Transaction.ordTransactionInput)(v.txOutputs)(v1.txOutputs),
                  scripts: Data_Array.union(Types_Scripts.eqValidator)(v.scripts)(v1.scripts),
                  datums: Data_Map_Internal.union(Types_Transaction.ordDataHash)(v.datums)(v1.datums),
                  paymentPubKeyHashes: Data_Map_Internal.union(Types_PubKeyHash.ordPaymentPubKeyHash)(v.paymentPubKeyHashes)(v1.paymentPubKeyHashes),
                  typedValidator: Helpers.appendFirstMaybe(v.typedValidator)(v1.typedValidator),
                  ownPaymentPubKeyHash: Helpers.appendFirstMaybe(v.ownPaymentPubKeyHash)(v1.ownPaymentPubKeyHash),
                  ownStakePubKeyHash: Helpers.appendFirstMaybe(v.ownStakePubKeyHash)(v1.ownStakePubKeyHash)
              };
          };
      }
  };
  var monoidScriptLookups = {
      mempty: {
          mps: Data_Monoid.mempty(Data_Monoid.monoidArray),
          txOutputs: Data_Map_Internal.empty,
          scripts: Data_Monoid.mempty(Data_Monoid.monoidArray),
          datums: Data_Map_Internal.empty,
          paymentPubKeyHashes: Data_Map_Internal.empty,
          typedValidator: Data_Maybe.Nothing.value,
          ownPaymentPubKeyHash: Data_Maybe.Nothing.value,
          ownStakePubKeyHash: Data_Maybe.Nothing.value
      },
      Semigroup0: function () {
          return semigroupScriptLookups;
      }
  };
  var genericMkUnbalancedTxErro = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new TypeCheckFailed(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return new ModifyTx(x.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
              return new TxOutRefNotFound(x.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
              return new TxOutRefWrongType(x.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
              return new DatumNotFound(x.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
              return new MintingPolicyNotFound(x.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))) {
              return new MintingPolicyHashNotCurrencySymbol(x.value0.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))) {
              return new CannotMakeValue(x.value0.value0.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value1.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value1.value1);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))) {
              return new ValidatorHashNotFound(x.value0.value0.value0.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))) {
              return OwnPubKeyAndStakeKeyMissing.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))) {
              return TypedValidatorMissing.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))) {
              return new DatumWrongHash(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value1);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))) {
              return new CannotQueryDatum(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))) {
              return new CannotHashDatum(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))))) {
              return new CannotConvertPOSIXTimeRange(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value1);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))))) {
              return CannotGetMintingPolicyScriptIndex.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))))))) {
              return new CannotGetValidatorHashFromAddress(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))))))) {
              return MkTypedTxOutFailed.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))))))))) {
              return TypedTxOutHasNoDatumHash.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))))))))) {
              return new CannotHashMintingPolicy(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))))))))))) {
              return new CannotHashValidator(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))))))))))))))) {
              return new CannotConvertPaymentPubKeyHash(x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))))))))))))))) {
              return CannotSatisfyAny.value;
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr)))))))))))))))))))))) {
              return CannotConvertFromPlutusType.value;
          };
          throw new Error("Failed pattern match at Types.ScriptLookups (line 785, column 1 - line 785, column 46): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof TypeCheckFailed) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof ModifyTx) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
          };
          if (x instanceof TxOutRefNotFound) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
          };
          if (x instanceof TxOutRefWrongType) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))));
          };
          if (x instanceof DatumNotFound) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))));
          };
          if (x instanceof MintingPolicyNotFound) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))))));
          };
          if (x instanceof MintingPolicyHashNotCurrencySymbol) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))))));
          };
          if (x instanceof CannotMakeValue) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, new Data_Generic_Rep.Product(x.value1, x.value2))))))))));
          };
          if (x instanceof ValidatorHashNotFound) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))))))));
          };
          if (x instanceof OwnPubKeyAndStakeKeyMissing) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))));
          };
          if (x instanceof TypedValidatorMissing) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))))));
          };
          if (x instanceof DatumWrongHash) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1)))))))))))));
          };
          if (x instanceof CannotQueryDatum) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))))))))))));
          };
          if (x instanceof CannotHashDatum) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))))))))))))));
          };
          if (x instanceof CannotConvertPOSIXTimeRange) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1))))))))))))))));
          };
          if (x instanceof CannotGetMintingPolicyScriptIndex) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))))))))));
          };
          if (x instanceof CannotGetValidatorHashFromAddress) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))))))))))))))));
          };
          if (x instanceof MkTypedTxOutFailed) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))))))))))));
          };
          if (x instanceof TypedTxOutHasNoDatumHash) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))))))))))))));
          };
          if (x instanceof CannotHashMintingPolicy) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))))))))))))))))))));
          };
          if (x instanceof CannotHashValidator) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))))))))))))))))))));
          };
          if (x instanceof CannotConvertPaymentPubKeyHash) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))))))))))))))))))))));
          };
          if (x instanceof CannotSatisfyAny) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))))))))))))))))));
          };
          if (x instanceof CannotConvertFromPlutusType) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)))))))))))))))))))))));
          };
          throw new Error("Failed pattern match at Types.ScriptLookups (line 785, column 1 - line 785, column 46): " + [ x.constructor.name ]);
      }
  };
  var showMkUnbalancedTxError = {
      show: Data_Show_Generic.genericShow(genericMkUnbalancedTxErro)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_TypedTxOut.showTypeCheckError))({
          reflectSymbol: function () {
              return "TypeCheckFailed";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Transaction.showModifyTxError))({
          reflectSymbol: function () {
              return "ModifyTx";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Transaction.showTransactionInput))({
          reflectSymbol: function () {
              return "TxOutRefNotFound";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Transaction.showTransactionInput))({
          reflectSymbol: function () {
              return "TxOutRefWrongType";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Transaction.showDataHash))({
          reflectSymbol: function () {
              return "DatumNotFound";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Scripts.showMintingPolicyHash))({
          reflectSymbol: function () {
              return "MintingPolicyNotFound";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Scripts.showMintingPolicyHash))({
          reflectSymbol: function () {
              return "MintingPolicyHashNotCurrencySymbol";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Cardano_Types_Value.showCurrencySymbol))(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Types_TokenName.showTokenName))(Data_Show_Generic.genericShowArgsArgument(Data_BigInt.showBigInt))))({
          reflectSymbol: function () {
              return "CannotMakeValue";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Scripts.showValidatorHash))({
          reflectSymbol: function () {
              return "ValidatorHashNotFound";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "OwnPubKeyAndStakeKeyMissing";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "TypedValidatorMissing";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Types_Transaction.showDataHash))(Data_Show_Generic.genericShowArgsArgument(Types_Datum.showDatum)))({
          reflectSymbol: function () {
              return "DatumWrongHash";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Transaction.showDataHash))({
          reflectSymbol: function () {
              return "CannotQueryDatum";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Datum.showDatum))({
          reflectSymbol: function () {
              return "CannotHashDatum";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Types_Interval.showInterval(Types_Interval.showPOSIXTime)))(Data_Show_Generic.genericShowArgsArgument(Types_Interval.showPosixTimeToSlotError)))({
          reflectSymbol: function () {
              return "CannotConvertPOSIXTimeRange";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "CannotGetMintingPolicyScriptIndex";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Serialization_Address.showAddress))({
          reflectSymbol: function () {
              return "CannotGetValidatorHashFromAddress";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "MkTypedTxOutFailed";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "TypedTxOutHasNoDatumHash";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Scripts.showMintingPolicy))({
          reflectSymbol: function () {
              return "CannotHashMintingPolicy";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_Scripts.showValidator))({
          reflectSymbol: function () {
              return "CannotHashValidator";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Types_PubKeyHash.showPaymentPubKeyHash))({
          reflectSymbol: function () {
              return "CannotConvertPaymentPubKeyHash";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "CannotSatisfyAny";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "CannotConvertFromPlutusType";
          }
      })))))))))))))))))))))))))
  };
  var validator = function (vl) {
      return Data_Newtype.over()()(ScriptLookups)(function (v) {
          return {
              scripts: Data_Array.singleton(vl),
              datums: v.datums,
              mps: v.mps,
              ownPaymentPubKeyHash: v.ownPaymentPubKeyHash,
              ownStakePubKeyHash: v.ownStakePubKeyHash,
              paymentPubKeyHashes: v.paymentPubKeyHashes,
              txOutputs: v.txOutputs,
              typedValidator: v.typedValidator
          };
      })(Data_Monoid.mempty(monoidScriptLookups));
  };   
  var unspentOutputs = function (mp) {
      return Data_Newtype.over()()(ScriptLookups)(function (v) {
          return {
              txOutputs: mp,
              datums: v.datums,
              mps: v.mps,
              ownPaymentPubKeyHash: v.ownPaymentPubKeyHash,
              ownStakePubKeyHash: v.ownStakePubKeyHash,
              paymentPubKeyHashes: v.paymentPubKeyHashes,
              scripts: v.scripts,
              typedValidator: v.typedValidator
          };
      })(Data_Monoid.mempty(monoidScriptLookups));
  };   
  var require = function (required) {
      return {
          required: required,
          provided: Data_Monoid.mempty(Cardano_Types_Value.monoidValue)
      };
  };
  var provide = function (provided) {
      return {
          provided: provided,
          required: Data_Monoid.mempty(Cardano_Types_Value.monoidValue)
      };
  };
  var ownStakePubKeyHash = function (skh) {
      return Data_Newtype.over()()(ScriptLookups)(function (v) {
          return {
              ownStakePubKeyHash: new Data_Maybe.Just(skh),
              datums: v.datums,
              mps: v.mps,
              ownPaymentPubKeyHash: v.ownPaymentPubKeyHash,
              paymentPubKeyHashes: v.paymentPubKeyHashes,
              scripts: v.scripts,
              txOutputs: v.txOutputs,
              typedValidator: v.typedValidator
          };
      })(Data_Monoid.mempty(monoidScriptLookups));
  };   
  var ownPaymentPubKeyHash = function (pkh) {
      return Data_Newtype.over()()(ScriptLookups)(function (v) {
          return {
              ownPaymentPubKeyHash: new Data_Maybe.Just(pkh),
              datums: v.datums,
              mps: v.mps,
              ownStakePubKeyHash: v.ownStakePubKeyHash,
              paymentPubKeyHashes: v.paymentPubKeyHashes,
              scripts: v.scripts,
              txOutputs: v.txOutputs,
              typedValidator: v.typedValidator
          };
      })(Data_Monoid.mempty(monoidScriptLookups));
  };   
  var missingValueSpent = function (v) {
      var difference = Data_Semigroup.append(Cardano_Types_Value.semigroupValue)(v.required)(Cardano_Types_Value.negation(Cardano_Types_Value.negateValue)(v.provided));
      var v1 = Cardano_Types_Value.split(Cardano_Types_Value.splitValue)(difference);
      return v1.value1;
  };
  var totalMissingValue = function (v) {
      return Data_Lattice.join(Cardano_Types_Value.joinSemilatticeValue)(missingValueSpent(v.valueSpentBalancesInputs))(missingValueSpent(v.valueSpentBalancesOutputs));
  };   
  var lookupValidator = function (vh) {
      return function (osMap) {
          var err = Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(new ValidatorHashNotFound(vh)));
          return Data_Maybe.maybe(err)((function () {
              var $650 = Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))));
              return function ($651) {
                  return $650(Data_Either.Right.create($651));
              };
          })())(Data_Map_Internal.lookup(Types_Scripts.ordValidatorHash)(vh)(osMap));
      };
  };
  var lookupMintingPolicy = function (mph) {
      return function (mpsMap) {
          var err = Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(new MintingPolicyNotFound(mph)));
          return Data_Maybe.maybe(err)((function () {
              var $652 = Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))));
              return function ($653) {
                  return $652(Data_Either.Right.create($653));
              };
          })())(Data_Map_Internal.lookup(Types_Scripts.ordMintingPolicyHash)(mph)(mpsMap));
      };
  };
  var datum = function (dt) {
      return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(Hashing.datumHash(dt))(function (dh) {
          return Data_Newtype.over()()(ScriptLookups)(function (v) {
              return {
                  datums: Data_Map_Internal.singleton(dh)(dt),
                  mps: v.mps,
                  ownPaymentPubKeyHash: v.ownPaymentPubKeyHash,
                  ownStakePubKeyHash: v.ownStakePubKeyHash,
                  paymentPubKeyHashes: v.paymentPubKeyHashes,
                  scripts: v.scripts,
                  txOutputs: v.txOutputs,
                  typedValidator: v.typedValidator
              };
          })(Data_Monoid.mempty(monoidScriptLookups));
      });
  };
  var _valueSpentBalancesOutputs = function (dictStrong) {
      return Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "valueSpentBalancesOutputs";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
  };
  var _valueSpentBalancesInputs = function (dictStrong) {
      return Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "valueSpentBalancesInputs";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
  };
  var _unbalancedTx = function (dictStrong) {
      return Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "unbalancedTx";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
  };
  var attachToCps = function (handler) {
      return function (object) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Data_Lens_Getter.use(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))((function () {
              var $654 = _unbalancedTx(Data_Lens_Internal_Forget.strongForget);
              var $655 = Types_UnbalancedTransaction["_transaction"](Data_Lens_Internal_Forget.strongForget);
              return function ($656) {
                  return $654($655($656));
              };
          })()))(function (tx) {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Effect_Class.liftEffect(Control_Monad_State_Trans.monadEffectState(Control_Monad_Reader_Trans.monadEffectReader(Control_Monad_Logger_Trans.monadEffectLoggerT(Effect_Aff.monadEffectAff))))(Data_Functor.mapFlipped(Effect.functorEffect)(handler(object)(tx))(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(ModifyTx.create))))(function (newTx) {
                  return Data_Either.either((function () {
                      var $657 = Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))));
                      var $658 = Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither);
                      return function ($659) {
                          return $657($658($659));
                      };
                  })())((function () {
                      var $660 = Data_Functor.map(Control_Monad_State_Trans.functorStateT(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff))))(Data_Either.Right.create);
                      var $661 = Data_Lens_Setter.assign(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))((function () {
                          var $663 = _unbalancedTx(Data_Profunctor_Strong.strongFn);
                          var $664 = Types_UnbalancedTransaction["_transaction"](Data_Profunctor_Strong.strongFn);
                          return function ($665) {
                              return $663($664($665));
                          };
                      })());
                      return function ($662) {
                          return $660($661($662));
                      };
                  })())(newTx);
              });
          });
      };
  };
  var _redeemers = function (dictStrong) {
      return Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "redeemers";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
  };
  var _mintRedeemers = function (dictStrong) {
      return Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "mintRedeemers";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
  };
  var reindexMintRedeemers = function (mpsHash) {
      return function (redeemer) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Data_Lens_Setter.modifying(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(_mintRedeemers(Data_Profunctor_Strong.strongFn))(Data_Map_Internal.insert(Types_Scripts.ordMintingPolicyHash)(mpsHash)(redeemer)))(function () {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Data_Functor.mapFlipped(Control_Monad_State_Trans.functorStateT(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff))))(Data_Lens_Getter.use(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(_mintRedeemers(Data_Lens_Internal_Forget.strongForget)))(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)))(function (v) {
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Data_Array.mapWithIndex(function (ix) {
                      return function (v1) {
                          return {
                              tag: v1.value1.tag,
                              index: Data_BigInt.fromInt(ix),
                              data: v1.value1.data,
                              exUnits: v1.value1.exUnits
                          };
                      };
                  })(v));
              });
          });
      };
  };
  var _lookups = function (dictStrong) {
      return Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "lookups";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
  };
  var lookupDatum = function (dh) {
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Data_Functor.mapFlipped(Control_Monad_State_Trans.functorStateT(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff))))(Data_Lens_Getter.use(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(_lookups(Data_Lens_Internal_Forget.strongForget)))((function () {
          var $666 = Data_Newtype.unwrap();
          return function ($667) {
              return (function (v) {
                  return v.datums;
              })($666($667));
          };
      })()))(function (otherDt) {
          var err = Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(new DatumNotFound(dh)));
          return Data_Maybe.maybe(err)((function () {
              var $668 = Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))));
              return function ($669) {
                  return $668(Data_Either.Right.create($669));
              };
          })())(Data_Map_Internal.lookup(Types_Transaction.ordDataHash)(dh)(otherDt));
      });
  };
  var _datums = function (dictStrong) {
      return Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "datums";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
  };
  var addDatum = function (dat) {
      return Control_Monad_Except_Trans.runExceptT(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(attachToCps(Transaction.attachDatum)(dat))(function () {
          return Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Semigroup.semigroupArray)(_datums(Data_Profunctor_Strong.strongFn))(Data_Array.singleton(dat));
      }));
  };
  var _cpsToTransaction = function (dictStrong) {
      var $670 = _unbalancedTx(dictStrong);
      var $671 = Types_UnbalancedTransaction["_transaction"](dictStrong);
      return function ($672) {
          return $670($671($672));
      };
  };
  var _cpsToTxBody = function (dictStrong) {
      var $673 = _cpsToTransaction(dictStrong);
      var $674 = Cardano_Types_Transaction["_body"](dictStrong);
      return function ($675) {
          return $673($674($675));
      };
  };
  var getNetworkId = Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Data_Lens_Getter.use(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))((function () {
      var $676 = _cpsToTxBody(Data_Lens_Internal_Forget.strongForget);
      var $677 = Cardano_Types_Transaction["_networkId"](Data_Lens_Internal_Forget.strongForget);
      return function ($678) {
          return $676($677($678));
      };
  })()))(Data_Maybe.maybe(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))(Control_Monad_Reader_Class.asks(Control_Monad_Reader_Trans.monadAskReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))(function (v) {
      return v.networkId;
  })))(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))));
  var addMissingValueSpent = Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Control_Monad_State_Class.gets(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(totalMissingValue))(function (missing) {
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(getNetworkId)(function (networkId) {
          var $555 = Cardano_Types_Value.isZero(missing);
          if ($555) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(new Data_Either.Right(Data_Unit.unit));
          };
          return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Functor.mapFlipped(Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))))(Data_Lens_Getter.use(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(_lookups(Data_Lens_Internal_Forget.strongForget)))(Data_Newtype.unwrap()))(function (lookups) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))((function () {
                  if (lookups.ownPaymentPubKeyHash instanceof Data_Maybe.Nothing && lookups.ownStakePubKeyHash instanceof Data_Maybe.Nothing) {
                      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(OwnPubKeyAndStakeKeyMissing.value);
                  };
                  if (lookups.ownPaymentPubKeyHash instanceof Data_Maybe.Just && lookups.ownStakePubKeyHash instanceof Data_Maybe.Just) {
                      return Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(new Data_Either.Right({
                          address: Types_PubKeyHash.payPubKeyHashBaseAddress(networkId)(lookups.ownPaymentPubKeyHash.value0)(lookups.ownStakePubKeyHash.value0),
                          amount: missing,
                          dataHash: Data_Maybe.Nothing.value
                      }));
                  };
                  if (lookups.ownPaymentPubKeyHash instanceof Data_Maybe.Just && lookups.ownStakePubKeyHash instanceof Data_Maybe.Nothing) {
                      return Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(new Data_Either.Right({
                          address: Types_PubKeyHash.payPubKeyHashEnterpriseAddress(networkId)(lookups.ownPaymentPubKeyHash.value0),
                          amount: missing,
                          dataHash: Data_Maybe.Nothing.value
                      }));
                  };
                  if (lookups.ownPaymentPubKeyHash instanceof Data_Maybe.Nothing && lookups.ownStakePubKeyHash instanceof Data_Maybe.Just) {
                      return Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(new Data_Either.Right({
                          address: Types_PubKeyHash.stakePubKeyHashRewardAddress(networkId)(lookups.ownStakePubKeyHash.value0),
                          amount: missing,
                          dataHash: Data_Maybe.Nothing.value
                      }));
                  };
                  throw new Error("Failed pattern match at Types.ScriptLookups (line 671, column 14 - line 687, column 10): " + [ lookups.ownPaymentPubKeyHash.constructor.name, lookups.ownStakePubKeyHash.constructor.name ]);
              })())(function (txOut) {
                  return Data_Lens_Setter.modifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))((function () {
                      var $679 = _cpsToTxBody(Data_Profunctor_Strong.strongFn);
                      var $680 = Cardano_Types_Transaction["_outputs"](Data_Profunctor_Strong.strongFn);
                      return function ($681) {
                          return $679($680($681));
                      };
                  })())(Data_Array.cons(txOut));
              });
          }));
      });
  });
  var addOwnInput = function () {
      return function () {
          return function (dictFromData) {
              return function (dictToData) {
                  return function (v) {
                      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(getNetworkId)(function (networkId) {
                          return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Lens_Getter.use(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(_lookups(Data_Lens_Internal_Forget.strongForget)))(function (v1) {
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(CannotConvertFromPlutusType.value)(Data_Traversable.traverse(Data_Map_Internal.traversableMap)(Data_Maybe.applicativeMaybe)(Plutus_Conversion.fromPlutusTxOutput(networkId))(v1.txOutputs)))(function (cTxOutputs) {
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(TypedValidatorMissing.value)(v1.typedValidator))(function (inst) {
                                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))(Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(Types_TypedTxOut.typeTxOutRef()(dictFromData)(dictToData)(networkId)(Data_Function.flip(Data_Map_Internal.lookup(Types_Transaction.ordTransactionInput))(cTxOutputs))(inst)(v.txOutRef))(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(TypeCheckFailed.create))))(function (typedTxOutRef) {
                                          var value = Types_TypedTxOut.typedTxOutRefValue()(dictFromData)(dictToData)(typedTxOutRef);
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Lens_Setter.modifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))((function () {
                                              var $682 = _cpsToTxBody(Data_Profunctor_Strong.strongFn);
                                              var $683 = Cardano_Types_Transaction["_inputs"](Data_Profunctor_Strong.strongFn);
                                              return function ($684) {
                                                  return $682($683($684));
                                              };
                                          })())(Data_Array.insert(Types_Transaction.ordTransactionInput)(v.txOutRef)))(function () {
                                              return Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(semigroupValueSpentBalanc)(_valueSpentBalancesInputs(Data_Profunctor_Strong.strongFn))(provide(value));
                                          });
                                      });
                                  });
                              });
                          }));
                      });
                  };
              };
          };
      };
  };
  var addOwnOutput = function () {
      return function (dictFromData) {
          return function (dictToData) {
              return function (v) {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(getNetworkId)(function (networkId) {
                      return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Lens_Getter.use(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(_lookups(Data_Lens_Internal_Forget.strongForget)))(function (v1) {
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(TypedValidatorMissing.value)(v1.typedValidator))(function (inst) {
                              var value$prime = Plutus_Conversion_Value.fromPlutusValue(v.value);
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Control_Monad_Except_Trans.except(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Data_Either.note(MkTypedTxOutFailed.value)(Types_TypedTxOut.mkTypedTxOut()(dictFromData)(dictToData)(networkId)(inst)(v.datum)(value$prime))))(function (typedTxOut) {
                                  var txOut = Types_TypedTxOut.typedTxOutTxOut()(dictFromData)(dictToData)(typedTxOut);
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(TypedTxOutHasNoDatumHash.value)(Types_TypedTxOut.typedTxOutDatumHash()(dictFromData)(dictToData)(typedTxOut)))(function (dHash) {
                                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))(Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(QueryM.getDatumByHash(dHash))(Data_Either.note(new CannotQueryDatum(dHash)))))(function (dat) {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Lens_Setter.modifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))((function () {
                                              var $685 = _cpsToTxBody(Data_Profunctor_Strong.strongFn);
                                              var $686 = Cardano_Types_Transaction["_outputs"](Data_Profunctor_Strong.strongFn);
                                              return function ($687) {
                                                  return $685($686($687));
                                              };
                                          })())(Data_Array.cons(txOut)))(function () {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(addDatum(dat))(function () {
                                                  return Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(semigroupValueSpentBalanc)(_valueSpentBalancesOutputs(Data_Profunctor_Strong.strongFn))(provide(value$prime));
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      }));
                  });
              };
          };
      };
  };
  var lookupTxOutRef = function (outRef) {
      return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Functor.mapFlipped(Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))))(Data_Lens_Getter.use(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(_lookups(Data_Lens_Internal_Forget.strongForget)))((function () {
          var $688 = Data_Newtype.unwrap();
          return function ($689) {
              return (function (v) {
                  return v.txOutputs;
              })($688($689));
          };
      })()))(function (txOutputs) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(new TxOutRefNotFound(outRef))(Data_Map_Internal.lookup(Types_Transaction.ordTransactionInput)(outRef)(txOutputs)))(function (txOut) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(getNetworkId))(function (networkId) {
                  return Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(CannotConvertFromPlutusType.value)(Plutus_Conversion.fromPlutusTxOutput(networkId)(txOut));
              });
          });
      }));
  };
  var updateUtxoIndex = Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Functor.mapFlipped(Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))))(Data_Lens_Getter.use(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(_lookups(Data_Lens_Internal_Forget.strongForget)))((function () {
      var $690 = Data_Newtype.unwrap();
      return function ($691) {
          return (function (v) {
              return v.txOutputs;
          })($690($691));
      };
  })()))(function (txOutputs) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(getNetworkId))(function (networkId) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(CannotConvertFromPlutusType.value)(Data_Traversable.traverse(Data_Map_Internal.traversableMap)(Data_Maybe.applicativeMaybe)(Plutus_Conversion.fromPlutusTxOutput(networkId))(txOutputs)))(function (cTxOutputs) {
              var txOutsMap = Data_Map_Internal.mapMaybe(Types_Transaction.ordTransactionInput)(TxOutput.transactionOutputToScriptOutput)(cTxOutputs);
              return Data_Lens_Setter.modifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))((function () {
                  var $692 = _unbalancedTx(Data_Profunctor_Strong.strongFn);
                  var $693 = Types_UnbalancedTransaction["_utxoIndex"](Data_Profunctor_Strong.strongFn);
                  return function ($694) {
                      return $692($693($694));
                  };
              })())(Data_Function.flip(Data_Map_Internal.union(Types_Transaction.ordTransactionInput))(txOutsMap));
          });
      });
  }));
  var processConstraint = function (mpsMap) {
      return function (osMap) {
          var scriptExUnits = {
              mem: Data_BigInt.fromInt(0),
              steps: Data_BigInt.fromInt(0)
          };
          var mintExUnits = {
              mem: Data_BigInt.fromInt(0),
              steps: Data_BigInt.fromInt(0)
          };
          return function (v) {
              if (v instanceof Types_TxConstraints.MustIncludeDatum) {
                  return addDatum(v.value0);
              };
              if (v instanceof Types_TxConstraints.MustValidateIn) {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))(QueryM_EraSummaries.getEraSummaries))(function (es) {
                      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))(QueryM_SystemStart.getSystemStart))(function (ss) {
                          return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Effect_Class.liftEffect(Control_Monad_State_Trans.monadEffectState(Control_Monad_Reader_Trans.monadEffectReader(Control_Monad_Logger_Trans.monadEffectLoggerT(Effect_Aff.monadEffectAff))))(Data_Functor.mapFlipped(Effect.functorEffect)(Types_Interval.posixTimeRangeToTransactionValidity(es)(ss)(v.value0))(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(CannotConvertPOSIXTimeRange.create(v.value0)))))(function (v1) {
                              return Data_Lens_Setter.modifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))((function () {
                                  var $695 = _cpsToTxBody(Data_Profunctor_Strong.strongFn);
                                  var $696 = Data_Lens_Iso_Newtype["_Newtype"]()()(Data_Profunctor.profunctorFn);
                                  return function ($697) {
                                      return $695($696($697));
                                  };
                              })())(function (v2) {
                                  var $575 = {};
                                  for (var $576 in v2) {
                                      if ({}.hasOwnProperty.call(v2, $576)) {
                                          $575[$576] = v2[$576];
                                      };
                                  };
                                  $575.ttl = v1.timeToLive;
                                  $575.validityStartInterval = v1.validityStartInterval;
                                  return $575;
                              });
                          }));
                      });
                  });
              };
              if (v instanceof Types_TxConstraints.MustBeSignedBy) {
                  return Control_Monad_Except_Trans.runExceptT(Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Maybe.semigroupMaybe(Data_Semigroup.semigroupArray))((function () {
                      var $698 = _cpsToTxBody(Data_Profunctor_Strong.strongFn);
                      var $699 = Cardano_Types_Transaction["_requiredSigners"](Data_Profunctor_Strong.strongFn);
                      return function ($700) {
                          return $698($699($700));
                      };
                  })())(new Data_Maybe.Just([ Data_Newtype.wrap()(Data_Newtype.unwrap()(Data_Newtype.unwrap()(v.value0))) ])));
              };
              if (v instanceof Types_TxConstraints.MustSpendAtLeast) {
                  var value = Plutus_Conversion_Value.fromPlutusValue(v.value0);
                  return Control_Monad_Except_Trans.runExceptT(Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(semigroupValueSpentBalanc)(_valueSpentBalancesInputs(Data_Profunctor_Strong.strongFn))(require(value)));
              };
              if (v instanceof Types_TxConstraints.MustProduceAtLeast) {
                  var value = Plutus_Conversion_Value.fromPlutusValue(v.value0);
                  return Control_Monad_Except_Trans.runExceptT(Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(semigroupValueSpentBalanc)(_valueSpentBalancesOutputs(Data_Profunctor_Strong.strongFn))(require(value)));
              };
              if (v instanceof Types_TxConstraints.MustSpendPubKeyOutput) {
                  return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(lookupTxOutRef(v.value0))(function (txOut) {
                      if (txOut.dataHash instanceof Data_Maybe.Nothing) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Lens_Setter.modifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))((function () {
                              var $701 = _cpsToTxBody(Data_Profunctor_Strong.strongFn);
                              var $702 = Cardano_Types_Transaction["_inputs"](Data_Profunctor_Strong.strongFn);
                              return function ($703) {
                                  return $701($702($703));
                              };
                          })())(Data_Array.insert(Types_Transaction.ordTransactionInput)(v.value0)))(function () {
                              return Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(semigroupValueSpentBalanc)(_valueSpentBalancesInputs(Data_Profunctor_Strong.strongFn))(provide(txOut.amount));
                          });
                      };
                      return Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(new TxOutRefWrongType(v.value0)));
                  }));
              };
              if (v instanceof Types_TxConstraints.MustSpendScriptOutput) {
                  return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(lookupTxOutRef(v.value0))(function (txOut) {
                      if (txOut.dataHash instanceof Data_Maybe.Just) {
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(new CannotGetValidatorHashFromAddress(txOut.address))(Address.enterpriseAddressValidatorHash(txOut.address)))(function (vHash) {
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Functor.mapFlipped(Control_Monad_State_Trans.functorStateT(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff))))(lookupValidator(vHash)(osMap))(Data_Functor.map(Data_Either.functorEither)(Data_Newtype.unwrap())))(function (plutusScript) {
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))(Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(QueryM.getDatumByHash(txOut.dataHash.value0))(Data_Either.note(new CannotQueryDatum(txOut.dataHash.value0)))))(function (queryD) {
                                      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(lookupDatum(txOut.dataHash.value0))(function (lookupD) {
                                          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Control_Alt.alt(Data_Either.altEither)(queryD)(lookupD));
                                      });
                                  }))(function (dataValue) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(attachToCps(Transaction.attachPlutusScript)(plutusScript))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Lens_Setter.modifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))((function () {
                                              var $704 = _cpsToTxBody(Data_Profunctor_Strong.strongFn);
                                              var $705 = Cardano_Types_Transaction["_inputs"](Data_Profunctor_Strong.strongFn);
                                              return function ($706) {
                                                  return $704($705($706));
                                              };
                                          })())(Data_Array.insert(Types_Transaction.ordTransactionInput)(v.value0)))(function () {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(addDatum(dataValue))(function () {
                                                  var redeemer = {
                                                      tag: Types_RedeemerTag.Spend.value,
                                                      index: Data_Semiring.zero(Data_BigInt.semiringBigInt),
                                                      data: Data_Newtype.unwrap()(v.value1),
                                                      exUnits: scriptExUnits
                                                  };
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(semigroupValueSpentBalanc)(_valueSpentBalancesInputs(Data_Profunctor_Strong.strongFn))(provide(txOut.amount)))(function () {
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Semigroup.semigroupArray)(_redeemers(Data_Profunctor_Strong.strongFn))(Data_Array.singleton(new Data_Tuple.Tuple(redeemer, new Data_Maybe.Just(v.value0)))))(function () {
                                                          return attachToCps(Transaction.attachRedeemer)(redeemer);
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      };
                      return Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(new TxOutRefWrongType(v.value0)));
                  }));
              };
              if (v instanceof Types_TxConstraints.MustMintValue) {
                  return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Functor.mapFlipped(Control_Monad_State_Trans.functorStateT(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff))))(lookupMintingPolicy(v.value0)(mpsMap))(Data_Functor.map(Data_Either.functorEither)(Data_Newtype.unwrap())))(function (plutusScript) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(new MintingPolicyHashNotCurrencySymbol(v.value0))(Cardano_Types_Value.mpsSymbol(v.value0)))(function (cs) {
                          var value = Cardano_Types_Value["mkSingletonValue'"](cs)(v.value2);
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))((function () {
                              var $595 = Data_Ord.lessThan(Data_BigInt.ordBigInt)(v.value3)(Data_Semiring.zero(Data_BigInt.semiringBigInt));
                              if ($595) {
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(new CannotMakeValue(cs, v.value2, v.value3))(value(Data_Ring.negate(Data_BigInt.ringBigInt)(v.value3))))(function (v1) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(semigroupValueSpentBalanc)(_valueSpentBalancesInputs(Data_Profunctor_Strong.strongFn))(provide(v1)))(function () {
                                          return Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(new Data_Either.Right(Data_Functor.map(Data_Maybe.functorMaybe)(Cardano_Types_Value.getNonAdaAsset)(value(v.value3))));
                                      });
                                  });
                              };
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Helpers.liftM(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(new CannotMakeValue(cs, v.value2, v.value3))(value(v.value3)))(function (v1) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(semigroupValueSpentBalanc)(_valueSpentBalancesOutputs(Data_Profunctor_Strong.strongFn))(provide(v1)))(function () {
                                      return Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(new Data_Either.Right(Data_Functor.map(Data_Maybe.functorMaybe)(Cardano_Types_Value.getNonAdaAsset)(value(v.value3))));
                                  });
                              });
                          })())(function (mintVal) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(attachToCps(Transaction.attachPlutusScript)(plutusScript))(function () {
                                  var redeemer = {
                                      tag: Types_RedeemerTag.Mint.value,
                                      index: Data_Semiring.zero(Data_BigInt.semiringBigInt),
                                      data: Data_Newtype.unwrap()(v.value1),
                                      exUnits: mintExUnits
                                  };
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Lens_Setter.modifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(_redeemers(Data_Profunctor_Strong.strongFn))(Data_Array.filter(function (v1) {
                                      return Data_Eq.notEq(Types_RedeemerTag.eqRedeemerTag)(v1.value0.tag)(Types_RedeemerTag.Mint.value);
                                  })))(function () {
                                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(reindexMintRedeemers(v.value0)(redeemer)))(function (mintRedeemers) {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Semigroup.semigroupArray)(_redeemers(Data_Profunctor_Strong.strongFn))(Data_Functor.map(Data_Functor.functorArray)(function (v1) {
                                              return new Data_Tuple.Tuple(v1, Data_Maybe.Nothing.value);
                                          })(mintRedeemers)))(function () {
                                              return Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Maybe.semigroupMaybe(Cardano_Types_Transaction.semigroupMint))((function () {
                                                  var $707 = _cpsToTxBody(Data_Profunctor_Strong.strongFn);
                                                  var $708 = Cardano_Types_Transaction["_mint"](Data_Profunctor_Strong.strongFn);
                                                  return function ($709) {
                                                      return $707($708($709));
                                                  };
                                              })())(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.wrap())(mintVal));
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  }));
              };
              if (v instanceof Types_TxConstraints.MustPayToPubKeyAddress) {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(getNetworkId)(function (networkId) {
                      var amount = Plutus_Conversion_Value.fromPlutusValue(v.value3);
                      return Control_Monad_Except_Trans.runExceptT(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Maybe.maybe(Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(new Data_Either.Right(Data_Unit.unit)))(function ($710) {
                          return Control_Monad_Except_Trans.ExceptT(addDatum($710));
                      })(v.value2))(function () {
                          var liftDatumHash = function (v1) {
                              return function (v2) {
                                  if (v2 instanceof Data_Maybe.Nothing) {
                                      return new Data_Either.Left(v1);
                                  };
                                  if (v2 instanceof Data_Maybe.Just) {
                                      return new Data_Either.Right(new Data_Maybe.Just(v2.value0));
                                  };
                                  throw new Error("Failed pattern match at Types.ScriptLookups (line 978, column 11 - line 982, column 35): " + [ v1.constructor.name, v2.constructor.name ]);
                              };
                          };
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Maybe.maybe(Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(new Data_Either.Right(Data_Maybe.Nothing.value)))(function (dat) {
                              return Control_Monad_Except_Trans.except(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(liftDatumHash(new CannotHashDatum(dat))(Hashing.datumHash(dat)));
                          })(v.value2))(function (dataHash) {
                              var address = (function () {
                                  if (v.value1 instanceof Data_Maybe.Just) {
                                      return Types_PubKeyHash.payPubKeyHashBaseAddress(networkId)(v.value0)(v.value1.value0);
                                  };
                                  if (v.value1 instanceof Data_Maybe.Nothing) {
                                      return Types_PubKeyHash.payPubKeyHashEnterpriseAddress(networkId)(v.value0);
                                  };
                                  throw new Error("Failed pattern match at Types.ScriptLookups (line 1010, column 21 - line 1012, column 68): " + [ v.value1.constructor.name ]);
                              })();
                              var txOut = {
                                  address: address,
                                  amount: amount,
                                  dataHash: dataHash
                              };
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Lens_Setter.modifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))((function () {
                                  var $711 = _cpsToTxBody(Data_Profunctor_Strong.strongFn);
                                  var $712 = Cardano_Types_Transaction["_outputs"](Data_Profunctor_Strong.strongFn);
                                  return function ($713) {
                                      return $711($712($713));
                                  };
                              })())(Data_Array.cons(txOut)))(function () {
                                  return Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(semigroupValueSpentBalanc)(_valueSpentBalancesOutputs(Data_Profunctor_Strong.strongFn))(provide(amount));
                              });
                          });
                      }));
                  });
              };
              if (v instanceof Types_TxConstraints.MustPayToScript) {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(getNetworkId)(function (networkId) {
                      var amount = Plutus_Conversion_Value.fromPlutusValue(v.value2);
                      return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Control_Monad_Except_Trans.except(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Data_Either.note(new CannotHashDatum(v.value1))(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Maybe.Just.create)(Hashing.datumHash(v.value1)))))(function (dataHash) {
                          var txOut = {
                              address: Scripts.validatorHashEnterpriseAddress(networkId)(v.value0),
                              amount: amount,
                              dataHash: dataHash
                          };
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Lens_Setter.modifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))((function () {
                              var $714 = _cpsToTxBody(Data_Profunctor_Strong.strongFn);
                              var $715 = Cardano_Types_Transaction["_outputs"](Data_Profunctor_Strong.strongFn);
                              return function ($716) {
                                  return $714($715($716));
                              };
                          })())(Data_Array.cons(txOut)))(function () {
                              return Data_Lens_Setter.appendModifying(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(semigroupValueSpentBalanc)(_valueSpentBalancesOutputs(Data_Profunctor_Strong.strongFn))(provide(amount));
                          });
                      }));
                  });
              };
              if (v instanceof Types_TxConstraints.MustHashDatum) {
                  var mdh = Hashing.datumHash(v.value1);
                  var $616 = Data_Eq.eq(Data_Maybe.eqMaybe(Types_Transaction.eqDataHash))(mdh)(new Data_Maybe.Just(v.value0));
                  if ($616) {
                      return addDatum(v.value1);
                  };
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(new DatumWrongHash(v.value0, v.value1)));
              };
              if (v instanceof Types_TxConstraints.MustSatisfyAnyOf) {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(function (cps) {
                      var tryNext = function (v1) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(CannotSatisfyAny.value));
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              return Data_Foldable.foldM(Data_List_Types.foldableList)(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(function (v2) {
                                  return function (constr) {
                                      return Control_Monad_Except_Trans.runExceptT(Control_Monad_Error_Class.catchError(Control_Monad_State_Trans.monadErrorStateT(Control_Monad_Reader_Trans.monadErrorReaderT(Control_Monad_Logger_Trans.monadErrorLoggerT(Effect_Aff.monadErrorAff))))(processConstraint(mpsMap)(osMap)(constr))(function (v3) {
                                          return Control_Apply.applySecond(Control_Monad_State_Trans.applyStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(cps))(tryNext(v1.value1));
                                      }));
                                  };
                              })(new Data_Either.Right(Data_Unit.unit))(v1.value0);
                          };
                          throw new Error("Failed pattern match at Types.ScriptLookups (line 1050, column 9 - line 1052, column 62): " + [ v1.constructor.name ]);
                      };
                      return tryNext(Data_Array.toUnfoldable(Data_List_Types.unfoldableList)(Data_Functor.map(Data_Functor.functorArray)(Data_Array.toUnfoldable(Data_List_Types.unfoldableList))(v.value0)));
                  });
              };
              throw new Error("Failed pattern match at Types.ScriptLookups (line 851, column 3 - line 1064, column 51): " + [ v.constructor.name ]);
          };
      };
  };
  var _costModels = function (dictStrong) {
      return Data_Lens_Record.prop({
          reflectSymbol: function () {
              return "costModels";
          }
      })()()(Data_Symbol.SProxy.value)(dictStrong);
  };
  var addScriptDataHash = Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Lens_Getter.use(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(_datums(Data_Lens_Internal_Forget.strongForget)))(function (dats) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Lens_Getter.use(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(_costModels(Data_Lens_Internal_Forget.strongForget)))(function (costModels) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Lens_Getter.use(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))((function () {
              var $717 = _redeemers(Data_Lens_Internal_Forget.strongForget);
              var $718 = Data_Lens_Getter.to(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.fst));
              return function ($719) {
                  return $717($718($719));
              };
          })()))(function (reds) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Lens_Getter.use(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))((function () {
                  var $720 = _unbalancedTx(Data_Lens_Internal_Forget.strongForget);
                  var $721 = Types_UnbalancedTransaction["_transaction"](Data_Lens_Internal_Forget.strongForget);
                  return function ($722) {
                      return $720($721($722));
                  };
              })()))(function (tx) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Effect_Class.liftEffect(Control_Monad_State_Trans.monadEffectState(Control_Monad_Reader_Trans.monadEffectReader(Control_Monad_Logger_Trans.monadEffectLoggerT(Effect_Aff.monadEffectAff))))(Data_Functor.mapFlipped(Effect.functorEffect)(Transaction.setScriptDataHash(costModels)(reds)(dats)(tx))(Data_Either.Right.create)))(function (tx$prime) {
                      return Data_Lens_Setter.assign(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(_cpsToTransaction(Data_Profunctor_Strong.strongFn))(tx$prime);
                  });
              });
          });
      });
  }));
  var processLookupsAndConstraints = function () {
      return function () {
          return function (dictFromData) {
              return function (dictToData) {
                  return function (v) {
                      var hashScripts = function (hasher) {
                          return function (error) {
                              var $723 = Effect_Aff_Class.liftAff(Effect_Aff_Class.monadAffState(Effect_Aff_Class.monadAffReader(Control_Monad_Logger_Trans.monadAffLoggerT(Effect_Aff_Class.monadAffAff))));
                              var $724 = Data_Functor.map(Effect_Aff.functorAff)(Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Either.applicativeEither));
                              var $725 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect_Aff.applicativeAff)(function (s) {
                                  return Data_Functor.map(Effect_Aff.functorAff)(Data_Either.note(error(s)))(hasher(s));
                              });
                              return function ($726) {
                                  return $723($724($725($726)));
                              };
                          };
                      };
                      var foldConstraints = function (handler) {
                          return Data_Foldable.foldM(Data_Foldable.foldableArray)(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(function (v1) {
                              return function (constr) {
                                  return Control_Monad_Except_Trans.runExceptT(handler(constr));
                              };
                          })(new Data_Either.Right(Data_Unit.unit));
                      };
                      return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Functor.mapFlipped(Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))))(Data_Lens_Getter.use(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(_lookups(Data_Lens_Internal_Forget.strongForget)))(Data_Newtype.unwrap()))(function (lookups) {
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(hashScripts(Scripts.mintingPolicyHash)(CannotHashMintingPolicy.create)(lookups.mps))(function (mpsHashes) {
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(hashScripts(Scripts.validatorHash)(CannotHashValidator.create)(lookups.scripts))(function (validatorHashes) {
                                  var osMap = Data_Map_Internal.fromFoldable(Types_Scripts.ordValidatorHash)(Data_Foldable.foldableArray)(Data_Array.zip(validatorHashes)(lookups.scripts));
                                  var mpsMap = Data_Map_Internal.fromFoldable(Types_Scripts.ordMintingPolicyHash)(Data_Foldable.foldableArray)(Data_Array.zip(mpsHashes)(lookups.mps));
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(foldConstraints(processConstraint(mpsMap)(osMap))(v.constraints))(function () {
                                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Data_Functor.mapFlipped(Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))))(Data_Lens_Getter.use(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(_mintRedeemers(Data_Lens_Internal_Forget.strongForget)))(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)))(function (v1) {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Data_Foldable.traverse_(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Data_Foldable.foldableArray)((function () {
                                              var $727 = attachToCps(Transaction.attachRedeemer);
                                              return function ($728) {
                                                  return $727(Data_Tuple.snd($728));
                                              };
                                          })())(v1)))(function () {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(foldConstraints(addOwnInput()()(dictFromData)(dictToData))(v.ownInputs))(function () {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(foldConstraints(addOwnOutput()(dictFromData)(dictToData))(v.ownOutputs))(function () {
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(addScriptDataHash)(function () {
                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))))(addMissingValueSpent)(function () {
                                                              return updateUtxoIndex;
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      }));
                  };
              };
          };
      };
  };
  var runConstraintsM = function () {
      return function () {
          return function (dictFromData) {
              return function (dictToData) {
                  return function (lookups) {
                      return function (txConstraints) {
                          return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Logger_Trans.bindLoggerT(Effect_Aff.monadAff)))(Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(QueryM_ProtocolParameters.getProtocolParameters)((function () {
                              var $729 = Data_Newtype.unwrap();
                              return function ($730) {
                                  return (function (v) {
                                      return v.costModels;
                                  })($729($730));
                              };
                          })()))(function (costModels) {
                              var unpackTuple = function (v) {
                                  if (v.value0 instanceof Data_Either.Left) {
                                      return new Data_Either.Left(v.value0.value0);
                                  };
                                  return new Data_Either.Right(v.value1);
                              };
                              var initCps = {
                                  unbalancedTx: Types_UnbalancedTransaction.emptyUnbalancedTx,
                                  valueSpentBalancesInputs: {
                                      required: Data_Monoid.mempty(Cardano_Types_Value.monoidValue),
                                      provided: Data_Monoid.mempty(Cardano_Types_Value.monoidValue)
                                  },
                                  valueSpentBalancesOutputs: {
                                      required: Data_Monoid.mempty(Cardano_Types_Value.monoidValue),
                                      provided: Data_Monoid.mempty(Cardano_Types_Value.monoidValue)
                                  },
                                  datums: Data_Monoid.mempty(Data_Monoid.monoidArray),
                                  redeemers: Data_Monoid.mempty(Data_Monoid.monoidArray),
                                  mintRedeemers: Data_Map_Internal.empty,
                                  lookups: lookups,
                                  costModels: costModels
                              };
                              return Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(unpackTuple)(Data_Function.flip(Control_Monad_State_Trans.runStateT)(initCps)(processLookupsAndConstraints()()(dictFromData)(dictToData)(txConstraints)));
                          });
                      };
                  };
              };
          };
      };
  };
  var mkUnbalancedTx = function () {
      return function () {
          return function (dictFromData) {
              return function (dictToData) {
                  return function (scriptLookups) {
                      return function (txConstraints) {
                          return Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(runConstraintsM()()(dictFromData)(dictToData)(scriptLookups)(txConstraints))(Data_Functor.map(Data_Either.functorEither)(function (v) {
                              var stripScriptDataHash = function (uTx) {
                                  return Data_Lens_Setter.set((function () {
                                      var $731 = Types_UnbalancedTransaction["_transaction"](Data_Profunctor_Strong.strongFn);
                                      var $732 = Cardano_Types_Transaction["_body"](Data_Profunctor_Strong.strongFn);
                                      var $733 = Cardano_Types_Transaction["_scriptDataHash"](Data_Profunctor_Strong.strongFn);
                                      return function ($734) {
                                          return $731($732($733($734)));
                                      };
                                  })())(Data_Maybe.Nothing.value)(uTx);
                              };
                              var stripDatumsRedeemers = function (uTx) {
                                  return Data_Lens_Setter.over((function () {
                                      var $735 = Types_UnbalancedTransaction["_transaction"](Data_Profunctor_Strong.strongFn);
                                      var $736 = Cardano_Types_Transaction["_witnessSet"](Data_Profunctor_Strong.strongFn);
                                      return function ($737) {
                                          return $735($736($737));
                                      };
                                  })())(Data_Newtype.over()()(Cardano_Types_Transaction.TransactionWitnessSet)(function (v1) {
                                      return {
                                          plutusData: Data_Maybe.Nothing.value,
                                          redeemers: Data_Maybe.Nothing.value,
                                          bootstraps: v1.bootstraps,
                                          nativeScripts: v1.nativeScripts,
                                          plutusScripts: v1.plutusScripts,
                                          vkeys: v1.vkeys
                                      };
                                  }))(uTx);
                              };
                              var tx = stripDatumsRedeemers(stripScriptDataHash(v.unbalancedTx));
                              return Data_Newtype.wrap()({
                                  unbalancedTx: tx,
                                  datums: v.datums,
                                  redeemersTxIns: v.redeemers
                              });
                          }));
                      };
                  };
              };
          };
      };
  };
  exports["mkUnbalancedTx"] = mkUnbalancedTx;
  exports["validator"] = validator;
  exports["unspentOutputs"] = unspentOutputs;
  exports["semigroupScriptLookups"] = semigroupScriptLookups;
  exports["monoidScriptLookups"] = monoidScriptLookups;
  exports["showMkUnbalancedTxError"] = showMkUnbalancedTxError;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Contract.ScriptLookups"] = $PS["Contract.ScriptLookups"] || {};
  var exports = $PS["Contract.ScriptLookups"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Types_ScriptLookups = $PS["Types.ScriptLookups"];                
  var mkUnbalancedTx = function () {
      return function () {
          return function (dictFromData) {
              return function (dictToData) {
                  return function (lookups) {
                      var $4 = Types_ScriptLookups.mkUnbalancedTx()()(dictFromData)(dictToData)(lookups);
                      return function ($5) {
                          return Contract_Monad.wrapContract($4($5));
                      };
                  };
              };
          };
      };
  };
  exports["mkUnbalancedTx"] = mkUnbalancedTx;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Constants.Alonzo"] = $PS["Constants.Alonzo"] || {};
  var exports = $PS["Constants.Alonzo"];
  var Data_BigInt = $PS["Data.BigInt"];                
  var utxoEntrySizeWithoutVal = Data_BigInt.fromInt(27);
  var protocolParamUTxOCostPerWord = Data_BigInt.fromInt(1);
  var pidSize = Data_BigInt.fromInt(28);         
  var coinSize = Data_BigInt.fromInt(2);
  var adaOnlyWords = Data_BigInt.fromInt(29);
  exports["adaOnlyWords"] = adaOnlyWords;
  exports["coinSize"] = coinSize;
  exports["pidSize"] = pidSize;
  exports["protocolParamUTxOCostPerWord"] = protocolParamUTxOCostPerWord;
  exports["utxoEntrySizeWithoutVal"] = utxoEntrySizeWithoutVal;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Profunctor.Choice"] = $PS["Data.Profunctor.Choice"] || {};
  var exports = $PS["Data.Profunctor.Choice"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Profunctor = $PS["Data.Profunctor"];                
  var right = function (dict) {
      return dict.right;
  };
  var choiceFn = {
      left: function (v) {
          return function (v1) {
              if (v1 instanceof Data_Either.Left) {
                  return new Data_Either.Left(v(v1.value0));
              };
              if (v1 instanceof Data_Either.Right) {
                  return new Data_Either.Right(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Profunctor.Choice (line 32, column 1 - line 35, column 16): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      right: Data_Functor.map(Data_Either.functorEither),
      Profunctor0: function () {
          return Data_Profunctor.profunctorFn;
      }
  };
  exports["right"] = right;
  exports["choiceFn"] = choiceFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Lens.AffineTraversal"] = $PS["Data.Lens.AffineTraversal"] || {};
  var exports = $PS["Data.Lens.AffineTraversal"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_Profunctor = $PS["Data.Profunctor"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var affineTraversal$prime = function (to) {
      return function (dictStrong) {
          return function (dictChoice) {
              return function (pab) {
                  return Data_Profunctor.dimap(dictChoice.Profunctor0())(to)(function (v) {
                      return Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(v.value0)(v.value1);
                  })(Data_Profunctor_Strong.second(dictStrong)(Data_Profunctor_Choice.right(dictChoice)(pab)));
              };
          };
      };
  };
  var affineTraversal = function (set) {
      return function (pre) {
          return function (dictStrong) {
              return function (dictChoice) {
                  return affineTraversal$prime(Data_Profunctor_Strong.fanout(Control_Category.categoryFn)(Data_Profunctor_Strong.strongFn)(set)(pre))(dictStrong)(dictChoice);
              };
          };
      };
  };
  exports["affineTraversal"] = affineTraversal;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Lens.Index"] = $PS["Data.Lens.Index"] || {};
  var exports = $PS["Data.Lens.Index"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Lens_AffineTraversal = $PS["Data.Lens.AffineTraversal"];
  var Data_Maybe = $PS["Data.Maybe"];                        
  var ix = function (dict) {
      return dict.ix;
  };
  var indexArray = {
      ix: function (n) {
          return function (dictStrong) {
              return function (dictChoice) {
                  var set = function (s) {
                      return function (b) {
                          return Data_Maybe.fromMaybe(s)(Data_Array.updateAt(n)(b)(s));
                      };
                  };
                  var pre = function (s) {
                      return Data_Maybe.maybe(new Data_Either.Left(s))(Data_Either.Right.create)(Data_Array.index(s)(n));
                  };
                  return Data_Lens_AffineTraversal.affineTraversal(set)(pre)(dictStrong)(dictChoice);
              };
          };
      }
  };
  exports["ix"] = ix;
  exports["indexArray"] = indexArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Lens.Lens.Tuple"] = $PS["Data.Lens.Lens.Tuple"] || {};
  var exports = $PS["Data.Lens.Lens.Tuple"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var _1 = function (dictStrong) {
      return Data_Profunctor_Strong.first(dictStrong);
  };
  exports["_1"] = _1;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["QueryM.Utxos"] = $PS["QueryM.Utxos"] || {};
  var exports = $PS["QueryM.Utxos"];
  var Address = $PS["Address"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Logger_Trans = $PS["Control.Monad.Logger.Trans"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Bitraversable = $PS["Data.Bitraversable"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var QueryM = $PS["QueryM"];
  var QueryM_Ogmios = $PS["QueryM.Ogmios"];
  var TxOutput = $PS["TxOutput"];
  var Types_Transaction = $PS["Types.Transaction"];
  var Wallet = $PS["Wallet"];
  var utxosAt = function (addr) {
      var allUtxosAt = (function () {
          var utxosAt$prime = function (addr$prime) {
              return QueryM.mkOgmiosRequest(QueryM_Ogmios.queryUtxosAtCall)(function (v) {
                  return v.utxo;
              })(addr$prime);
          };
          var convertUtxos = function (v) {
              var out$prime = Data_Functor.mapFlipped(Data_Functor.functorArray)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(v))(Data_Bifunctor.bimap(Data_Bifunctor.bifunctorTuple)(TxOutput.txOutRefToTransactionInput)(TxOutput.ogmiosTxOutToTransactionOutput));
              var out = Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Functor.mapFlipped(Data_Functor.functorArray)(out$prime)(Data_Bitraversable.bisequence(Data_Bitraversable.bitraversableTuple)(Data_Maybe.applicativeMaybe)));
              return Data_Functor.map(Data_Maybe.functorMaybe)((function () {
                  var $13 = Data_Newtype.wrap();
                  var $14 = Data_Map_Internal.fromFoldable(Types_Transaction.ordTransactionInput)(Data_Foldable.foldableArray);
                  return function ($15) {
                      return $13($14($15));
                  };
              })())(out);
          };
          var getUtxos = function (address) {
              return Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(convertUtxos)(utxosAt$prime(address));
          };
          return function ($16) {
              return getUtxos(Address.addressToOgmiosAddress($16));
          };
      })();
      var cip30UtxosAt = function (address) {
          return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Logger_Trans.bindLoggerT(Effect_Aff.monadAff)))(QueryM.getWalletCollateral)(Data_Maybe.maybe(Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Control_Monad_Logger_Trans.monadEffectLoggerT(Effect_Aff.monadEffectAff)))(Effect_Exception["throw"]("CIP-30 wallet missing collateral")))(function (collateral$prime) {
              var collateral = Data_Newtype.unwrap()(collateral$prime);
              return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Logger_Trans.bindLoggerT(Effect_Aff.monadAff)))(allUtxosAt(address))(function (utxos$prime) {
                  return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff)))(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.over()()(Cardano_Types_Transaction.UtxoM)(Data_Map_Internal["delete"](Types_Transaction.ordTransactionInput)(collateral.input)))(utxos$prime));
              });
          }));
      };
      var utxosAtByWallet = function (address) {
          return function (v) {
              if (v instanceof Wallet.Nami) {
                  return cip30UtxosAt(address);
              };
              if (v instanceof Wallet.Gero) {
                  return cip30UtxosAt(address);
              };
              if (v instanceof Wallet.KeyWallet) {
                  return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff)))(Data_Maybe.Nothing.value);
              };
              throw new Error("Failed pattern match at QueryM.Utxos (line 45, column 29 - line 48, column 32): " + [ v.constructor.name ]);
          };
      };
      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Logger_Trans.bindLoggerT(Effect_Aff.monadAff)))(Control_Monad_Reader_Class.asks(Control_Monad_Reader_Trans.monadAskReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))(function (v) {
          return v.wallet;
      }))(Data_Maybe.maybe(allUtxosAt(addr))(utxosAtByWallet(addr)));
  };
  exports["utxosAt"] = utxosAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["ReindexRedeemers"] = $PS["ReindexRedeemers"] || {};
  var exports = $PS["ReindexRedeemers"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Logger_Trans = $PS["Control.Monad.Logger.Trans"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Data_Array = $PS["Data.Array"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Helpers = $PS["Helpers"];
  var Types_RedeemerTag = $PS["Types.RedeemerTag"];
  var Types_Transaction = $PS["Types.Transaction"];                
  var CannotGetTxOutRefIndexForRedeemer = (function () {
      function CannotGetTxOutRefIndexForRedeemer(value0) {
          this.value0 = value0;
      };
      CannotGetTxOutRefIndexForRedeemer.create = function (value0) {
          return new CannotGetTxOutRefIndexForRedeemer(value0);
      };
      return CannotGetTxOutRefIndexForRedeemer;
  })();
  var genericReindexErrors_ = {
      to: function (x) {
          return new CannotGetTxOutRefIndexForRedeemer(x);
      },
      from: function (x) {
          return x.value0;
      }
  };
  var showReindexErrors = {
      show: Data_Show_Generic.genericShow(genericReindexErrors_)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Cardano_Types_Transaction.showRedeemer))({
          reflectSymbol: function () {
              return "CannotGetTxOutRefIndexForRedeemer";
          }
      }))
  };
  var reindexSpentScriptRedeemers$prime = function (inputs) {
      return function (redeemersTxIns) {
          var reindex = function (ipts) {
              return function (v) {
                  if (v.value0.tag instanceof Types_RedeemerTag.Spend && v.value1 instanceof Data_Maybe.Just) {
                      return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(new CannotGetTxOutRefIndexForRedeemer(v.value0))(Data_Functor.map(Data_Maybe.functorMaybe)(Data_BigInt.fromInt)(Data_Array.elemIndex(Types_Transaction.eqTransactionInput)(v.value1.value0)(ipts))))(function (index) {
                          return new Data_Either.Right(new Data_Tuple.Tuple({
                              tag: v.value0.tag,
                              index: index,
                              data: v.value0.data,
                              exUnits: v.value0.exUnits
                          }, new Data_Maybe.Just(v.value1.value0)));
                      });
                  };
                  return new Data_Either.Right(new Data_Tuple.Tuple(v.value0, v.value1));
              };
          };
          return Control_Monad_Except_Trans.runExceptT(Helpers.liftEither(Control_Monad_Except_Trans.monadErrorExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(reindex(inputs))(redeemersTxIns)));
      };
  };
  var reindexSpentScriptRedeemers = function (inputs) {
      return function (redeemersTxIns) {
          return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(reindexSpentScriptRedeemers$prime(inputs)(redeemersTxIns))(function (redeemersTxInsReindexed) {
              return Control_Monad_Except_Trans.except(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff)))(Data_Either.Right.create(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.fst)(redeemersTxInsReindexed)));
          }));
      };
  };
  exports["reindexSpentScriptRedeemers"] = reindexSpentScriptRedeemers;
  exports["reindexSpentScriptRedeemers'"] = reindexSpentScriptRedeemers$prime;
  exports["showReindexErrors"] = showReindexErrors;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["BalanceTx"] = $PS["BalanceTx"] || {};
  var exports = $PS["BalanceTx"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Cardano_Types_Value = $PS["Cardano.Types.Value"];
  var Constants_Alonzo = $PS["Constants.Alonzo"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Logger_Class = $PS["Control.Monad.Logger.Class"];
  var Control_Monad_Logger_Trans = $PS["Control.Monad.Logger.Trans"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Index = $PS["Data.Lens.Index"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Lens = $PS["Data.Lens.Lens"];
  var Data_Lens_Lens_Tuple = $PS["Data.Lens.Lens.Tuple"];
  var Data_Lens_Setter = $PS["Data.Lens.Setter"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Log_Tag = $PS["Data.Log.Tag"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Profunctor_Choice = $PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Strong = $PS["Data.Profunctor.Strong"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Show_Generic = $PS["Data.Show.Generic"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Effect_Aff = $PS["Effect.Aff"];
  var QueryM = $PS["QueryM"];
  var QueryM_ProtocolParameters = $PS["QueryM.ProtocolParameters"];
  var QueryM_Utxos = $PS["QueryM.Utxos"];
  var ReindexRedeemers = $PS["ReindexRedeemers"];
  var Serialization_Address = $PS["Serialization.Address"];
  var TxOutput = $PS["TxOutput"];
  var Types_Natural = $PS["Types.Natural"];
  var Types_RedeemerTag = $PS["Types.RedeemerTag"];
  var Types_Transaction = $PS["Types.Transaction"];
  var Types_UnbalancedTransaction = $PS["Types.UnbalancedTransaction"];
  var Wallet = $PS["Wallet"];                
  var CouldNotGetUtxos = (function () {
      function CouldNotGetUtxos() {

      };
      CouldNotGetUtxos.value = new CouldNotGetUtxos();
      return CouldNotGetUtxos;
  })();
  var Impossible = (function () {
      function Impossible() {

      };
      Impossible.value = new Impossible();
      return Impossible;
  })();
  var CouldNotGetCollateral = (function () {
      function CouldNotGetCollateral() {

      };
      CouldNotGetCollateral.value = new CouldNotGetCollateral();
      return CouldNotGetCollateral;
  })();
  var CouldNotGetWalletAddress = (function () {
      function CouldNotGetWalletAddress() {

      };
      CouldNotGetWalletAddress.value = new CouldNotGetWalletAddress();
      return CouldNotGetWalletAddress;
  })();
  var CannotConvertScriptOutputToTxInput = (function () {
      function CannotConvertScriptOutputToTxInput() {

      };
      CannotConvertScriptOutputToTxInput.value = new CannotConvertScriptOutputToTxInput();
      return CannotConvertScriptOutputToTxInput;
  })();
  var EvalExUnitsError = (function () {
      function EvalExUnitsError(value0) {
          this.value0 = value0;
      };
      EvalExUnitsError.create = function (value0) {
          return new EvalExUnitsError(value0);
      };
      return EvalExUnitsError;
  })();
  var EvalMinFeeError = (function () {
      function EvalMinFeeError(value0) {
          this.value0 = value0;
      };
      EvalMinFeeError.create = function (value0) {
          return new EvalMinFeeError(value0);
      };
      return EvalMinFeeError;
  })();
  var ReindexRedeemersError = (function () {
      function ReindexRedeemersError(value0) {
          this.value0 = value0;
      };
      ReindexRedeemersError.create = function (value0) {
          return new ReindexRedeemersError(value0);
      };
      return ReindexRedeemersError;
  })();
  var ReturnAdaChangeError = (function () {
      function ReturnAdaChangeError(value0) {
          this.value0 = value0;
      };
      ReturnAdaChangeError.create = function (value0) {
          return new ReturnAdaChangeError(value0);
      };
      return ReturnAdaChangeError;
  })();
  var ReturnAdaChangeImpossibleError = (function () {
      function ReturnAdaChangeImpossibleError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ReturnAdaChangeImpossibleError.create = function (value0) {
          return function (value1) {
              return new ReturnAdaChangeImpossibleError(value0, value1);
          };
      };
      return ReturnAdaChangeImpossibleError;
  })();
  var ReturnAdaChangeCalculateMinFee = (function () {
      function ReturnAdaChangeCalculateMinFee(value0) {
          this.value0 = value0;
      };
      ReturnAdaChangeCalculateMinFee.create = function (value0) {
          return new ReturnAdaChangeCalculateMinFee(value0);
      };
      return ReturnAdaChangeCalculateMinFee;
  })();
  var CollateralUtxosUnavailable = (function () {
      function CollateralUtxosUnavailable() {

      };
      CollateralUtxosUnavailable.value = new CollateralUtxosUnavailable();
      return CollateralUtxosUnavailable;
  })();
  var AddTxCollateralsError = (function () {
      function AddTxCollateralsError() {

      };
      AddTxCollateralsError.value = new AddTxCollateralsError();
      return AddTxCollateralsError;
  })();
  var CannotMinus = (function () {
      function CannotMinus(value0) {
          this.value0 = value0;
      };
      CannotMinus.create = function (value0) {
          return new CannotMinus(value0);
      };
      return CannotMinus;
  })();
  var InputsCannotBalanceNonAdaTokens = (function () {
      function InputsCannotBalanceNonAdaTokens() {

      };
      InputsCannotBalanceNonAdaTokens.value = new InputsCannotBalanceNonAdaTokens();
      return InputsCannotBalanceNonAdaTokens;
  })();
  var BalanceNonAdaOutsCannotMinus = (function () {
      function BalanceNonAdaOutsCannotMinus(value0) {
          this.value0 = value0;
      };
      BalanceNonAdaOutsCannotMinus.create = function (value0) {
          return new BalanceNonAdaOutsCannotMinus(value0);
      };
      return BalanceNonAdaOutsCannotMinus;
  })();
  var InsufficientTxInputs = (function () {
      function InsufficientTxInputs(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      InsufficientTxInputs.create = function (value0) {
          return function (value1) {
              return new InsufficientTxInputs(value0, value1);
          };
      };
      return InsufficientTxInputs;
  })();
  var BalanceTxInsCannotMinus = (function () {
      function BalanceTxInsCannotMinus(value0) {
          this.value0 = value0;
      };
      BalanceTxInsCannotMinus.create = function (value0) {
          return new BalanceTxInsCannotMinus(value0);
      };
      return BalanceTxInsCannotMinus;
  })();
  var GetWalletAddressError$prime = (function () {
      function GetWalletAddressError$prime(value0) {
          this.value0 = value0;
      };
      GetWalletAddressError$prime.create = function (value0) {
          return new GetWalletAddressError$prime(value0);
      };
      return GetWalletAddressError$prime;
  })();
  var GetWalletCollateralError$prime = (function () {
      function GetWalletCollateralError$prime(value0) {
          this.value0 = value0;
      };
      GetWalletCollateralError$prime.create = function (value0) {
          return new GetWalletCollateralError$prime(value0);
      };
      return GetWalletCollateralError$prime;
  })();
  var UtxosAtError$prime = (function () {
      function UtxosAtError$prime(value0) {
          this.value0 = value0;
      };
      UtxosAtError$prime.create = function (value0) {
          return new UtxosAtError$prime(value0);
      };
      return UtxosAtError$prime;
  })();
  var ReturnAdaChangeError$prime = (function () {
      function ReturnAdaChangeError$prime(value0) {
          this.value0 = value0;
      };
      ReturnAdaChangeError$prime.create = function (value0) {
          return new ReturnAdaChangeError$prime(value0);
      };
      return ReturnAdaChangeError$prime;
  })();
  var AddTxCollateralsError$prime = (function () {
      function AddTxCollateralsError$prime(value0) {
          this.value0 = value0;
      };
      AddTxCollateralsError$prime.create = function (value0) {
          return new AddTxCollateralsError$prime(value0);
      };
      return AddTxCollateralsError$prime;
  })();
  var GetPublicKeyTransactionInputError$prime = (function () {
      function GetPublicKeyTransactionInputError$prime(value0) {
          this.value0 = value0;
      };
      GetPublicKeyTransactionInputError$prime.create = function (value0) {
          return new GetPublicKeyTransactionInputError$prime(value0);
      };
      return GetPublicKeyTransactionInputError$prime;
  })();
  var BalanceTxInsError$prime = (function () {
      function BalanceTxInsError$prime(value0) {
          this.value0 = value0;
      };
      BalanceTxInsError$prime.create = function (value0) {
          return new BalanceTxInsError$prime(value0);
      };
      return BalanceTxInsError$prime;
  })();
  var BalanceNonAdaOutsError$prime = (function () {
      function BalanceNonAdaOutsError$prime(value0) {
          this.value0 = value0;
      };
      BalanceNonAdaOutsError$prime.create = function (value0) {
          return new BalanceNonAdaOutsError$prime(value0);
      };
      return BalanceNonAdaOutsError$prime;
  })();
  var EvalExUnitsAndMinFeeError$prime = (function () {
      function EvalExUnitsAndMinFeeError$prime(value0) {
          this.value0 = value0;
      };
      EvalExUnitsAndMinFeeError$prime.create = function (value0) {
          return new EvalExUnitsAndMinFeeError$prime(value0);
      };
      return EvalExUnitsAndMinFeeError$prime;
  })();
  var CollectTxInsInsufficientTxInputs = (function () {
      function CollectTxInsInsufficientTxInputs(value0) {
          this.value0 = value0;
      };
      CollectTxInsInsufficientTxInputs.create = function (value0) {
          return new CollectTxInsInsufficientTxInputs(value0);
      };
      return CollectTxInsInsufficientTxInputs;
  })();
  var size = function (v) {
      var roundupBytesToWords = function (b$prime) {
          return Data_BigInt.quot(Data_Semiring.add(Data_BigInt.semiringBigInt)(b$prime)(Data_BigInt.fromInt(7)))(Data_BigInt.fromInt(8));
      };
      var b = Data_Semiring.add(Data_BigInt.semiringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(Data_Semiring.mul(Data_BigInt.semiringBigInt)(Cardano_Types_Value.numNonAdaAssets(v))(Data_BigInt.fromInt(12)))(Cardano_Types_Value.sumTokenNameLengths(v)))(Data_Semiring.mul(Data_BigInt.semiringBigInt)(Cardano_Types_Value.numNonAdaCurrencySymbols(v))(Constants_Alonzo.pidSize));
      return Data_Semiring.add(Data_BigInt.semiringBigInt)(Data_BigInt.fromInt(6))(roundupBytesToWords(b));
  };
  var setRdmrsExecutionUnits = function (rs) {
      return function (xxs) {
          var v = Data_Array.uncons(xxs);
          if (v instanceof Data_Maybe.Nothing) {
              return rs;
          };
          if (v instanceof Data_Maybe.Just) {
              var ixMaybe = Data_Function.flip(Data_Array.findIndex)(rs)(function (v1) {
                  return Data_Enum.fromEnum(Types_RedeemerTag.boundedEnumRedeemerTag)(v1.value0.tag) === v.value0.head.rdmrPtrTag && Data_Eq.eq(Data_BigInt.eqBigInt)(v1.value0.index)(Types_Natural.toBigInt(v.value0.head.rdmrPtrIdx));
              });
              return Data_Maybe.maybe(setRdmrsExecutionUnits(rs)(v.value0.tail))(function (ix) {
                  return Data_Function.flip(setRdmrsExecutionUnits)(v.value0.tail)(Data_Lens_Setter.over(Data_Lens_Index.ix(Data_Lens_Index.indexArray)(ix)(Data_Profunctor_Strong.strongFn)(Data_Profunctor_Choice.choiceFn))(function (v1) {
                      var steps = Types_Natural.toBigInt(v.value0.head.exUnitsSteps);
                      var mem = Types_Natural.toBigInt(v.value0.head.exUnitsMem);
                      return new Data_Tuple.Tuple({
                          tag: v1.value0.tag,
                          index: v1.value0.index,
                          data: v1.value0.data,
                          exUnits: {
                              mem: mem,
                              steps: steps
                          }
                      }, v1.value1);
                  })(rs));
              })(ixMaybe);
          };
          throw new Error("Failed pattern match at BalanceTx (line 338, column 3 - line 353, column 70): " + [ v.constructor.name ]);
      };
  };
  var reattachDatumsAndRedeemers = function (v) {
      var transaction = Data_Lens_Getter.viewOn(v.unbalancedTx)(Types_UnbalancedTransaction["_transaction"](Data_Lens_Internal_Forget.strongForget));
      return Data_Lens_Setter.setJust((function () {
          var $325 = Cardano_Types_Transaction["_witnessSet"](Data_Profunctor_Strong.strongFn);
          var $326 = Cardano_Types_Transaction["_redeemers"](Data_Profunctor_Strong.strongFn);
          return function ($327) {
              return $325($326($327));
          };
      })())(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.fst)(v.redeemersTxIns))(Data_Lens_Setter.setJust((function () {
          var $328 = Cardano_Types_Transaction["_witnessSet"](Data_Profunctor_Strong.strongFn);
          var $329 = Cardano_Types_Transaction["_plutusData"](Data_Profunctor_Strong.strongFn);
          return function ($330) {
              return $328($329($330));
          };
      })())(Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.unwrap())(v.datums))(transaction));
  };
  var getPublicKeyTransactionInput = function (v) {
      return Data_Either.note(CannotConvertScriptOutputToTxInput.value)(Control_Bind.bind(Data_Maybe.bindMaybe)(Serialization_Address.addressPaymentCred((function (v1) {
          return v1.address;
      })(Data_Newtype.unwrap()(v.value1))))(function (paymentCred) {
          return Serialization_Address.withStakeCredential({
              onKeyHash: Data_Function["const"](Control_Applicative.pure(Data_Maybe.applicativeMaybe)(v.value0)),
              onScriptHash: Data_Function["const"](Data_Maybe.Nothing.value)
          })(paymentCred);
      }));
  };
  var utxosToTransactionInput = (function () {
      var $331 = Data_Array.mapMaybe(function ($334) {
          return Data_Either.hush(getPublicKeyTransactionInput($334));
      });
      var $332 = Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray);
      return function ($333) {
          return $331($332($333));
      };
  })();
  var getAmount = (function () {
      var $335 = Data_Newtype.unwrap();
      return function ($336) {
          return (function (v) {
              return v.amount;
          })($335($336));
      };
  })();
  var getInputValue = function (utxos) {
      return function (v) {
          return Data_Array.foldMap(Cardano_Types_Value.monoidValue)(getAmount)(Data_Array.mapMaybe(Data_Function.flip(Data_Map_Internal.lookup(Types_Transaction.ordTransactionInput))(utxos))((function (v1) {
              return v1.inputs;
          })(v)));
      };
  };
  var logTx = function (dictMonadEffect) {
      return function (dictMonadLogger) {
          return function (msg) {
              return function (utxos) {
                  return function (v) {
                      return Data_Foldable.traverse_((dictMonadEffect.Monad0()).Applicative0())(Data_Foldable.foldableArray)(Control_Monad_Logger_Class.trace(dictMonadLogger)(Data_Log_Tag.tag(msg)(Data_Monoid.mempty(Data_Monoid.monoidString))))([ "Input Value: " + Data_Show.show(Cardano_Types_Value.showValue)(getInputValue(utxos)(v.body)), "Output Value: " + Data_Show.show(Cardano_Types_Value.showValue)(Data_Array.foldMap(Cardano_Types_Value.monoidValue)(getAmount)(v.body.outputs)), "Fees: " + Data_Show.show(Cardano_Types_Value.showCoin)(v.body.fee) ]);
                  };
              };
          };
      };
  };
  var txInsValue = function (utxos) {
      var $337 = Data_Array.foldMap(Cardano_Types_Value.monoidValue)(getAmount);
      var $338 = Data_Array.mapMaybe(Data_Function.flip(Data_Map_Internal.lookup(Types_Transaction.ordTransactionInput))(utxos));
      return function ($339) {
          return $337($338($339));
      };
  };
  var genericUtxosAtError = {
      to: function (x) {
          return CouldNotGetUtxos.value;
      },
      from: function (x) {
          return Data_Generic_Rep.NoArguments.value;
      }
  };
  var showUtxosAtError = {
      show: Data_Show_Generic.genericShow(genericUtxosAtError)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "CouldNotGetUtxos";
          }
      }))
  };
  var genericReturnAdaChangeError = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new ReturnAdaChangeError(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return new ReturnAdaChangeImpossibleError(x.value0.value0.value0, x.value0.value0.value1);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
              return new ReturnAdaChangeCalculateMinFee(x.value0.value0);
          };
          throw new Error("Failed pattern match at BalanceTx (line 175, column 1 - line 175, column 78): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof ReturnAdaChangeError) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof ReturnAdaChangeImpossibleError) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1)));
          };
          if (x instanceof ReturnAdaChangeCalculateMinFee) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0));
          };
          throw new Error("Failed pattern match at BalanceTx (line 175, column 1 - line 175, column 78): " + [ x.constructor.name ]);
      }
  };
  var genericImpossibleError = {
      to: function (x) {
          return Impossible.value;
      },
      from: function (x) {
          return Data_Generic_Rep.NoArguments.value;
      }
  };
  var showImpossibleError = {
      show: Data_Show_Generic.genericShow(genericImpossibleError)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "Impossible";
          }
      }))
  };
  var genericGetWalletCollateralError = {
      to: function (x) {
          return CouldNotGetCollateral.value;
      },
      from: function (x) {
          return Data_Generic_Rep.NoArguments.value;
      }
  };
  var showGetWalletCollateralError = {
      show: Data_Show_Generic.genericShow(genericGetWalletCollateralError)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "CouldNotGetCollateral";
          }
      }))
  };
  var genericGetWalletAddressError = {
      to: function (x) {
          return CouldNotGetWalletAddress.value;
      },
      from: function (x) {
          return Data_Generic_Rep.NoArguments.value;
      }
  };
  var showGetWalletAddressError = {
      show: Data_Show_Generic.genericShow(genericGetWalletAddressError)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "CouldNotGetWalletAddress";
          }
      }))
  };
  var genericGetPublicKeyTransactionInputError = {
      to: function (x) {
          return CannotConvertScriptOutputToTxInput.value;
      },
      from: function (x) {
          return Data_Generic_Rep.NoArguments.value;
      }
  };
  var showGetPublicKeyTransactionInputError = {
      show: Data_Show_Generic.genericShow(genericGetPublicKeyTransactionInputError)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "CannotConvertScriptOutputToTxInput";
          }
      }))
  };
  var genericExpected = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showExpected = {
      show: Data_Show_Generic.genericShow(genericExpected)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Cardano_Types_Value.showValue))({
          reflectSymbol: function () {
              return "Expected";
          }
      }))
  };
  var genericEvalExUnitsAndMinFeeError = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new EvalExUnitsError(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return new EvalMinFeeError(x.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
              return new ReindexRedeemersError(x.value0.value0);
          };
          throw new Error("Failed pattern match at BalanceTx (line 164, column 1 - line 165, column 38): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof EvalExUnitsError) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof EvalMinFeeError) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
          };
          if (x instanceof ReindexRedeemersError) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0));
          };
          throw new Error("Failed pattern match at BalanceTx (line 164, column 1 - line 165, column 38): " + [ x.constructor.name ]);
      }
  };
  var showEvalExUnitsAndMinFeeError = {
      show: Data_Show_Generic.genericShow(genericEvalExUnitsAndMinFeeError)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(QueryM.showClientError))({
          reflectSymbol: function () {
              return "EvalExUnitsError";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(QueryM.showClientError))({
          reflectSymbol: function () {
              return "EvalMinFeeError";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(ReindexRedeemers.showReindexErrors))({
          reflectSymbol: function () {
              return "ReindexRedeemersError";
          }
      }))))
  };
  var showReturnAdaChangeError = {
      show: Data_Show_Generic.genericShow(genericReturnAdaChangeError)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Data_Show.showString))({
          reflectSymbol: function () {
              return "ReturnAdaChangeError";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(Data_Show.showString))(Data_Show_Generic.genericShowArgsArgument(showImpossibleError)))({
          reflectSymbol: function () {
              return "ReturnAdaChangeImpossibleError";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showEvalExUnitsAndMinFeeError))({
          reflectSymbol: function () {
              return "ReturnAdaChangeCalculateMinFee";
          }
      }))))
  };
  var genericCannotMinusError = {
      to: function (x) {
          return new CannotMinus(x);
      },
      from: function (x) {
          return x.value0;
      }
  };
  var genericBalanceTxInsError = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new InsufficientTxInputs(x.value0.value0, x.value0.value1);
          };
          if (x instanceof Data_Generic_Rep.Inr) {
              return new BalanceTxInsCannotMinus(x.value0);
          };
          throw new Error("Failed pattern match at BalanceTx (line 202, column 1 - line 202, column 72): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof InsufficientTxInputs) {
              return new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1));
          };
          if (x instanceof BalanceTxInsCannotMinus) {
              return new Data_Generic_Rep.Inr(x.value0);
          };
          throw new Error("Failed pattern match at BalanceTx (line 202, column 1 - line 202, column 72): " + [ x.constructor.name ]);
      }
  };
  var genericBalanceTxError = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return new GetWalletAddressError$prime(x.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
              return new GetWalletCollateralError$prime(x.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
              return new UtxosAtError$prime(x.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
              return new ReturnAdaChangeError$prime(x.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
              return new AddTxCollateralsError$prime(x.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
              return new GetPublicKeyTransactionInputError$prime(x.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))) {
              return new BalanceTxInsError$prime(x.value0.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))) {
              return new BalanceNonAdaOutsError$prime(x.value0.value0.value0.value0.value0.value0.value0.value0);
          };
          if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr))))))) {
              return new EvalExUnitsAndMinFeeError$prime(x.value0.value0.value0.value0.value0.value0.value0.value0);
          };
          throw new Error("Failed pattern match at BalanceTx (line 132, column 1 - line 132, column 66): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof GetWalletAddressError$prime) {
              return new Data_Generic_Rep.Inl(x.value0);
          };
          if (x instanceof GetWalletCollateralError$prime) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
          };
          if (x instanceof UtxosAtError$prime) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
          };
          if (x instanceof ReturnAdaChangeError$prime) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))));
          };
          if (x instanceof AddTxCollateralsError$prime) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))));
          };
          if (x instanceof GetPublicKeyTransactionInputError$prime) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))))));
          };
          if (x instanceof BalanceTxInsError$prime) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))))));
          };
          if (x instanceof BalanceNonAdaOutsError$prime) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))))))));
          };
          if (x instanceof EvalExUnitsAndMinFeeError$prime) {
              return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0))))))));
          };
          throw new Error("Failed pattern match at BalanceTx (line 132, column 1 - line 132, column 66): " + [ x.constructor.name ]);
      }
  };
  var genericBalanceNonAdaOutsError = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return InputsCannotBalanceNonAdaTokens.value;
          };
          if (x instanceof Data_Generic_Rep.Inr) {
              return new BalanceNonAdaOutsCannotMinus(x.value0);
          };
          throw new Error("Failed pattern match at BalanceTx (line 241, column 1 - line 242, column 35): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof InputsCannotBalanceNonAdaTokens) {
              return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
          };
          if (x instanceof BalanceNonAdaOutsCannotMinus) {
              return new Data_Generic_Rep.Inr(x.value0);
          };
          throw new Error("Failed pattern match at BalanceTx (line 241, column 1 - line 242, column 35): " + [ x.constructor.name ]);
      }
  };
  var genericAddTxCollateralsError = {
      to: function (x) {
          if (x instanceof Data_Generic_Rep.Inl) {
              return CollateralUtxosUnavailable.value;
          };
          if (x instanceof Data_Generic_Rep.Inr) {
              return AddTxCollateralsError.value;
          };
          throw new Error("Failed pattern match at BalanceTx (line 184, column 1 - line 184, column 80): " + [ x.constructor.name ]);
      },
      from: function (x) {
          if (x instanceof CollateralUtxosUnavailable) {
              return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
          };
          if (x instanceof AddTxCollateralsError) {
              return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
          };
          throw new Error("Failed pattern match at BalanceTx (line 184, column 1 - line 184, column 80): " + [ x.constructor.name ]);
      }
  };
  var showAddTxCollateralsError = {
      show: Data_Show_Generic.genericShow(genericAddTxCollateralsError)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "CollateralUtxosUnavailable";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "AddTxCollateralsError";
          }
      })))
  };
  var genericActual = {
      to: function (x) {
          return x;
      },
      from: function (x) {
          return x;
      }
  };
  var showActual = {
      show: Data_Show_Generic.genericShow(genericActual)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(Cardano_Types_Value.showValue))({
          reflectSymbol: function () {
              return "Actual";
          }
      }))
  };
  var showCannotMinusError = {
      show: Data_Show_Generic.genericShow(genericCannotMinusError)(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showActual))({
          reflectSymbol: function () {
              return "CannotMinus";
          }
      }))
  };
  var showBalanceNonAdaOutsError = {
      show: Data_Show_Generic.genericShow(genericBalanceNonAdaOutsError)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments)({
          reflectSymbol: function () {
              return "InputsCannotBalanceNonAdaTokens";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showCannotMinusError))({
          reflectSymbol: function () {
              return "BalanceNonAdaOutsCannotMinus";
          }
      })))
  };
  var showBalanceTxInsError = {
      show: Data_Show_Generic.genericShow(genericBalanceTxInsError)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsProduct(Data_Show_Generic.genericShowArgsArgument(showExpected))(Data_Show_Generic.genericShowArgsArgument(showActual)))({
          reflectSymbol: function () {
              return "InsufficientTxInputs";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showCannotMinusError))({
          reflectSymbol: function () {
              return "BalanceTxInsCannotMinus";
          }
      })))
  };
  var showBalanceTxError = {
      show: Data_Show_Generic.genericShow(genericBalanceTxError)(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showGetWalletAddressError))({
          reflectSymbol: function () {
              return "GetWalletAddressError'";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showGetWalletCollateralError))({
          reflectSymbol: function () {
              return "GetWalletCollateralError'";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showUtxosAtError))({
          reflectSymbol: function () {
              return "UtxosAtError'";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showReturnAdaChangeError))({
          reflectSymbol: function () {
              return "ReturnAdaChangeError'";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showAddTxCollateralsError))({
          reflectSymbol: function () {
              return "AddTxCollateralsError'";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showGetPublicKeyTransactionInputError))({
          reflectSymbol: function () {
              return "GetPublicKeyTransactionInputError'";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showBalanceTxInsError))({
          reflectSymbol: function () {
              return "BalanceTxInsError'";
          }
      }))(Data_Show_Generic.genericShowSum(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showBalanceNonAdaOutsError))({
          reflectSymbol: function () {
              return "BalanceNonAdaOutsError'";
          }
      }))(Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsArgument(showEvalExUnitsAndMinFeeError))({
          reflectSymbol: function () {
              return "EvalExUnitsAndMinFeeError'";
          }
      }))))))))))
  };
  var dataHashSize = function (v) {
      if (v instanceof Data_Maybe.Nothing) {
          return Data_Semiring.zero(Data_BigInt.semiringBigInt);
      };
      if (v instanceof Data_Maybe.Just) {
          return Data_BigInt.fromInt(10);
      };
      throw new Error("Failed pattern match at BalanceTx (line 724, column 1 - line 724, column 41): " + [ v.constructor.name ]);
  };
  var collectTxIns = function (originalTxIns) {
      return function (utxos) {
          return function (value) {
              var isSufficient = function (txIns$prime) {
                  return !Data_Array["null"](txIns$prime) && Cardano_Types_Value.geq(txInsValue(utxos)(txIns$prime))(value);
              };
              var updatedInputs = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (newTxIns) {
                  return function (txIn) {
                      var $239 = Data_Array.elem(Types_Transaction.eqTransactionInput)(txIn)(newTxIns) || isSufficient(newTxIns);
                      if ($239) {
                          return newTxIns;
                      };
                      return Data_Array.insert(Types_Transaction.ordTransactionInput)(txIn)(newTxIns);
                  };
              })(originalTxIns)(utxosToTransactionInput(utxos));
              var $240 = isSufficient(updatedInputs);
              if ($240) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)(updatedInputs);
              };
              return new Data_Either.Left(new CollectTxInsInsufficientTxInputs(new InsufficientTxInputs(value, txInsValue(utxos)(updatedInputs))));
          };
      };
  };
  var calculateMinUtxo = function (uTxOCostPerWord) {
      return function (txOut) {
          var utxoEntrySize = function (v) {
              var $242 = Cardano_Types_Value.isAdaOnly(v.amount);
              if ($242) {
                  return Data_Semiring.add(Data_BigInt.semiringBigInt)(Constants_Alonzo.utxoEntrySizeWithoutVal)(Constants_Alonzo.coinSize);
              };
              return Data_Semiring.add(Data_BigInt.semiringBigInt)(Data_Semiring.add(Data_BigInt.semiringBigInt)(Constants_Alonzo.utxoEntrySizeWithoutVal)(size(v.amount)))(dataHashSize(v.dataHash));
          };
          return Data_Semiring.mul(Data_BigInt.semiringBigInt)(Data_Newtype.unwrap()(uTxOCostPerWord))(utxoEntrySize(txOut));
      };
  };
  var calculateMinUtxos = function (uTxOCostPerWord) {
      return Data_Functor.map(Data_Functor.functorArray)(function (a) {
          return new Data_Tuple.Tuple(a, calculateMinUtxo(uTxOCostPerWord)(a));
      });
  };
  var balanceTxIns$prime = function (utxos) {
      return function (fees) {
          return function (v) {
              var utxoCost = Cardano_Types_Value.getLovelace(Constants_Alonzo.protocolParamUTxOCostPerWord);
              var mintVal = Data_Maybe.maybe(Data_Monoid.mempty(Cardano_Types_Value.monoidValue))((function () {
                  var $340 = Cardano_Types_Value.mkValue(Cardano_Types_Value.mkCoin(0));
                  var $341 = Data_Newtype.unwrap();
                  return function ($342) {
                      return $340($341($342));
                  };
              })())(v.mint);
              var changeMinUtxo = Data_Semiring.mul(Data_BigInt.semiringBigInt)(Constants_Alonzo.adaOnlyWords)(utxoCost);
              return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(new BalanceTxInsCannotMinus(new CannotMinus(Data_Newtype.wrap()(mintVal))))(Cardano_Types_Value.minus(Data_Array.foldMap(Cardano_Types_Value.monoidValue)(getAmount)(v.outputs))(mintVal)))(function (nonMintedValue) {
                  var minSpending = Data_Semigroup.append(Cardano_Types_Value.semigroupValue)(Cardano_Types_Value.lovelaceValueOf(Data_Semiring.add(Data_BigInt.semiringBigInt)(fees)(changeMinUtxo)))(nonMintedValue);
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(function (v1) {
                      return v1.value0;
                  })(collectTxIns(v.inputs)(utxos)(minSpending)))(function (v1) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()({
                          inputs: Data_Array.union(Types_Transaction.eqTransactionInput)(v1)(v.inputs),
                          auxiliaryDataHash: v.auxiliaryDataHash,
                          certs: v.certs,
                          collateral: v.collateral,
                          fee: v.fee,
                          mint: v.mint,
                          networkId: v.networkId,
                          outputs: v.outputs,
                          requiredSigners: v.requiredSigners,
                          scriptDataHash: v.scriptDataHash,
                          ttl: v.ttl,
                          update: v.update,
                          validityStartInterval: v.validityStartInterval,
                          withdrawals: v.withdrawals
                      }));
                  });
              });
          };
      };
  };
  var balanceTxIns = function (utxos) {
      return function (fees) {
          return function (txbody) {
              return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(BalanceTxInsError$prime.create)(balanceTxIns$prime(utxos)(fees)(txbody));
          };
      };
  };
  var balanceNonAdaOuts$prime = function (changeAddr) {
      return function (utxos) {
          return function (v) {
              var outputValue = Data_Array.foldMap(Cardano_Types_Value.monoidValue)(getAmount)(v.outputs);
              var mintVal = Data_Maybe.maybe(Data_Monoid.mempty(Cardano_Types_Value.monoidValue))((function () {
                  var $343 = Cardano_Types_Value.mkValue(Cardano_Types_Value.mkCoin(0));
                  var $344 = Data_Newtype.unwrap();
                  return function ($345) {
                      return $343($344($345));
                  };
              })())(v.mint);
              var inputValue = getInputValue(utxos)(v);
              return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(new BalanceNonAdaOutsCannotMinus(new CannotMinus(Data_Newtype.wrap()(mintVal))))(Cardano_Types_Value.minus(outputValue)(mintVal)))(function (nonMintedOutputValue) {
                  var v1 = Cardano_Types_Value.filterNonAda(nonMintedOutputValue);
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(new BalanceNonAdaOutsCannotMinus(new CannotMinus(Data_Newtype.wrap()(v1))))(Cardano_Types_Value.minus(Cardano_Types_Value.filterNonAda(inputValue))(v1)))(function (nonAdaChange) {
                      var outputs = Data_Array.fromFoldable(Data_List_Types.foldableList)((function () {
                          var v2 = Data_List.partition((function () {
                              var $346 = Data_Eq.eq(Serialization_Address.eqAddress)(changeAddr);
                              var $347 = Data_Newtype.unwrap();
                              return function ($348) {
                                  return $346((function (v3) {
                                      return v3.address;
                                  })($347($348)));
                              };
                          })())(Data_Array.toUnfoldable(Data_List_Types.unfoldableList)(v.outputs));
                          if (v2.yes instanceof Data_List_Types.Nil) {
                              return new Data_List_Types.Cons({
                                  address: changeAddr,
                                  amount: nonAdaChange,
                                  dataHash: Data_Maybe.Nothing.value
                              }, v2.no);
                          };
                          if (v2.yes instanceof Data_List_Types.Cons) {
                              return Data_Semigroup.append(Data_List_Types.semigroupList)(new Data_List_Types.Cons({
                                  address: v2.yes.value0.address,
                                  amount: Data_Semigroup.append(Cardano_Types_Value.semigroupValue)(v2.yes.value0.amount)(nonAdaChange),
                                  dataHash: v2.yes.value0.dataHash
                              }, v2.yes.value1))(v2.no);
                          };
                          throw new Error("Failed pattern match at BalanceTx (line 958, column 9 - line 974, column 71): " + [ v2.constructor.name ]);
                      })());
                      var $261 = Cardano_Types_Value.isPos(nonAdaChange);
                      if ($261) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()({
                              outputs: outputs,
                              auxiliaryDataHash: v.auxiliaryDataHash,
                              certs: v.certs,
                              collateral: v.collateral,
                              fee: v.fee,
                              inputs: v.inputs,
                              mint: v.mint,
                              networkId: v.networkId,
                              requiredSigners: v.requiredSigners,
                              scriptDataHash: v.scriptDataHash,
                              ttl: v.ttl,
                              update: v.update,
                              validityStartInterval: v.validityStartInterval,
                              withdrawals: v.withdrawals
                          }));
                      };
                      var $262 = Cardano_Types_Value.isZero(nonAdaChange);
                      if ($262) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()(v));
                      };
                      return new Data_Either.Left(InputsCannotBalanceNonAdaTokens.value);
                  });
              });
          };
      };
  };
  var balanceNonAdaOuts = function (changeAddr) {
      return function (utxos) {
          return function (txBody) {
              return Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(BalanceNonAdaOutsError$prime.create)(balanceNonAdaOuts$prime(changeAddr)(utxos)(txBody));
          };
      };
  };
  var addTxCollateral = function (v) {
      return function (transaction) {
          return Data_Lens_Setter.setJust((function () {
              var $349 = Cardano_Types_Transaction["_body"](Data_Profunctor_Strong.strongFn);
              var $350 = Cardano_Types_Transaction["_collateral"](Data_Profunctor_Strong.strongFn);
              return function ($351) {
                  return $349($350($351));
              };
          })())(Data_Array.singleton(v.input))(transaction);
      };
  };
  var addLovelaces = function (minLovelaces) {
      return function (v) {
          var lovelacesAdded = Data_Functor.map(Data_Functor.functorArray)(function (txOut$prime) {
              var txOut = Data_Newtype.unwrap()(txOut$prime);
              var minUtxo = Data_Maybe.fromMaybe(Data_Semiring.zero(Data_BigInt.semiringBigInt))(Data_Foldable.lookup(Data_Foldable.foldableArray)(Cardano_Types_Transaction.eqTransactionOutput)(txOut$prime)(minLovelaces));
              var lovelaces = Cardano_Types_Value.getLovelace(Cardano_Types_Value.valueToCoin(txOut.amount));
              return Data_Newtype.wrap()((function () {
                  var $268 = {};
                  for (var $269 in txOut) {
                      if ({}.hasOwnProperty.call(txOut, $269)) {
                          $268[$269] = txOut[$269];
                      };
                  };
                  $268.amount = Data_Semigroup.append(Cardano_Types_Value.semigroupValue)(txOut.amount)(Cardano_Types_Value.lovelaceValueOf(Data_Ord.max(Data_BigInt.ordBigInt)(Data_Semiring.zero(Data_BigInt.semiringBigInt))(Data_Ring.sub(Data_BigInt.ringBigInt)(minUtxo)(lovelaces))));
                  return $268;
              })());
          })(v.outputs);
          return Data_Newtype.wrap()({
              outputs: lovelacesAdded,
              auxiliaryDataHash: v.auxiliaryDataHash,
              certs: v.certs,
              collateral: v.collateral,
              fee: v.fee,
              inputs: v.inputs,
              mint: v.mint,
              networkId: v.networkId,
              requiredSigners: v.requiredSigners,
              scriptDataHash: v.scriptDataHash,
              ttl: v.ttl,
              update: v.update,
              validityStartInterval: v.validityStartInterval,
              withdrawals: v.withdrawals
          });
      };
  };
  var preBalanceTxBody = function (minUtxos) {
      return function (fees) {
          return function (utxos) {
              return function (ownAddr) {
                  return function (txBody) {
                      return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bind(Data_Either.bindEither)(Control_Applicative.pure(Data_Either.applicativeEither)(addLovelaces(minUtxos)(txBody)))(balanceTxIns(utxos)(fees)))(balanceNonAdaOuts(ownAddr)(utxos));
                  };
              };
          };
      };
  };
  var _unbalancedTx = function (dictStrong) {
      return Data_Lens_Lens["lens'"](function (v) {
          return new Data_Tuple.Tuple(v.unbalancedTx, function (ubTx) {
              return {
                  unbalancedTx: ubTx,
                  datums: v.datums,
                  redeemersTxIns: v.redeemersTxIns
              };
          });
      })(dictStrong);
  };
  var _transaction$prime = function (dictStrong) {
      return Data_Lens_Lens["lens'"](function (unattachedTx) {
          return new Data_Tuple.Tuple(Data_Lens_Getter.viewOn(unattachedTx)((function () {
              var $352 = _unbalancedTx(Data_Lens_Internal_Forget.strongForget);
              var $353 = Types_UnbalancedTransaction["_transaction"](Data_Lens_Internal_Forget.strongForget);
              return function ($354) {
                  return $352($353($354));
              };
          })()), function (tx) {
              return Data_Lens_Setter.over(_unbalancedTx(Data_Profunctor_Strong.strongFn))(Data_Lens_Setter.set(Types_UnbalancedTransaction["_transaction"](Data_Profunctor_Strong.strongFn))(tx))(unattachedTx);
          });
      })(dictStrong);
  };
  var _redeemersTxIns = function (dictStrong) {
      return Data_Lens_Lens["lens'"](function (v) {
          return new Data_Tuple.Tuple(v.redeemersTxIns, function (rdmrs) {
              return {
                  unbalancedTx: v.unbalancedTx,
                  datums: v.datums,
                  redeemersTxIns: rdmrs
              };
          });
      })(dictStrong);
  };
  var updateTxExecutionUnits = function (unattachedTx) {
      return function (rdmrPtrExUnits) {
          return Data_Lens_Setter.over(_redeemersTxIns(Data_Profunctor_Strong.strongFn))(Data_Function.flip(setRdmrsExecutionUnits)(rdmrPtrExUnits))(unattachedTx);
      };
  };
  var _body$prime = function (dictStrong) {
      return Data_Lens_Lens["lens'"](function (unattachedTx) {
          return new Data_Tuple.Tuple(Data_Lens_Getter.viewOn(unattachedTx)((function () {
              var $355 = _transaction$prime(Data_Lens_Internal_Forget.strongForget);
              var $356 = Cardano_Types_Transaction["_body"](Data_Lens_Internal_Forget.strongForget);
              return function ($357) {
                  return $355($356($357));
              };
          })()), function (txBody) {
              return Data_Lens_Setter.over(_transaction$prime(Data_Profunctor_Strong.strongFn))(Data_Lens_Setter.set(Cardano_Types_Transaction["_body"](Data_Profunctor_Strong.strongFn))(txBody))(unattachedTx);
          });
      })(dictStrong);
  };
  var reindexRedeemers = function (v) {
      var inputs = Data_Lens_Getter.viewOn(v)((function () {
          var $358 = _body$prime(Data_Lens_Internal_Forget.strongForget);
          var $359 = Cardano_Types_Transaction["_inputs"](Data_Lens_Internal_Forget.strongForget);
          return function ($360) {
              return $358($359($360));
          };
      })());
      return Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(ReindexRedeemers["reindexSpentScriptRedeemers'"](inputs)(v.redeemersTxIns))(Data_Functor.map(Data_Either.functorEither)(function (redeemersTxInsReindexed) {
          return Data_Lens_Setter.set(_redeemersTxIns(Data_Profunctor_Strong.strongFn))(redeemersTxInsReindexed)(v);
      }));
  };
  var evalExUnitsAndMinFee$prime = function (unattachedTx) {
      return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(reindexRedeemers(unattachedTx))(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(ReindexRedeemersError.create)))(function (unattachedReindexedTx) {
          var attachedTx = reattachDatumsAndRedeemers(unattachedReindexedTx);
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(QueryM.evalTxExecutionUnits(attachedTx))(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(EvalExUnitsError.create)))(function (rdmrPtrExUnitsList) {
              var unattachedTxWithExUnits = updateTxExecutionUnits(unattachedReindexedTx)(rdmrPtrExUnitsList);
              var attachedTxWithExUnits = reattachDatumsAndRedeemers(unattachedTxWithExUnits);
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(QueryM.calculateMinFee(attachedTxWithExUnits))(Data_Bifunctor.bimap(Data_Bifunctor.bifunctorEither)(EvalMinFeeError.create)(Data_Newtype.unwrap())))(function (minFee) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(new Data_Tuple.Tuple(unattachedTxWithExUnits, minFee));
              });
          });
      }));
  };
  var evalExUnitsAndMinFee = (function () {
      var $361 = Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(EvalExUnitsAndMinFeeError$prime.create));
      return function ($362) {
          return $361(evalExUnitsAndMinFee$prime($362));
      };
  })();
  var returnAdaChange = function (changeAddr) {
      return function (utxos) {
          return function (v) {
              var v1 = Data_Lens_Getter.viewOn(v.value0)(_body$prime(Data_Lens_Internal_Forget.strongForget));
              var outputValue = Data_Array.foldMap(Cardano_Types_Value.monoidValue)(getAmount)(v1.outputs);
              var outputAda = Cardano_Types_Value.getLovelace(Cardano_Types_Value.valueToCoin(outputValue));
              var inputValue = getInputValue(utxos)(Data_Newtype.wrap()(v1));
              var inputAda = Cardano_Types_Value.getLovelace(Cardano_Types_Value.valueToCoin(inputValue));
              var returnAda = Data_Ring.sub(Data_BigInt.ringBigInt)(Data_Ring.sub(Data_BigInt.ringBigInt)(inputAda)(outputAda))(v.value1);
              var v2 = Data_Ord.compare(Data_BigInt.ordBigInt)(returnAda)(Data_Semiring.zero(Data_BigInt.semiringBigInt));
              if (v2 instanceof Data_Ordering.EQ) {
                  return new Data_Either.Right(new Data_Tuple.Tuple(v.value0, {
                      recalculateFees: false
                  }));
              };
              if (v2 instanceof Data_Ordering.LT) {
                  return new Data_Either.Left(new ReturnAdaChangeImpossibleError("Not enough Input Ada to cover output and fees after prebalance.", Impossible.value));
              };
              if (v2 instanceof Data_Ordering.GT) {
                  var changeTxOutput = Data_Newtype.wrap()({
                      address: changeAddr,
                      amount: Cardano_Types_Value.lovelaceValueOf(returnAda),
                      dataHash: Data_Maybe.Nothing.value
                  });
                  var unattachedTxWithChangeTxOut = Data_Lens_Setter.over((function () {
                      var $363 = _body$prime(Data_Profunctor_Strong.strongFn);
                      var $364 = Cardano_Types_Transaction["_outputs"](Data_Profunctor_Strong.strongFn);
                      return function ($365) {
                          return $363($364($365));
                      };
                  })())(Data_Array.cons(changeTxOutput))(v.value0);
                  return new Data_Either.Right(new Data_Tuple.Tuple(unattachedTxWithChangeTxOut, {
                      recalculateFees: true
                  }));
              };
              throw new Error("Failed pattern match at BalanceTx (line 668, column 5 - line 692, column 69): " + [ v2.constructor.name ]);
          };
      };
  };
  var returnAdaChangeAndFinalizeFees = function (changeAddr) {
      return function (utxos) {
          return function (unattachedTx) {
              var updateChangeTxOutputValue = function (returnAda) {
                  var $366 = Data_Either.note(new ReturnAdaChangeError("Couldn't modify utxo to return change."));
                  var $367 = Data_Array.modifyAt(0)(function (v) {
                      return {
                          address: v.address,
                          amount: Cardano_Types_Value.lovelaceValueOf(returnAda),
                          dataHash: v.dataHash
                      };
                  });
                  return function ($368) {
                      return $366($367($368));
                  };
              };
              var unattachedTxSetFees = function (unattachedTx$prime) {
                  return function (fees) {
                      return Data_Lens_Setter.set((function () {
                          var $369 = _body$prime(Data_Profunctor_Strong.strongFn);
                          var $370 = Cardano_Types_Transaction["_fee"](Data_Profunctor_Strong.strongFn);
                          return function ($371) {
                              return $369($370($371));
                          };
                      })())(Data_Newtype.wrap()(fees))(unattachedTx$prime);
                  };
              };
              var adjustAdaChangeAndSetFees = function (unattachedTx$prime) {
                  return function (fees) {
                      return function (feesDelta) {
                          if (Data_Ord.lessThanOrEq(Data_BigInt.ordBigInt)(feesDelta)(Data_Semiring.zero(Data_BigInt.semiringBigInt))) {
                              return new Data_Either.Right(unattachedTxSetFees(unattachedTx$prime)(fees));
                          };
                          if (Data_Boolean.otherwise) {
                              var utxoCost = Cardano_Types_Value.getLovelace(Constants_Alonzo.protocolParamUTxOCostPerWord);
                              var txOutputs = Data_Lens_Getter.viewOn(unattachedTx$prime)((function () {
                                  var $372 = _body$prime(Data_Lens_Internal_Forget.strongForget);
                                  var $373 = Cardano_Types_Transaction["_outputs"](Data_Lens_Internal_Forget.strongForget);
                                  return function ($374) {
                                      return $372($373($374));
                                  };
                              })());
                              var returnAda = Data_Maybe.fromMaybe(Data_Semiring.zero(Data_BigInt.semiringBigInt))(Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(Data_Array.head(txOutputs))(function (v) {
                                  return Data_Ring.sub(Data_BigInt.ringBigInt)(Cardano_Types_Value["valueToCoin'"](v.amount))(feesDelta);
                              }));
                              var changeMinUtxo = Data_Semiring.mul(Data_BigInt.semiringBigInt)(Constants_Alonzo.adaOnlyWords)(utxoCost);
                              var v = Data_Ord.greaterThanOrEq(Data_BigInt.ordBigInt)(returnAda)(changeMinUtxo);
                              if (v) {
                                  return Control_Bind.bind(Data_Either.bindEither)(updateChangeTxOutputValue(returnAda)(txOutputs))(function (newOutputs) {
                                      return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Lens_Setter.over(_body$prime(Data_Profunctor_Strong.strongFn))(function (v1) {
                                          return Data_Newtype.wrap()({
                                              outputs: newOutputs,
                                              fee: Data_Newtype.wrap()(fees),
                                              auxiliaryDataHash: v1.auxiliaryDataHash,
                                              certs: v1.certs,
                                              collateral: v1.collateral,
                                              inputs: v1.inputs,
                                              mint: v1.mint,
                                              networkId: v1.networkId,
                                              requiredSigners: v1.requiredSigners,
                                              scriptDataHash: v1.scriptDataHash,
                                              ttl: v1.ttl,
                                              update: v1.update,
                                              validityStartInterval: v1.validityStartInterval,
                                              withdrawals: v1.withdrawals
                                          });
                                      })(unattachedTx$prime));
                                  });
                              };
                              if (!v) {
                                  return new Data_Either.Left(new ReturnAdaChangeError("returnAda does not cover min utxo requirement for single Ada-only output."));
                              };
                              throw new Error("Failed pattern match at BalanceTx (line 612, column 11 - line 622, column 44): " + [ v.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at BalanceTx (line 588, column 3 - line 592, column 58): " + [ unattachedTx$prime.constructor.name, fees.constructor.name, feesDelta.constructor.name ]);
                      };
                  };
              };
              return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(evalExUnitsAndMinFee$prime(unattachedTx))(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(ReturnAdaChangeCalculateMinFee.create)))(function (v) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Control_Monad_Except_Trans.except(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff)))(returnAdaChange(changeAddr)(utxos)(v)))(function (v1) {
                      if (!v1.value1.recalculateFees) {
                          return Control_Monad_Except_Trans.except(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff)))(Data_Either.Right.create(unattachedTxSetFees(v1.value0)(v.value1)));
                      };
                      if (v1.value1.recalculateFees) {
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(evalExUnitsAndMinFee$prime(v1.value0))(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(ReturnAdaChangeCalculateMinFee.create)))(function (v2) {
                              return Control_Monad_Except_Trans.except(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff)))(adjustAdaChangeAndSetFees(v2.value0)(v2.value1)(Data_Ring.sub(Data_BigInt.ringBigInt)(v2.value1)(v.value1)));
                          });
                      };
                      throw new Error("Failed pattern match at BalanceTx (line 576, column 5 - line 586, column 71): " + [ v1.value1.recalculateFees.constructor.name ]);
                  });
              }));
          };
      };
  };
  var balanceTx = function (v) {
      var prebalanceCollateral = function (fees) {
          return function (utxos) {
              return function (ownAddr) {
                  return function (tx) {
                      return Data_Functor.mapFlipped(Data_Either.functorEither)(Control_Bind.bind(Data_Either.bindEither)(balanceTxIns(utxos)(fees)(Data_Lens_Getter.viewOn(tx)(Cardano_Types_Transaction["_body"](Data_Lens_Internal_Forget.strongForget))))(balanceNonAdaOuts(ownAddr)(utxos)))(Data_Function.flip(Data_Lens_Setter.set(Cardano_Types_Transaction["_body"](Data_Profunctor_Strong.strongFn)))(tx));
                  };
              };
          };
      };
      var feeBuffer = Data_BigInt.fromInt(500000);
      var chainedBalancer = function (minUtxos$prime) {
          return function (utxoIndex$prime) {
              return function (ownAddr$prime) {
                  return function (unattachedTx$prime) {
                      return Control_Monad_Except_Trans.runExceptT((function () {
                          var v1 = Data_Lens_Getter.viewOn(unattachedTx$prime)(_transaction$prime(Data_Lens_Internal_Forget.strongForget));
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Control_Monad_Except_Trans.except(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff)))(preBalanceTxBody(minUtxos$prime)(Data_Semiring.zero(Data_BigInt.semiringBigInt))(utxoIndex$prime)(ownAddr$prime)(v1.body)))(function (txBodyWithoutFees$prime) {
                              var tx$prime = Data_Newtype.wrap()({
                                  body: txBodyWithoutFees$prime,
                                  auxiliaryData: v1.auxiliaryData,
                                  isValid: v1.isValid,
                                  witnessSet: v1.witnessSet
                              });
                              var unattachedTx$prime$prime = Data_Lens_Setter.set((function () {
                                  var $375 = _unbalancedTx(Data_Profunctor_Strong.strongFn);
                                  var $376 = Types_UnbalancedTransaction["_transaction"](Data_Profunctor_Strong.strongFn);
                                  return function ($377) {
                                      return $375($376($377));
                                  };
                              })())(tx$prime)(unattachedTx$prime);
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(evalExUnitsAndMinFee(unattachedTx$prime$prime))(function (v2) {
                                  return Control_Monad_Except_Trans.except(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff)))(Data_Functor.map(Data_Either.functorEither)(function (body) {
                                      return Data_Lens_Setter.set(_body$prime(Data_Profunctor_Strong.strongFn))(body)(v2.value0);
                                  })(preBalanceTxBody(minUtxos$prime)(Data_Semiring.add(Data_BigInt.semiringBigInt)(v2.value1)(feeBuffer))(utxoIndex$prime)(ownAddr$prime)(v1.body)));
                              });
                          });
                      })());
                  };
              };
          };
      };
      var loop = function (utxoIndex$prime) {
          return function (ownAddr$prime) {
              return function (prevMinUtxos$prime) {
                  return function (unattachedTx$prime) {
                      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Logger_Trans.bindLoggerT(Effect_Aff.monadAff)))(Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(QueryM_ProtocolParameters.getProtocolParameters)((function () {
                          var $378 = Data_Newtype.unwrap();
                          return function ($379) {
                              return (function (v1) {
                                  return v1.uTxOCostPerWord;
                              })($378($379));
                          };
                      })()))(function (uTxOCostPerWord) {
                          var v1 = Data_Lens_Getter.viewOn(unattachedTx$prime)(_transaction$prime(Data_Lens_Internal_Forget.strongForget));
                          var nextMinUtxos$prime = calculateMinUtxos(uTxOCostPerWord)(Data_Array.difference(Cardano_Types_Transaction.eqTransactionOutput)(v1.body.outputs)(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.fst)(prevMinUtxos$prime)));
                          var minUtxos$prime = Data_Semigroup.append(Data_Semigroup.semigroupArray)(prevMinUtxos$prime)(nextMinUtxos$prime);
                          return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Logger_Trans.bindLoggerT(Effect_Aff.monadAff)))(chainedBalancer(minUtxos$prime)(utxoIndex$prime)(ownAddr$prime)(unattachedTx$prime))(function (unattachedTxWithBalancedBody) {
                              if (unattachedTxWithBalancedBody instanceof Data_Either.Left) {
                                  return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff)))(new Data_Either.Left(unattachedTxWithBalancedBody.value0));
                              };
                              if (unattachedTxWithBalancedBody instanceof Data_Either.Right) {
                                  var balancedTxBody = Data_Lens_Getter.viewOn(unattachedTxWithBalancedBody.value0)(_body$prime(Data_Lens_Internal_Forget.strongForget));
                                  var $311 = Data_Eq.eq(Cardano_Types_Transaction.eqTxBody)(v1.body)(balancedTxBody);
                                  if ($311) {
                                      return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff)))(new Data_Either.Right(unattachedTxWithBalancedBody.value0));
                                  };
                                  return loop(utxoIndex$prime)(ownAddr$prime)(minUtxos$prime)(unattachedTxWithBalancedBody.value0);
                              };
                              throw new Error("Failed pattern match at BalanceTx (line 487, column 5 - line 496, column 77): " + [ unattachedTxWithBalancedBody.constructor.name ]);
                          });
                      });
                  };
              };
          };
      };
      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Logger_Trans.bindLoggerT(Effect_Aff.monadAff)))(Data_Maybe.maybe(Control_Monad_Reader_Class.asks(Control_Monad_Reader_Trans.monadAskReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff)))(function (v1) {
          return v1.networkId;
      }))(Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff))))(Data_Lens_Getter.viewOn(v.unbalancedTx.transaction)((function () {
          var $380 = Cardano_Types_Transaction["_body"](Data_Lens_Internal_Forget.strongForget);
          var $381 = Cardano_Types_Transaction["_networkId"](Data_Lens_Internal_Forget.strongForget);
          return function ($382) {
              return $380($381($382));
          };
      })())))(function (networkId) {
          var unbalancedTx$prime = Data_Lens_Setter.setJust((function () {
              var $383 = Cardano_Types_Transaction["_body"](Data_Profunctor_Strong.strongFn);
              var $384 = Cardano_Types_Transaction["_networkId"](Data_Profunctor_Strong.strongFn);
              return function ($385) {
                  return $383($384($385));
              };
          })())(networkId)(v.unbalancedTx.transaction);
          return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(QueryM.getWalletAddress)(Data_Either.note(new GetWalletAddressError$prime(CouldNotGetWalletAddress.value))))(function (ownAddr) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Control_Monad_Reader_Class.asks(Control_Monad_Except_Trans.monadAskExceptT(Control_Monad_Reader_Trans.monadAskReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(function (v1) {
                  return v1.wallet;
              }))(function (wallet) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(QueryM_Utxos.utxosAt(ownAddr))((function () {
                      var $386 = Data_Functor.map(Data_Either.functorEither)(Data_Newtype.unwrap());
                      var $387 = Data_Either.note(new UtxosAtError$prime(CouldNotGetUtxos.value));
                      return function ($388) {
                          return $386($387($388));
                      };
                  })()))(function (utxos) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))((function () {
                          if (wallet instanceof Data_Maybe.Just && Data_Maybe.isJust(Wallet.cip30Wallet(wallet.value0))) {
                              return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff))))(Data_Maybe.Just.create)(Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(QueryM.getWalletCollateral)(Data_Either.note(new GetWalletCollateralError$prime(CouldNotGetCollateral.value))));
                          };
                          if (wallet instanceof Data_Maybe.Just && wallet.value0 instanceof Wallet.KeyWallet) {
                              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(wallet.value0.value0.selectCollateral(utxos));
                          };
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Data_Maybe.Nothing.value);
                      })())(function (collateral) {
                          var unbalancedCollTx = Data_Maybe.maybe(Control_Category.identity(Control_Category.categoryFn))(addTxCollateral)(collateral)(unbalancedTx$prime);
                          var allUtxos = Data_Map_Internal.union(Types_Transaction.ordTransactionInput)(utxos)(TxOutput.utxoIndexToUtxo(networkId)(v.unbalancedTx.utxoIndex));
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(logTx(Control_Monad_Except_Trans.monadEffectExceptT(Control_Monad_Reader_Trans.monadEffectReader(Control_Monad_Logger_Trans.monadEffectLoggerT(Effect_Aff.monadEffectAff))))(Control_Monad_Logger_Class.monadLoggerExceptT(Control_Monad_Logger_Class.monadLoggerReaderT(Control_Monad_Logger_Trans.monadLoggerLoggerT(Effect_Aff.monadEffectAff))))("Unbalanced Collaterised Tx ")(allUtxos)(unbalancedCollTx))(function () {
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Control_Monad_Except_Trans.except(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff)))(prebalanceCollateral(Data_Semiring.zero(Data_BigInt.semiringBigInt))(allUtxos)(ownAddr)(unbalancedCollTx)))(function (ubcTx) {
                                  var unattachedTx$prime = Data_Lens_Setter.set(_transaction$prime(Data_Profunctor_Strong.strongFn))(ubcTx)(v);
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(evalExUnitsAndMinFee(unattachedTx$prime))(function (v1) {
                                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Control_Monad_Except_Trans.except(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff)))(prebalanceCollateral(Data_Semiring.add(Data_BigInt.semiringBigInt)(v1.value1)(feeBuffer))(allUtxos)(ownAddr)(ubcTx)))(function (ubcTx$prime) {
                                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(loop(allUtxos)(ownAddr)([  ])(Data_Lens_Setter.set(_transaction$prime(Data_Profunctor_Strong.strongFn))(ubcTx$prime)(unattachedTx$prime)))(function (nonAdaBalancedCollTx) {
                                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(Data_Functor.mapFlipped(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))(returnAdaChangeAndFinalizeFees(ownAddr)(allUtxos)(nonAdaBalancedCollTx))(Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(ReturnAdaChangeError$prime.create)))(function (unsignedTx) {
                                                  var unattachedTx$prime$prime = new Data_Tuple.Tuple(Data_Lens_Getter.viewOn(unsignedTx)(_transaction$prime(Data_Lens_Internal_Forget.strongForget)), Data_Lens_Getter.viewOn(unsignedTx)(_redeemersTxIns(Data_Lens_Internal_Forget.strongForget)));
                                                  var sortedUnsignedTx = Data_Lens_Setter.over((function () {
                                                      var $389 = Cardano_Types_Transaction["_body"](Data_Profunctor_Strong.strongFn);
                                                      var $390 = Cardano_Types_Transaction["_inputs"](Data_Profunctor_Strong.strongFn);
                                                      return function ($391) {
                                                          return $389($390($391));
                                                      };
                                                  })())(Data_Array.sort(Types_Transaction.ordTransactionInput))(Data_Tuple.fst(unattachedTx$prime$prime));
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Reader_Trans.monadReaderT(Control_Monad_Logger_Trans.monadLoggerT(Effect_Aff.monadAff))))(logTx(Control_Monad_Except_Trans.monadEffectExceptT(Control_Monad_Reader_Trans.monadEffectReader(Control_Monad_Logger_Trans.monadEffectLoggerT(Effect_Aff.monadEffectAff))))(Control_Monad_Logger_Class.monadLoggerExceptT(Control_Monad_Logger_Class.monadLoggerReaderT(Control_Monad_Logger_Trans.monadLoggerLoggerT(Effect_Aff.monadEffectAff))))("Post-balancing Tx ")(allUtxos)(sortedUnsignedTx))(function () {
                                                      return Control_Monad_Except_Trans.except(Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Logger_Trans.applicativeLoggerT(Effect_Aff.monadAff)))(new Data_Either.Right(Data_Lens_Setter.set(Data_Lens_Lens_Tuple["_1"](Data_Profunctor_Strong.strongFn))(sortedUnsignedTx)(unattachedTx$prime$prime)));
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          }));
      });
  };
  exports["balanceTx"] = balanceTx;
  exports["showBalanceTxError"] = showBalanceTxError;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Contract.Transaction"] = $PS["Contract.Transaction"] || {};
  var exports = $PS["Contract.Transaction"];
  var BalanceTx = $PS["BalanceTx"];
  var Cardano_Types_Transaction = $PS["Cardano.Types.Transaction"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Logger_Trans = $PS["Control.Monad.Logger.Trans"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lens_Getter = $PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = $PS["Data.Lens.Internal.Forget"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Effect_Aff = $PS["Effect.Aff"];
  var QueryM = $PS["QueryM"];
  var ReindexRedeemers = $PS["ReindexRedeemers"];
  var submit = (function () {
      var $17 = Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Logger_Trans.functorLoggerT(Effect_Aff.functorAff)))((function () {
          var $19 = Data_Newtype.wrap();
          var $20 = Data_Newtype.unwrap();
          return function ($21) {
              return $19($20($21));
          };
      })());
      return function ($18) {
          return Contract_Monad.wrapContract($17(QueryM.submitTxOgmios($18)));
      };
  })();
  var signTransactionBytes = function ($22) {
      return Contract_Monad.wrapContract(QueryM.signTransactionBytes($22));
  };
  var reindexSpentScriptRedeemers = function (balancedTx) {
      var $26 = ReindexRedeemers.reindexSpentScriptRedeemers(balancedTx);
      return function ($27) {
          return Contract_Monad.wrapContract($26($27));
      };
  };
  var finalizeTx = function (tx) {
      return function (datums) {
          return function (redeemers) {
              return Contract_Monad.wrapContract(QueryM.finalizeTx(tx)(datums)(redeemers));
          };
      };
  };   
  var balanceTx = function ($32) {
      return Contract_Monad.wrapContract(BalanceTx.balanceTx($32));
  };   
  var balanceAndSignTx = function (v) {
      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(BalanceTx.showBalanceTxError)(balanceTx(v)))(function (v1) {
          var inputs = Data_Lens_Getter.viewOn(v1.value0)((function () {
              var $35 = Cardano_Types_Transaction["_body"](Data_Lens_Internal_Forget.strongForget);
              var $36 = Cardano_Types_Transaction["_inputs"](Data_Lens_Internal_Forget.strongForget);
              return function ($37) {
                  return $35($36($37));
              };
          })());
          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(ReindexRedeemers.showReindexErrors)(reindexSpentScriptRedeemers(inputs)(v1.value1)))(function (redeemers) {
              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("balanceAndSignTx: Cannot attach datums and redeemer")(finalizeTx(v1.value0)(v.datums)(redeemers)))(function (v2) {
                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("balanceAndSignTx: Failed to sign transaction")(signTransactionBytes(Data_Newtype.wrap()(v2))))(function (signedTxCbor) {
                      return Control_Applicative.pure(Contract_Monad.applicativeContract)(Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                          transaction: v1.value0,
                          signedTxCbor: signedTxCbor
                      }));
                  });
              });
          });
      });
  };
  exports["balanceAndSignTx"] = balanceAndSignTx;
  exports["submit"] = submit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Contract.Utxos"] = $PS["Contract.Utxos"] || {};
  var exports = $PS["Contract.Utxos"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Plutus_Conversion = $PS["Plutus.Conversion"];
  var Plutus_Conversion_Address = $PS["Plutus.Conversion.Address"];
  var QueryM_Utxos = $PS["QueryM.Utxos"];                
  var utxosAt = function (address) {
      return Control_Bind.bind(Contract_Monad.bindContract)(Control_Monad_Reader_Class.asks(Contract_Monad.monadAskContractConfigCon)((function () {
          var $1 = Data_Newtype.unwrap();
          return function ($2) {
              return (function (v) {
                  return v.networkId;
              })($1($2));
          };
      })()))(function (networkId) {
          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("utxosAt: unable to serialize address")(Plutus_Conversion_Address.fromPlutusAddress(networkId)(address)))(function (cardanoAddr) {
              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.wrapContract(QueryM_Utxos.utxosAt(cardanoAddr)))(function (mCardanoUtxos) {
                  return Data_Maybe.maybe(Control_Applicative.pure(Contract_Monad.applicativeContract)(Data_Maybe.Nothing.value))((function () {
                      var $3 = Data_Functor.map(Contract_Monad.functorContract)(Data_Maybe.Just.create);
                      var $4 = Contract_Monad.liftContractM("utxosAt: unable to deserialize utxos");
                      return function ($5) {
                          return $3($4(Plutus_Conversion.toPlutusUtxoM($5)));
                      };
                  })())(mCardanoUtxos);
              });
          });
      });
  };
  exports["utxosAt"] = utxosAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Util"] = $PS["Util"] || {};
  var exports = $PS["Util"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Contract_ScriptLookups = $PS["Contract.ScriptLookups"];
  var Contract_Transaction = $PS["Contract.Transaction"];
  var Contract_Utxos = $PS["Contract.Utxos"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Time_Duration = $PS["Data.Time.Duration"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var FromData = $PS["FromData"];
  var Plutus_Types_Address = $PS["Plutus.Types.Address"];
  var ToData = $PS["ToData"];
  var Types_ScriptLookups = $PS["Types.ScriptLookups"];
  var Types_Transaction = $PS["Types.Transaction"];                
  var getUtxos = function (vhash) {
      var scriptAddress = Plutus_Types_Address.scriptHashAddress(vhash);
      return Control_Bind.bind(Contract_Monad.bindContract)(Data_Functor.map(Contract_Monad.functorContract)(Data_Maybe.fromMaybe(Data_Map_Internal.empty))(Contract_Utxos.utxosAt(scriptAddress)))(function (v) {
          return Control_Applicative.pure(Contract_Monad.applicativeContract)(v);
      });
  };
  var waitForTx = function (dictDuration) {
      return function (d) {
          return function (vhash) {
              return function (txid) {
                  var hasTransactionId = function (v) {
                      return Data_Eq.eq(Types_Transaction.eqTransactionHash)(v.value0.transactionId)(txid);
                  };
                  return Control_Bind.bind(Contract_Monad.bindContract)(getUtxos(vhash))(function (utxos) {
                      var v = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.fst)(Data_Foldable.find(Data_Foldable.foldableArray)(hasTransactionId)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(utxos)));
                      if (v instanceof Data_Maybe.Nothing) {
                          var $10 = Data_Ord.lessThanOrEq(Data_Time_Duration.ordMilliseconds)(Data_Time_Duration.fromDuration(dictDuration)(d))(0.0);
                          if ($10) {
                              return Control_Applicative.pure(Contract_Monad.applicativeContract)(Data_Maybe.Nothing.value);
                          };
                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Monad["logInfo'"](Contract_Monad.monadLoggerContract)("No tx yet, waiting for: " + Data_Show.show(Data_Time_Duration.showSeconds)(Data_Time_Duration.convertDuration(dictDuration)(Data_Time_Duration.durationSeconds)(d))))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Effect_Aff_Class.liftAff(Contract_Monad.monadAffContract)(Effect_Aff.delay(Data_Newtype.wrap()(1000.0))))(function () {
                                  return waitForTx(Data_Time_Duration.durationMilliseconds)(Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds)(Data_Time_Duration.fromDuration(dictDuration)(d))(Data_Time_Duration.fromDuration(Data_Time_Duration.durationSeconds)(Data_Time_Duration.negateDuration(Data_Time_Duration.durationSeconds)(1.0))))(vhash)(txid);
                              });
                          });
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Monad["logInfo'"](Contract_Monad.monadLoggerContract)("found tx:" + Data_Show.show(Types_Transaction.showTransactionHash)(txid)))(function () {
                              return Control_Applicative.pure(Contract_Monad.applicativeContract)(new Data_Maybe.Just(v.value0));
                          });
                      };
                      throw new Error("Failed pattern match at Util (line 55, column 3 - line 66, column 25): " + [ v.constructor.name ]);
                  });
              };
          };
      };
  };
  var buildBalanceSignAndSubmitTx = function (lookups) {
      return function (constraints) {
          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedE(Types_ScriptLookups.showMkUnbalancedTxError)(Contract_ScriptLookups.mkUnbalancedTx()()(FromData.fromDataUnit)(ToData.toDataUnit)(lookups)(constraints)))(function (ubTx) {
              return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftedM("Failed to balance/sign tx")(Contract_Transaction.balanceAndSignTx(ubTx)))(function (v) {
                  return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Transaction.submit(v.signedTxCbor))(function (txId) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Monad["logInfo'"](Contract_Monad.monadLoggerContract)("Tx ID: " + Data_Show.show(Types_Transaction.showTransactionHash)(txId)))(function () {
                          return Control_Applicative.pure(Contract_Monad.applicativeContract)(txId);
                      });
                  });
              });
          });
      };
  };
  exports["waitForTx"] = waitForTx;
  exports["buildBalanceSignAndSubmitTx"] = buildBalanceSignAndSubmitTx;
  exports["getUtxos"] = getUtxos;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Api"] = $PS["Api"] || {};
  var exports = $PS["Api"];
  var Aeson = $PS["Aeson"];
  var CBOR = $PS["CBOR"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Contract_Scripts = $PS["Contract.Scripts"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_BigInt = $PS["Data.BigInt"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Time_Duration = $PS["Data.Time.Duration"];
  var Plutus_Types_Value = $PS["Plutus.Types.Value"];
  var ToData = $PS["ToData"];
  var Types_PlutusData = $PS["Types.PlutusData"];
  var Types_ScriptLookups = $PS["Types.ScriptLookups"];
  var Types_Scripts = $PS["Types.Scripts"];
  var Types_TxConstraints = $PS["Types.TxConstraints"];
  var Util = $PS["Util"];                
  var Inc = (function () {
      function Inc() {

      };
      Inc.value = new Inc();
      return Inc;
  })();
  var Spend = (function () {
      function Spend() {

      };
      Spend.value = new Spend();
      return Spend;
  })();
  var toDataHelloRedemer = {
      toData: function (v) {
          if (v instanceof Inc) {
              return new Types_PlutusData.Constr(Data_Semiring.zero(Data_BigInt.semiringBigInt), [  ]);
          };
          if (v instanceof Spend) {
              return new Types_PlutusData.Constr(Data_Semiring.one(Data_BigInt.semiringBigInt), [  ]);
          };
          throw new Error("Failed pattern match at Api (line 105, column 1 - line 107, column 31): " + [ v.constructor.name ]);
      }
  };
  var spendRedeemer = ToData.toData(toDataHelloRedemer)(Spend.value);
  var redeemFromScript = function (vhash) {
      return function (validator) {
          return function (txInput) {
              return Control_Bind.bind(Contract_Monad.bindContract)(Util.getUtxos(vhash))(function (utxos) {
                  var lookups = Data_Semigroup.append(Types_ScriptLookups.semigroupScriptLookups)(Types_ScriptLookups.validator(validator))(Types_ScriptLookups.unspentOutputs(utxos));
                  var constraints = Types_TxConstraints.mustSpendScriptOutput(txInput)(spendRedeemer);
                  return Control_Bind.bind(Contract_Monad.bindContract)(Util.buildBalanceSignAndSubmitTx(lookups)(constraints))(function () {
                      return Contract_Monad["logInfo'"](Contract_Monad.monadLoggerContract)("finished");
                  });
              });
          };
      };
  };
  var incRedeemer = ToData.toData(toDataHelloRedemer)(Inc.value);
  var helloScript = function (n) {
      var maybeParamValidator = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Newtype.wrap())(Data_Either.hush(Aeson.decodeAeson(Types_Scripts.decodeAesonPlutusScript)(Aeson.fromString(CBOR.hello))));
      return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractM("decoding failed")(maybeParamValidator))(function (paramValidator) {
          return Control_Bind.bindFlipped(Contract_Monad.bindContract)(Contract_Monad.liftContractM("apply args failed"))(Contract_Scripts.applyArgsM()(Types_Scripts.decodeAesonValidator)(paramValidator)([ new Types_PlutusData.Integer(Data_BigInt.fromInt(n)) ]));
      });
  };
  var enoughForFees = Plutus_Types_Value.lovelaceValueOf(Data_BigInt.fromInt(2000000));
  var sendDatumToScript = function (n) {
      return function (vhash) {
          var lookups = Data_Monoid.mempty(Types_ScriptLookups.monoidScriptLookups);
          var constraints = Types_TxConstraints.mustPayToScript(vhash)(ToData.toData(ToData.toDataBigInt)(Data_BigInt.fromInt(n)))(enoughForFees);
          return Control_Bind.bind(Contract_Monad.bindContract)(Util.buildBalanceSignAndSubmitTx(lookups)(constraints))(function (txId) {
              return Control_Bind.bindFlipped(Contract_Monad.bindContract)(Contract_Monad.liftContractM("gave up waiting for sendDatumToScript TX"))(Util.waitForTx(Data_Time_Duration.durationMinutes)(1.0)(vhash)(txId));
          });
      };
  };
  var setDatumAtScript = function (n) {
      return function (vhash) {
          return function (validator) {
              return function (txInput) {
                  return Control_Bind.bind(Contract_Monad.bindContract)(Util.getUtxos(vhash))(function (utxos) {
                      var lookups = Data_Semigroup.append(Types_ScriptLookups.semigroupScriptLookups)(Types_ScriptLookups.validator(validator))(Types_ScriptLookups.unspentOutputs(utxos));
                      var constraints = Data_Semigroup.append(Types_TxConstraints.semigroupTxConstraints)(Types_TxConstraints.mustSpendScriptOutput(txInput)(incRedeemer))(Types_TxConstraints.mustPayToScript(vhash)(ToData.toData(ToData.toDataBigInt)(Data_BigInt.fromInt(n)))(enoughForFees));
                      return Control_Bind.bind(Contract_Monad.bindContract)(Util.buildBalanceSignAndSubmitTx(lookups)(constraints))(function (txId) {
                          return Control_Bind.bindFlipped(Contract_Monad.bindContract)(Contract_Monad.liftContractM("failed waiting for increment"))(Util.waitForTx(Data_Time_Duration.durationMinutes)(1.0)(vhash)(txId));
                      });
                  });
              };
          };
      };
  };
  exports["sendDatumToScript"] = sendDatumToScript;
  exports["setDatumAtScript"] = setDatumAtScript;
  exports["redeemFromScript"] = redeemFromScript;
  exports["helloScript"] = helloScript;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Node.Encoding"] = $PS["Node.Encoding"] || {};
  var exports = $PS["Node.Encoding"];    
  var ASCII = (function () {
      function ASCII() {

      };
      ASCII.value = new ASCII();
      return ASCII;
  })();
  var UTF8 = (function () {
      function UTF8() {

      };
      UTF8.value = new UTF8();
      return UTF8;
  })();
  var UTF16LE = (function () {
      function UTF16LE() {

      };
      UTF16LE.value = new UTF16LE();
      return UTF16LE;
  })();
  var UCS2 = (function () {
      function UCS2() {

      };
      UCS2.value = new UCS2();
      return UCS2;
  })();
  var Base64 = (function () {
      function Base64() {

      };
      Base64.value = new Base64();
      return Base64;
  })();
  var Latin1 = (function () {
      function Latin1() {

      };
      Latin1.value = new Latin1();
      return Latin1;
  })();
  var Binary = (function () {
      function Binary() {

      };
      Binary.value = new Binary();
      return Binary;
  })();
  var Hex = (function () {
      function Hex() {

      };
      Hex.value = new Hex();
      return Hex;
  })();
  var showEncoding = {
      show: function (v) {
          if (v instanceof ASCII) {
              return "ASCII";
          };
          if (v instanceof UTF8) {
              return "UTF8";
          };
          if (v instanceof UTF16LE) {
              return "UTF16LE";
          };
          if (v instanceof UCS2) {
              return "UCS2";
          };
          if (v instanceof Base64) {
              return "Base64";
          };
          if (v instanceof Latin1) {
              return "Latin1";
          };
          if (v instanceof Binary) {
              return "Binary";
          };
          if (v instanceof Hex) {
              return "Hex";
          };
          throw new Error("Failed pattern match at Node.Encoding (line 19, column 1 - line 27, column 23): " + [ v.constructor.name ]);
      }
  };
  exports["UTF8"] = UTF8;
  exports["showEncoding"] = showEncoding;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeRequireFS = require("fs");
})(PS["Node.FS.Internal"] = PS["Node.FS.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Node.FS.Internal"] = $PS["Node.FS.Internal"] || {};
  var exports = $PS["Node.FS.Internal"];
  var $foreign = $PS["Node.FS.Internal"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var mkEffect = Unsafe_Coerce.unsafeCoerce;
  exports["mkEffect"] = mkEffect;
  exports["unsafeRequireFS"] = $foreign.unsafeRequireFS;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Node.FS.Sync"] = $PS["Node.FS.Sync"] || {};
  var exports = $PS["Node.FS.Sync"];
  var Data_Show = $PS["Data.Show"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Internal = $PS["Node.FS.Internal"];          
  var fs = Node_FS_Internal.unsafeRequireFS;
  var readTextFile = function (encoding) {
      return function (file) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.readFileSync(file, {
                  encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
              });
          });
      };
  };
  exports["readTextFile"] = readTextFile;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Wallet.KeyFile"] = $PS["Wallet.KeyFile"] || {};
  var exports = $PS["Wallet.KeyFile"];
  var Aeson = $PS["Aeson"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Argonaut_Decode_Error = $PS["Data.Argonaut.Decode.Error"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Sync = $PS["Node.FS.Sync"];
  var Serialization = $PS["Serialization"];
  var Types_ByteArray = $PS["Types.ByteArray"];
  var decodeAesonPrivateKeyFile = {
      decodeAeson: function (aeson) {
          return Control_Bind.bind(Data_Either.bindEither)(Aeson.decodeAeson(Aeson.decodeAesonObject(Aeson.decodeAesonAeson))(aeson))(function (obj) {
              return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonString)(obj)("type"))(function (typeStr) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)(Control_Applicative.unless(Data_Either.applicativeEither)(typeStr === "PaymentSigningKeyShelley_ed25519")(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(new Data_Argonaut_Decode_Error.TypeMismatch("PaymentSigningKeyShelley_ed25519"))))(function () {
                      return Control_Bind.bind(Data_Either.bindEither)(Aeson.getField(Aeson.decodeAesonString)(obj)("cborHex"))(function (cborHex) {
                          var splitted = Data_String_CodeUnits.splitAt(4)(cborHex);
                          return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)(Control_Applicative.unless(Data_Either.applicativeEither)(splitted.before === "5820")(Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(new Data_Argonaut_Decode_Error.TypeMismatch("PrivateKeyFile CborHex"))))(function () {
                              var v = Types_ByteArray.hexToByteArray(splitted.after);
                              if (v instanceof Data_Maybe.Nothing) {
                                  return Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither)(new Data_Argonaut_Decode_Error.TypeMismatch("PrivateKey CborHex"));
                              };
                              if (v instanceof Data_Maybe.Just) {
                                  return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Newtype.wrap()(v.value0));
                              };
                              throw new Error("Failed pattern match at Wallet.KeyFile (line 45, column 5 - line 47, column 65): " + [ v.constructor.name ]);
                          });
                      });
                  });
              });
          });
      }
  };
  var privateKeyFromFile = function (filePath) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_FS_Sync.readTextFile(Node_Encoding.UTF8.value)(filePath)))(function (fileContents) {
          var v = Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(Aeson.decodeAeson(decodeAesonPrivateKeyFile))(Aeson.parseJsonStringToAeson)(fileContents);
          if (v instanceof Data_Either.Left) {
              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Exception["throw"](Data_Show.show(Data_Argonaut_Decode_Error.showJsonDecodeError)(v.value0)));
          };
          if (v instanceof Data_Either.Right) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Serialization.privateKeyFromBytes(v.value0));
          };
          throw new Error("Failed pattern match at Wallet.KeyFile (line 52, column 3 - line 55, column 39): " + [ v.constructor.name ]);
      });
  };
  exports["privateKeyFromFile"] = privateKeyFromFile;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Contract.Wallet.KeyFile"] = $PS["Contract.Wallet.KeyFile"] || {};
  var exports = $PS["Contract.Wallet.KeyFile"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Wallet = $PS["Wallet"];
  var Wallet_KeyFile = $PS["Wallet.KeyFile"];                
  var mkKeyWalletFromFile = function (filePath) {
      return Data_Functor.map(Effect_Aff.functorAff)(Data_Functor.map(Data_Maybe.functorMaybe)(Wallet.mkKeyWallet))(Wallet_KeyFile.privateKeyFromFile(filePath));
  };
  exports["mkKeyWalletFromFile"] = mkKeyWalletFromFile;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["UnitTest"] = $PS["UnitTest"] || {};
  var exports = $PS["UnitTest"];
  var Api = $PS["Api"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Control_Bind = $PS["Control.Bind"];
  var Scripts = $PS["Scripts"];                
  var helloUnitTest = Control_Bind.discard(Control_Bind.discardUnit)(Contract_Monad.bindContract)(Contract_Monad["logInfo'"](Contract_Monad.monadLoggerContract)("Running Examples.Hello"))(function () {
      return Control_Bind.bind(Contract_Monad.bindContract)(Api.helloScript(4))(function (validator) {
          return Control_Bind.bind(Contract_Monad.bindContract)(Contract_Monad.liftContractAffM("Couldn't hash validator")(Scripts.validatorHash(validator)))(function (vhash) {
              return Control_Bind.bind(Contract_Monad.bindContract)(Control_Bind.bind(Contract_Monad.bindContract)(Api.sendDatumToScript(5)(vhash))(Api.setDatumAtScript(9)(vhash)(validator)))(Api.redeemFromScript(vhash)(validator));
          });
      });
  });
  exports["helloUnitTest"] = helloUnitTest;
})(PS);
(function($PS) {
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Contract_Monad = $PS["Contract.Monad"];
  var Contract_Wallet_KeyFile = $PS["Contract.Wallet.KeyFile"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Effect_Aff = $PS["Effect.Aff"];
  var UnitTest = $PS["UnitTest"];                

  //import Wallet(mkNamiWalletAff)
  //import Wallet(mkKeyWalletFromFile)
  //import Wallet.KeyFile (privateKeyFromFile)
  //import Wallet(mkKeyWallet)
  var main = Effect_Aff.launchAff_(Control_Bind.bind(Effect_Aff.bindAff)(Contract_Wallet_KeyFile.mkKeyWalletFromFile("someFileName"))(function (wallet) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Newtype.over()()(Contract_Monad.ContractConfig)(function (v) {
          return {
              wallet: wallet,
              datumCacheWs: v.datumCacheWs,
              logLevel: v.logLevel,
              networkId: v.networkId,
              ogmiosWs: v.ogmiosWs,
              serverConfig: v.serverConfig,
              usedTxOuts: v.usedTxOuts
          };
      }))(Contract_Monad.traceTestnetContractConfig))(function (cfg) {
          return Contract_Monad.runContract_(cfg)(UnitTest.helloUnitTest);
      });
  }));
  exports["main"] = main;
})(PS);
PS["Main"].main();